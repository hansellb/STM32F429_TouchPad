
Touch_Panel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007df8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001930  08007fa4  08007fa4  00017fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080098d4  080098d4  000198d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080098d8  080098d8  000198d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000150  20000000  080098dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020150  2**0
                  CONTENTS
  7 .bss          000006d0  20000150  20000150  00020150  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000820  20000820  00020150  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001861a  00000000  00000000  0002017e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003978  00000000  00000000  00038798  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001248  00000000  00000000  0003c110  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001058  00000000  00000000  0003d358  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000790d  00000000  00000000  0003e3b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006d7a  00000000  00000000  00045cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004ca37  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004a6c  00000000  00000000  0004cab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00051520  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000150 	.word	0x20000150
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007f8c 	.word	0x08007f8c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000154 	.word	0x20000154
 80001e8:	08007f8c 	.word	0x08007f8c

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000204:	4a06      	ldr	r2, [pc, #24]	; (8000220 <NVIC_PriorityGroupConfig+0x24>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800020c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000210:	60d3      	str	r3, [r2, #12]
}
 8000212:	bf00      	nop
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 800022c:	2300      	movs	r3, #0
 800022e:	73fb      	strb	r3, [r7, #15]
 8000230:	2300      	movs	r3, #0
 8000232:	73bb      	strb	r3, [r7, #14]
 8000234:	230f      	movs	r3, #15
 8000236:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	78db      	ldrb	r3, [r3, #3]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d039      	beq.n	80002b4 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000240:	4b27      	ldr	r3, [pc, #156]	; (80002e0 <NVIC_Init+0xbc>)
 8000242:	68db      	ldr	r3, [r3, #12]
 8000244:	43db      	mvns	r3, r3
 8000246:	0a1b      	lsrs	r3, r3, #8
 8000248:	b2db      	uxtb	r3, r3
 800024a:	f003 0307 	and.w	r3, r3, #7
 800024e:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000250:	7bfb      	ldrb	r3, [r7, #15]
 8000252:	f1c3 0304 	rsb	r3, r3, #4
 8000256:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000258:	7b7a      	ldrb	r2, [r7, #13]
 800025a:	7bfb      	ldrb	r3, [r7, #15]
 800025c:	fa42 f303 	asr.w	r3, r2, r3
 8000260:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	785b      	ldrb	r3, [r3, #1]
 8000266:	461a      	mov	r2, r3
 8000268:	7bbb      	ldrb	r3, [r7, #14]
 800026a:	fa02 f303 	lsl.w	r3, r2, r3
 800026e:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	789a      	ldrb	r2, [r3, #2]
 8000274:	7b7b      	ldrb	r3, [r7, #13]
 8000276:	4013      	ands	r3, r2
 8000278:	b2da      	uxtb	r2, r3
 800027a:	7bfb      	ldrb	r3, [r7, #15]
 800027c:	4313      	orrs	r3, r2
 800027e:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000280:	7bfb      	ldrb	r3, [r7, #15]
 8000282:	011b      	lsls	r3, r3, #4
 8000284:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000286:	4a17      	ldr	r2, [pc, #92]	; (80002e4 <NVIC_Init+0xc0>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	4413      	add	r3, r2
 800028e:	7bfa      	ldrb	r2, [r7, #15]
 8000290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000294:	4a13      	ldr	r2, [pc, #76]	; (80002e4 <NVIC_Init+0xc0>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	095b      	lsrs	r3, r3, #5
 800029c:	b2db      	uxtb	r3, r3
 800029e:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	f003 031f 	and.w	r3, r3, #31
 80002a8:	2101      	movs	r1, #1
 80002aa:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80002ae:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80002b2:	e00f      	b.n	80002d4 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80002b4:	490b      	ldr	r1, [pc, #44]	; (80002e4 <NVIC_Init+0xc0>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	095b      	lsrs	r3, r3, #5
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	f003 031f 	and.w	r3, r3, #31
 80002c8:	2201      	movs	r2, #1
 80002ca:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80002cc:	f100 0320 	add.w	r3, r0, #32
 80002d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002d4:	bf00      	nop
 80002d6:	3714      	adds	r7, #20
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr
 80002e0:	e000ed00 	.word	0xe000ed00
 80002e4:	e000e100 	.word	0xe000e100

080002e8 <DMA2D_DeInit>:
  * @param  None
  * @retval None
  */

void DMA2D_DeInit(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* Enable DMA2D reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, ENABLE);
 80002ec:	2101      	movs	r1, #1
 80002ee:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80002f2:	f001 f919 	bl	8001528 <RCC_AHB1PeriphResetCmd>
  /* Release DMA2D from reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, DISABLE);
 80002f6:	2100      	movs	r1, #0
 80002f8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80002fc:	f001 f914 	bl	8001528 <RCC_AHB1PeriphResetCmd>
}
 8000300:	bf00      	nop
 8000302:	bd80      	pop	{r7, pc}

08000304 <DMA2D_Init>:
  * @param  DMA2D_InitStruct: pointer to a DMA2D_InitTypeDef structure that contains
  *         the configuration information for the specified DMA2D peripheral.
  * @retval None
  */
void DMA2D_Init(DMA2D_InitTypeDef* DMA2D_InitStruct)
{
 8000304:	b480      	push	{r7}
 8000306:	b087      	sub	sp, #28
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]

  uint32_t outgreen = 0;
 800030c:	2300      	movs	r3, #0
 800030e:	617b      	str	r3, [r7, #20]
  uint32_t outred   = 0;
 8000310:	2300      	movs	r3, #0
 8000312:	613b      	str	r3, [r7, #16]
  uint32_t outalpha = 0;
 8000314:	2300      	movs	r3, #0
 8000316:	60fb      	str	r3, [r7, #12]
  uint32_t pixline  = 0;
 8000318:	2300      	movs	r3, #0
 800031a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA2D_OUTPUT_OFFSET(DMA2D_InitStruct->DMA2D_OutputOffset));
  assert_param(IS_DMA2D_LINE(DMA2D_InitStruct->DMA2D_NumberOfLine));
  assert_param(IS_DMA2D_PIXEL(DMA2D_InitStruct->DMA2D_PixelPerLine));

  /* Configures the DMA2D operation mode */
  DMA2D->CR &= (uint32_t)CR_MASK;
 800031c:	4a50      	ldr	r2, [pc, #320]	; (8000460 <DMA2D_Init+0x15c>)
 800031e:	4b50      	ldr	r3, [pc, #320]	; (8000460 <DMA2D_Init+0x15c>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f023 1303 	bic.w	r3, r3, #196611	; 0x30003
 8000326:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800032a:	6013      	str	r3, [r2, #0]
  DMA2D->CR |= (DMA2D_InitStruct->DMA2D_Mode);
 800032c:	494c      	ldr	r1, [pc, #304]	; (8000460 <DMA2D_Init+0x15c>)
 800032e:	4b4c      	ldr	r3, [pc, #304]	; (8000460 <DMA2D_Init+0x15c>)
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4313      	orrs	r3, r2
 8000338:	600b      	str	r3, [r1, #0]

  /* Configures the color mode of the output image */
  DMA2D->OPFCCR &= ~(uint32_t)DMA2D_OPFCCR_CM;
 800033a:	4a49      	ldr	r2, [pc, #292]	; (8000460 <DMA2D_Init+0x15c>)
 800033c:	4b48      	ldr	r3, [pc, #288]	; (8000460 <DMA2D_Init+0x15c>)
 800033e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000340:	f023 0307 	bic.w	r3, r3, #7
 8000344:	6353      	str	r3, [r2, #52]	; 0x34
  DMA2D->OPFCCR |= (DMA2D_InitStruct->DMA2D_CMode);
 8000346:	4946      	ldr	r1, [pc, #280]	; (8000460 <DMA2D_Init+0x15c>)
 8000348:	4b45      	ldr	r3, [pc, #276]	; (8000460 <DMA2D_Init+0x15c>)
 800034a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	685b      	ldr	r3, [r3, #4]
 8000350:	4313      	orrs	r3, r2
 8000352:	634b      	str	r3, [r1, #52]	; 0x34

  /* Configures the output color */

  if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB8888)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	685b      	ldr	r3, [r3, #4]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d10c      	bne.n	8000376 <DMA2D_Init+0x72>
  {
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	68db      	ldr	r3, [r3, #12]
 8000360:	021b      	lsls	r3, r3, #8
 8000362:	617b      	str	r3, [r7, #20]
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	691b      	ldr	r3, [r3, #16]
 8000368:	041b      	lsls	r3, r3, #16
 800036a:	613b      	str	r3, [r7, #16]
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 24;
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	061b      	lsls	r3, r3, #24
 8000372:	60fb      	str	r3, [r7, #12]
 8000374:	e03a      	b.n	80003ec <DMA2D_Init+0xe8>
  }
  else
  
    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB888)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	2b01      	cmp	r3, #1
 800037c:	d10a      	bne.n	8000394 <DMA2D_Init+0x90>
    {
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	68db      	ldr	r3, [r3, #12]
 8000382:	021b      	lsls	r3, r3, #8
 8000384:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	691b      	ldr	r3, [r3, #16]
 800038a:	041b      	lsls	r3, r3, #16
 800038c:	613b      	str	r3, [r7, #16]
      outalpha = (uint32_t)0x00000000;
 800038e:	2300      	movs	r3, #0
 8000390:	60fb      	str	r3, [r7, #12]
 8000392:	e02b      	b.n	80003ec <DMA2D_Init+0xe8>
    }
     
  else

    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB565)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	2b02      	cmp	r3, #2
 800039a:	d10a      	bne.n	80003b2 <DMA2D_Init+0xae>
    {
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	68db      	ldr	r3, [r3, #12]
 80003a0:	015b      	lsls	r3, r3, #5
 80003a2:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 11;
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	691b      	ldr	r3, [r3, #16]
 80003a8:	02db      	lsls	r3, r3, #11
 80003aa:	613b      	str	r3, [r7, #16]
      outalpha = (uint32_t)0x00000000;
 80003ac:	2300      	movs	r3, #0
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	e01c      	b.n	80003ec <DMA2D_Init+0xe8>
    }

  else

    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB1555)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	685b      	ldr	r3, [r3, #4]
 80003b6:	2b03      	cmp	r3, #3
 80003b8:	d10c      	bne.n	80003d4 <DMA2D_Init+0xd0>
    {  
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	68db      	ldr	r3, [r3, #12]
 80003be:	015b      	lsls	r3, r3, #5
 80003c0:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 10;
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	691b      	ldr	r3, [r3, #16]
 80003c6:	029b      	lsls	r3, r3, #10
 80003c8:	613b      	str	r3, [r7, #16]
      outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 15;
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	03db      	lsls	r3, r3, #15
 80003d0:	60fb      	str	r3, [r7, #12]
 80003d2:	e00b      	b.n	80003ec <DMA2D_Init+0xe8>
    }

  else /* DMA2D_CMode = DMA2D_ARGB4444 */
  {
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 4;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	011b      	lsls	r3, r3, #4
 80003da:	617b      	str	r3, [r7, #20]
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 8;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	691b      	ldr	r3, [r3, #16]
 80003e0:	021b      	lsls	r3, r3, #8
 80003e2:	613b      	str	r3, [r7, #16]
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 12;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	695b      	ldr	r3, [r3, #20]
 80003e8:	031b      	lsls	r3, r3, #12
 80003ea:	60fb      	str	r3, [r7, #12]
  }  
  DMA2D->OCOLR |= ((outgreen) | (outred) | (DMA2D_InitStruct->DMA2D_OutputBlue) | (outalpha));
 80003ec:	481c      	ldr	r0, [pc, #112]	; (8000460 <DMA2D_Init+0x15c>)
 80003ee:	4b1c      	ldr	r3, [pc, #112]	; (8000460 <DMA2D_Init+0x15c>)
 80003f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80003f2:	6979      	ldr	r1, [r7, #20]
 80003f4:	693b      	ldr	r3, [r7, #16]
 80003f6:	4319      	orrs	r1, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	689b      	ldr	r3, [r3, #8]
 80003fc:	4319      	orrs	r1, r3
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	430b      	orrs	r3, r1
 8000402:	4313      	orrs	r3, r2
 8000404:	6383      	str	r3, [r0, #56]	; 0x38

  /* Configures the output memory address */
  DMA2D->OMAR = (DMA2D_InitStruct->DMA2D_OutputMemoryAdd);
 8000406:	4a16      	ldr	r2, [pc, #88]	; (8000460 <DMA2D_Init+0x15c>)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Configure  the line Offset */
  DMA2D->OOR &= ~(uint32_t)DMA2D_OOR_LO;
 800040e:	4a14      	ldr	r2, [pc, #80]	; (8000460 <DMA2D_Init+0x15c>)
 8000410:	4b13      	ldr	r3, [pc, #76]	; (8000460 <DMA2D_Init+0x15c>)
 8000412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000414:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000418:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800041c:	6413      	str	r3, [r2, #64]	; 0x40
  DMA2D->OOR |= (DMA2D_InitStruct->DMA2D_OutputOffset);
 800041e:	4910      	ldr	r1, [pc, #64]	; (8000460 <DMA2D_Init+0x15c>)
 8000420:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <DMA2D_Init+0x15c>)
 8000422:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	69db      	ldr	r3, [r3, #28]
 8000428:	4313      	orrs	r3, r2
 800042a:	640b      	str	r3, [r1, #64]	; 0x40

  /* Configure the number of line and pixel per line */
  pixline = DMA2D_InitStruct->DMA2D_PixelPerLine << 16; 
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000430:	041b      	lsls	r3, r3, #16
 8000432:	60bb      	str	r3, [r7, #8]
  DMA2D->NLR &= ~(DMA2D_NLR_NL | DMA2D_NLR_PL);
 8000434:	4a0a      	ldr	r2, [pc, #40]	; (8000460 <DMA2D_Init+0x15c>)
 8000436:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <DMA2D_Init+0x15c>)
 8000438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800043a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800043e:	6453      	str	r3, [r2, #68]	; 0x44
  DMA2D->NLR |= ((DMA2D_InitStruct->DMA2D_NumberOfLine) | (pixline));
 8000440:	4807      	ldr	r0, [pc, #28]	; (8000460 <DMA2D_Init+0x15c>)
 8000442:	4b07      	ldr	r3, [pc, #28]	; (8000460 <DMA2D_Init+0x15c>)
 8000444:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	6a19      	ldr	r1, [r3, #32]
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	430b      	orrs	r3, r1
 800044e:	4313      	orrs	r3, r2
 8000450:	6443      	str	r3, [r0, #68]	; 0x44
  * @brief  Fills each DMA2D_InitStruct member with its default value.
  * @param  DMA2D_InitStruct: pointer to a DMA2D_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
}
 8000452:	bf00      	nop
 8000454:	371c      	adds	r7, #28
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	4002b000 	.word	0x4002b000

08000464 <DMA2D_StartTransfer>:
  * @param 
  * @retval None
  */

void DMA2D_StartTransfer(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
    /* Start DMA2D transfer by setting START bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_START;
 8000468:	4a05      	ldr	r2, [pc, #20]	; (8000480 <DMA2D_StartTransfer+0x1c>)
 800046a:	4b05      	ldr	r3, [pc, #20]	; (8000480 <DMA2D_StartTransfer+0x1c>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	f043 0301 	orr.w	r3, r3, #1
 8000472:	6013      	str	r3, [r2, #0]
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	4002b000 	.word	0x4002b000

08000484 <DMA2D_GetFlagStatus>:
  *     @arg DMA2D_FLAG_TE:   Transfer Error interrupt flag.
  * @retval The new state of DMA2D_FLAG (SET or RESET).
  */

FlagStatus DMA2D_GetFlagStatus(uint32_t DMA2D_FLAG)
{
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800048c:	2300      	movs	r3, #0
 800048e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_DMA2D_GET_FLAG(DMA2D_FLAG));
  
  /* Check the status of the specified DMA2D flag */
  if (((DMA2D->ISR) & DMA2D_FLAG) != (uint32_t)RESET)
 8000490:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <DMA2D_GetFlagStatus+0x30>)
 8000492:	685a      	ldr	r2, [r3, #4]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4013      	ands	r3, r2
 8000498:	2b00      	cmp	r3, #0
 800049a:	d002      	beq.n	80004a2 <DMA2D_GetFlagStatus+0x1e>
  {
    /* DMA2D_FLAG is set */
    bitstatus = SET;
 800049c:	2301      	movs	r3, #1
 800049e:	73fb      	strb	r3, [r7, #15]
 80004a0:	e001      	b.n	80004a6 <DMA2D_GetFlagStatus+0x22>
  }
  else
  {
    /* DMA2D_FLAG is reset */
    bitstatus = RESET;
 80004a2:	2300      	movs	r3, #0
 80004a4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DMA2D_FLAG status */
  return bitstatus;
 80004a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	3714      	adds	r7, #20
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr
 80004b4:	4002b000 	.word	0x4002b000

080004b8 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80004c4:	4b34      	ldr	r3, [pc, #208]	; (8000598 <EXTI_Init+0xe0>)
 80004c6:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	799b      	ldrb	r3, [r3, #6]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d04f      	beq.n	8000570 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80004d0:	4931      	ldr	r1, [pc, #196]	; (8000598 <EXTI_Init+0xe0>)
 80004d2:	4b31      	ldr	r3, [pc, #196]	; (8000598 <EXTI_Init+0xe0>)
 80004d4:	681a      	ldr	r2, [r3, #0]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	43db      	mvns	r3, r3
 80004dc:	4013      	ands	r3, r2
 80004de:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80004e0:	492d      	ldr	r1, [pc, #180]	; (8000598 <EXTI_Init+0xe0>)
 80004e2:	4b2d      	ldr	r3, [pc, #180]	; (8000598 <EXTI_Init+0xe0>)
 80004e4:	685a      	ldr	r2, [r3, #4]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	43db      	mvns	r3, r3
 80004ec:	4013      	ands	r3, r2
 80004ee:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	791b      	ldrb	r3, [r3, #4]
 80004f4:	461a      	mov	r2, r3
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	4413      	add	r3, r2
 80004fa:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	68fa      	ldr	r2, [r7, #12]
 8000500:	6811      	ldr	r1, [r2, #0]
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	6812      	ldr	r2, [r2, #0]
 8000506:	430a      	orrs	r2, r1
 8000508:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800050a:	4923      	ldr	r1, [pc, #140]	; (8000598 <EXTI_Init+0xe0>)
 800050c:	4b22      	ldr	r3, [pc, #136]	; (8000598 <EXTI_Init+0xe0>)
 800050e:	689a      	ldr	r2, [r3, #8]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	43db      	mvns	r3, r3
 8000516:	4013      	ands	r3, r2
 8000518:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800051a:	491f      	ldr	r1, [pc, #124]	; (8000598 <EXTI_Init+0xe0>)
 800051c:	4b1e      	ldr	r3, [pc, #120]	; (8000598 <EXTI_Init+0xe0>)
 800051e:	68da      	ldr	r2, [r3, #12]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	43db      	mvns	r3, r3
 8000526:	4013      	ands	r3, r2
 8000528:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	795b      	ldrb	r3, [r3, #5]
 800052e:	2b10      	cmp	r3, #16
 8000530:	d10e      	bne.n	8000550 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000532:	4919      	ldr	r1, [pc, #100]	; (8000598 <EXTI_Init+0xe0>)
 8000534:	4b18      	ldr	r3, [pc, #96]	; (8000598 <EXTI_Init+0xe0>)
 8000536:	689a      	ldr	r2, [r3, #8]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4313      	orrs	r3, r2
 800053e:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000540:	4915      	ldr	r1, [pc, #84]	; (8000598 <EXTI_Init+0xe0>)
 8000542:	4b15      	ldr	r3, [pc, #84]	; (8000598 <EXTI_Init+0xe0>)
 8000544:	68da      	ldr	r2, [r3, #12]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4313      	orrs	r3, r2
 800054c:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 800054e:	e01d      	b.n	800058c <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8000550:	4b11      	ldr	r3, [pc, #68]	; (8000598 <EXTI_Init+0xe0>)
 8000552:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	795b      	ldrb	r3, [r3, #5]
 8000558:	461a      	mov	r2, r3
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	4413      	add	r3, r2
 800055e:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	68fa      	ldr	r2, [r7, #12]
 8000564:	6811      	ldr	r1, [r2, #0]
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	6812      	ldr	r2, [r2, #0]
 800056a:	430a      	orrs	r2, r1
 800056c:	601a      	str	r2, [r3, #0]
}
 800056e:	e00d      	b.n	800058c <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	791b      	ldrb	r3, [r3, #4]
 8000574:	461a      	mov	r2, r3
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	4413      	add	r3, r2
 800057a:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	68fa      	ldr	r2, [r7, #12]
 8000580:	6811      	ldr	r1, [r2, #0]
 8000582:	687a      	ldr	r2, [r7, #4]
 8000584:	6812      	ldr	r2, [r2, #0]
 8000586:	43d2      	mvns	r2, r2
 8000588:	400a      	ands	r2, r1
 800058a:	601a      	str	r2, [r3, #0]
}
 800058c:	bf00      	nop
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	40013c00 	.word	0x40013c00

0800059c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80005a4:	4a04      	ldr	r2, [pc, #16]	; (80005b8 <EXTI_ClearITPendingBit+0x1c>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6153      	str	r3, [r2, #20]
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	40013c00 	.word	0x40013c00

080005bc <FMC_SDRAMInit>:
  *         that contains the configuration information for the FMC SDRAM 
  *         specified Banks.                       
  * @retval None
  */
void FMC_SDRAMInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)
{ 
 80005bc:	b480      	push	{r7}
 80005be:	b087      	sub	sp, #28
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  /* temporary registers */
  uint32_t tmpr1 = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	613b      	str	r3, [r7, #16]
  uint32_t tmpr3 = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr4 = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	685a      	ldr	r2, [r3, #4]
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	689b      	ldr	r3, [r3, #8]
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 80005dc:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	68db      	ldr	r3, [r3, #12]
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 80005e2:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	691b      	ldr	r3, [r3, #16]
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 80005e8:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_CASLatency |
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	695b      	ldr	r3, [r3, #20]
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 80005ee:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_WriteProtection |
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	699b      	ldr	r3, [r3, #24]
             FMC_SDRAMInitStruct->FMC_CASLatency |
 80005f4:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	69db      	ldr	r3, [r3, #28]
             FMC_SDRAMInitStruct->FMC_WriteProtection |
 80005fa:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	6a1b      	ldr	r3, [r3, #32]
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8000600:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 8000606:	4313      	orrs	r3, r2
 8000608:	617b      	str	r3, [r7, #20]
            
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d106      	bne.n	8000620 <FMC_SDRAMInit+0x64>
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 8000612:	4940      	ldr	r1, [pc, #256]	; (8000714 <FMC_SDRAMInit+0x158>)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	697a      	ldr	r2, [r7, #20]
 800061a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800061e:	e011      	b.n	8000644 <FMC_SDRAMInit+0x88>
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	69da      	ldr	r2, [r3, #28]
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	6a1b      	ldr	r3, [r3, #32]
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8000628:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 800062e:	4313      	orrs	r3, r2
 8000630:	60fb      	str	r3, [r7, #12]
    
    FMC_Bank5_6->SDCR[FMC_Bank1_SDRAM] = tmpr3;
 8000632:	4a38      	ldr	r2, [pc, #224]	; (8000714 <FMC_SDRAMInit+0x158>)
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	6013      	str	r3, [r2, #0]
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 8000638:	4936      	ldr	r1, [pc, #216]	; (8000714 <FMC_SDRAMInit+0x158>)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	697a      	ldr	r2, [r7, #20]
 8000640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d130      	bne.n	80006ae <FMC_SDRAMInit+0xf2>
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	1e5a      	subs	r2, r3, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	3b01      	subs	r3, #1
 800065c:	011b      	lsls	r3, r3, #4
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800065e:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	3b01      	subs	r3, #1
 8000668:	021b      	lsls	r3, r3, #8
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 800066a:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000670:	68db      	ldr	r3, [r3, #12]
 8000672:	3b01      	subs	r3, #1
 8000674:	031b      	lsls	r3, r3, #12
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 8000676:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800067c:	691b      	ldr	r3, [r3, #16]
 800067e:	3b01      	subs	r3, #1
 8000680:	041b      	lsls	r3, r3, #16
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8000682:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	3b01      	subs	r3, #1
 800068c:	051b      	lsls	r3, r3, #20
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 800068e:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay)-1) << 24);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	3b01      	subs	r3, #1
 8000698:	061b      	lsls	r3, r3, #24
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800069a:	4313      	orrs	r3, r2
 800069c:	613b      	str	r3, [r7, #16]
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 800069e:	491d      	ldr	r1, [pc, #116]	; (8000714 <FMC_SDRAMInit+0x158>)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	3302      	adds	r3, #2
 80006a6:	693a      	ldr	r2, [r7, #16]
 80006a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            
            FMC_Bank5_6->SDTR[FMC_Bank1_SDRAM] = tmpr4;
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  
}
 80006ac:	e02c      	b.n	8000708 <FMC_SDRAMInit+0x14c>
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	1e5a      	subs	r2, r3, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	3b01      	subs	r3, #1
 80006be:	011b      	lsls	r3, r3, #4
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 80006c0:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	3b01      	subs	r3, #1
 80006ca:	021b      	lsls	r3, r3, #8
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 80006cc:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006d2:	691b      	ldr	r3, [r3, #16]
 80006d4:	3b01      	subs	r3, #1
 80006d6:	041b      	lsls	r3, r3, #16
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 80006d8:	4313      	orrs	r3, r2
 80006da:	613b      	str	r3, [r7, #16]
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006e0:	68db      	ldr	r3, [r3, #12]
 80006e2:	3b01      	subs	r3, #1
 80006e4:	031a      	lsls	r2, r3, #12
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ea:	695b      	ldr	r3, [r3, #20]
 80006ec:	3b01      	subs	r3, #1
 80006ee:	051b      	lsls	r3, r3, #20
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 80006f0:	4313      	orrs	r3, r2
 80006f2:	60bb      	str	r3, [r7, #8]
            FMC_Bank5_6->SDTR[FMC_Bank1_SDRAM] = tmpr4;
 80006f4:	4a07      	ldr	r2, [pc, #28]	; (8000714 <FMC_SDRAMInit+0x158>)
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	6093      	str	r3, [r2, #8]
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 80006fa:	4906      	ldr	r1, [pc, #24]	; (8000714 <FMC_SDRAMInit+0x158>)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	3302      	adds	r3, #2
 8000702:	693a      	ldr	r2, [r7, #16]
 8000704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000708:	bf00      	nop
 800070a:	371c      	adds	r7, #28
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	a0000140 	.word	0xa0000140

08000718 <FMC_SDRAMCmdConfig>:
  * @param  FMC_SDRAMCommandStruct: pointer to a FMC_SDRAMCommandTypeDef structure 
  *         which will be configured.
  * @retval None
  */
void FMC_SDRAMCmdConfig(FMC_SDRAMCommandTypeDef* FMC_SDRAMCommandStruct)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  uint32_t tmpr = 0x0;
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681a      	ldr	r2, [r3, #0]
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	685b      	ldr	r3, [r3, #4]
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 800072c:	431a      	orrs	r2, r3
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	689b      	ldr	r3, [r3, #8]
 8000732:	3b01      	subs	r3, #1
 8000734:	015b      	lsls	r3, r3, #5
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
 8000736:	431a      	orrs	r2, r3
                     ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	025b      	lsls	r3, r3, #9
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 800073e:	4313      	orrs	r3, r2
 8000740:	60fb      	str	r3, [r7, #12]
  
  FMC_Bank5_6->SDCMR = tmpr;
 8000742:	4a04      	ldr	r2, [pc, #16]	; (8000754 <FMC_SDRAMCmdConfig+0x3c>)
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	6113      	str	r3, [r2, #16]

}
 8000748:	bf00      	nop
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	a0000140 	.word	0xa0000140

08000758 <FMC_SetRefreshCount>:
  * @brief  defines the SDRAM Memory Refresh rate.
  * @param  FMC_Count: specifies the Refresh timer count.       
  * @retval None
  */
void FMC_SetRefreshCount(uint32_t FMC_Count)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* check the parameters */
  assert_param(IS_FMC_REFRESH_COUNT(FMC_Count));
  
  FMC_Bank5_6->SDRTR |= (FMC_Count<<1);
 8000760:	4906      	ldr	r1, [pc, #24]	; (800077c <FMC_SetRefreshCount+0x24>)
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <FMC_SetRefreshCount+0x24>)
 8000764:	695a      	ldr	r2, [r3, #20]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	4313      	orrs	r3, r2
 800076c:	614b      	str	r3, [r1, #20]
   
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	a0000140 	.word	0xa0000140

08000780 <FMC_GetFlagStatus>:
  *            @arg FMC_FLAG_Refresh: Refresh error Flag.
  *            @arg FMC_FLAG_Busy: Busy status Flag.     
  * @retval The new state of FMC_FLAG (SET or RESET).
  */
FlagStatus FMC_GetFlagStatus(uint32_t FMC_Bank, uint32_t FMC_FLAG)
{
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800078a:	2300      	movs	r3, #0
 800078c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsr = 0x00000000;
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_FLAG(FMC_FLAG));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2b10      	cmp	r3, #16
 8000796:	d103      	bne.n	80007a0 <FMC_GetFlagStatus+0x20>
  {
    tmpsr = FMC_Bank2->SR2;
 8000798:	4b14      	ldr	r3, [pc, #80]	; (80007ec <FMC_GetFlagStatus+0x6c>)
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	e012      	b.n	80007c6 <FMC_GetFlagStatus+0x46>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007a6:	d103      	bne.n	80007b0 <FMC_GetFlagStatus+0x30>
  {
    tmpsr = FMC_Bank3->SR3;
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <FMC_GetFlagStatus+0x70>)
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	e00a      	b.n	80007c6 <FMC_GetFlagStatus+0x46>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007b6:	d103      	bne.n	80007c0 <FMC_GetFlagStatus+0x40>
  {
    tmpsr = FMC_Bank4->SR4;
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <FMC_GetFlagStatus+0x74>)
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	e002      	b.n	80007c6 <FMC_GetFlagStatus+0x46>
  }
  else 
  {
    tmpsr = FMC_Bank5_6->SDSR;
 80007c0:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <FMC_GetFlagStatus+0x78>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	60bb      	str	r3, [r7, #8]
  }
  
  /* Get the flag status */
  if ((tmpsr & FMC_FLAG) != FMC_FLAG )
 80007c6:	68ba      	ldr	r2, [r7, #8]
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	401a      	ands	r2, r3
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d002      	beq.n	80007d8 <FMC_GetFlagStatus+0x58>
  {
    bitstatus = RESET;
 80007d2:	2300      	movs	r3, #0
 80007d4:	73fb      	strb	r3, [r7, #15]
 80007d6:	e001      	b.n	80007dc <FMC_GetFlagStatus+0x5c>
  }
  else
  {
    bitstatus = SET;
 80007d8:	2301      	movs	r3, #1
 80007da:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	a0000060 	.word	0xa0000060
 80007f0:	a0000080 	.word	0xa0000080
 80007f4:	a00000a0 	.word	0xa00000a0
 80007f8:	a0000140 	.word	0xa0000140

080007fc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b087      	sub	sp, #28
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
 8000816:	e076      	b.n	8000906 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000818:	2201      	movs	r2, #1
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	fa02 f303 	lsl.w	r3, r2, r3
 8000820:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	693b      	ldr	r3, [r7, #16]
 8000828:	4013      	ands	r3, r2
 800082a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800082c:	68fa      	ldr	r2, [r7, #12]
 800082e:	693b      	ldr	r3, [r7, #16]
 8000830:	429a      	cmp	r2, r3
 8000832:	d165      	bne.n	8000900 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	2103      	movs	r1, #3
 800083e:	fa01 f303 	lsl.w	r3, r1, r3
 8000842:	43db      	mvns	r3, r3
 8000844:	401a      	ands	r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	791b      	ldrb	r3, [r3, #4]
 8000852:	4619      	mov	r1, r3
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	fa01 f303 	lsl.w	r3, r1, r3
 800085c:	431a      	orrs	r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	791b      	ldrb	r3, [r3, #4]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d003      	beq.n	8000872 <GPIO_Init+0x76>
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	791b      	ldrb	r3, [r3, #4]
 800086e:	2b02      	cmp	r3, #2
 8000870:	d12e      	bne.n	80008d0 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	689a      	ldr	r2, [r3, #8]
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	2103      	movs	r1, #3
 800087c:	fa01 f303 	lsl.w	r3, r1, r3
 8000880:	43db      	mvns	r3, r3
 8000882:	401a      	ands	r2, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	689a      	ldr	r2, [r3, #8]
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	795b      	ldrb	r3, [r3, #5]
 8000890:	4619      	mov	r1, r3
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	fa01 f303 	lsl.w	r3, r1, r3
 800089a:	431a      	orrs	r2, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	685a      	ldr	r2, [r3, #4]
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	4619      	mov	r1, r3
 80008aa:	2301      	movs	r3, #1
 80008ac:	408b      	lsls	r3, r1
 80008ae:	43db      	mvns	r3, r3
 80008b0:	401a      	ands	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	683a      	ldr	r2, [r7, #0]
 80008bc:	7992      	ldrb	r2, [r2, #6]
 80008be:	4611      	mov	r1, r2
 80008c0:	697a      	ldr	r2, [r7, #20]
 80008c2:	b292      	uxth	r2, r2
 80008c4:	fa01 f202 	lsl.w	r2, r1, r2
 80008c8:	b292      	uxth	r2, r2
 80008ca:	431a      	orrs	r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	68da      	ldr	r2, [r3, #12]
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	2103      	movs	r1, #3
 80008dc:	fa01 f303 	lsl.w	r3, r1, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	401a      	ands	r2, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	68da      	ldr	r2, [r3, #12]
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	79db      	ldrb	r3, [r3, #7]
 80008f0:	4619      	mov	r1, r3
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	fa01 f303 	lsl.w	r3, r1, r3
 80008fa:	431a      	orrs	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	3301      	adds	r3, #1
 8000904:	617b      	str	r3, [r7, #20]
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	2b0f      	cmp	r3, #15
 800090a:	d985      	bls.n	8000818 <GPIO_Init+0x1c>
    }
  }
}
 800090c:	bf00      	nop
 800090e:	371c      	adds	r7, #28
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	887a      	ldrh	r2, [r7, #2]
 8000928:	831a      	strh	r2, [r3, #24]
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000936:	b480      	push	{r7}
 8000938:	b083      	sub	sp, #12
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
 800093e:	460b      	mov	r3, r1
 8000940:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	887a      	ldrh	r2, [r7, #2]
 8000946:	835a      	strh	r2, [r3, #26]
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	460b      	mov	r3, r1
 800095e:	807b      	strh	r3, [r7, #2]
 8000960:	4613      	mov	r3, r2
 8000962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000964:	787b      	ldrb	r3, [r7, #1]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d003      	beq.n	8000972 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	887a      	ldrh	r2, [r7, #2]
 800096e:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8000970:	e002      	b.n	8000978 <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	887a      	ldrh	r2, [r7, #2]
 8000976:	835a      	strh	r2, [r3, #26]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	807b      	strh	r3, [r7, #2]
 8000990:	4613      	mov	r3, r2
 8000992:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800099c:	787a      	ldrb	r2, [r7, #1]
 800099e:	887b      	ldrh	r3, [r7, #2]
 80009a0:	f003 0307 	and.w	r3, r3, #7
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80009ac:	887b      	ldrh	r3, [r7, #2]
 80009ae:	08db      	lsrs	r3, r3, #3
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	4618      	mov	r0, r3
 80009b4:	887b      	ldrh	r3, [r7, #2]
 80009b6:	08db      	lsrs	r3, r3, #3
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	461a      	mov	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3208      	adds	r2, #8
 80009c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009c4:	887b      	ldrh	r3, [r7, #2]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	210f      	movs	r1, #15
 80009ce:	fa01 f303 	lsl.w	r3, r1, r3
 80009d2:	43db      	mvns	r3, r3
 80009d4:	ea02 0103 	and.w	r1, r2, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f100 0208 	add.w	r2, r0, #8
 80009de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80009e2:	887b      	ldrh	r3, [r7, #2]
 80009e4:	08db      	lsrs	r3, r3, #3
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	461a      	mov	r2, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3208      	adds	r2, #8
 80009ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80009f8:	887b      	ldrh	r3, [r7, #2]
 80009fa:	08db      	lsrs	r3, r3, #3
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	461a      	mov	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3208      	adds	r2, #8
 8000a04:	68b9      	ldr	r1, [r7, #8]
 8000a06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000a0a:	bf00      	nop
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
	...

08000a18 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a17      	ldr	r2, [pc, #92]	; (8000a80 <I2C_DeInit+0x68>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d10a      	bne.n	8000a3e <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8000a28:	2101      	movs	r1, #1
 8000a2a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000a2e:	f000 fd9b 	bl	8001568 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8000a32:	2100      	movs	r1, #0
 8000a34:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000a38:	f000 fd96 	bl	8001568 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 8000a3c:	e01c      	b.n	8000a78 <I2C_DeInit+0x60>
  else if (I2Cx == I2C2)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a10      	ldr	r2, [pc, #64]	; (8000a84 <I2C_DeInit+0x6c>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d10a      	bne.n	8000a5c <I2C_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8000a46:	2101      	movs	r1, #1
 8000a48:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000a4c:	f000 fd8c 	bl	8001568 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8000a50:	2100      	movs	r1, #0
 8000a52:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000a56:	f000 fd87 	bl	8001568 <RCC_APB1PeriphResetCmd>
}
 8000a5a:	e00d      	b.n	8000a78 <I2C_DeInit+0x60>
    if (I2Cx == I2C3)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <I2C_DeInit+0x70>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d109      	bne.n	8000a78 <I2C_DeInit+0x60>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8000a64:	2101      	movs	r1, #1
 8000a66:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000a6a:	f000 fd7d 	bl	8001568 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8000a6e:	2100      	movs	r1, #0
 8000a70:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000a74:	f000 fd78 	bl	8001568 <RCC_APB1PeriphResetCmd>
}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40005400 	.word	0x40005400
 8000a84:	40005800 	.word	0x40005800
 8000a88:	40005c00 	.word	0x40005c00

08000a8c <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	; 0x28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8000aa2:	4b57      	ldr	r3, [pc, #348]	; (8000c00 <I2C_Init+0x174>)
 8000aa4:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	889b      	ldrh	r3, [r3, #4]
 8000aaa:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8000aac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000aae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ab2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8000ab4:	f107 030c 	add.w	r3, r7, #12
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 fbef 	bl	800129c <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	4a4f      	ldr	r2, [pc, #316]	; (8000c04 <I2C_Init+0x178>)
 8000ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aca:	0c9b      	lsrs	r3, r3, #18
 8000acc:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8000ace:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000ad0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000ada:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	881b      	ldrh	r3, [r3, #0]
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	f023 0301 	bic.w	r3, r3, #1
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a44      	ldr	r2, [pc, #272]	; (8000c08 <I2C_Init+0x17c>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d815      	bhi.n	8000b26 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	69fa      	ldr	r2, [r7, #28]
 8000b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b06:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8000b08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b0a:	2b03      	cmp	r3, #3
 8000b0c:	d801      	bhi.n	8000b12 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8000b0e:	2304      	movs	r3, #4
 8000b10:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8000b12:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000b14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b16:	4313      	orrs	r3, r2
 8000b18:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8000b1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	841a      	strh	r2, [r3, #32]
 8000b24:	e040      	b.n	8000ba8 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	88db      	ldrh	r3, [r3, #6]
 8000b2a:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d109      	bne.n	8000b46 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	4613      	mov	r3, r2
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	4413      	add	r3, r2
 8000b3c:	69fa      	ldr	r2, [r7, #28]
 8000b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b42:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000b44:	e00e      	b.n	8000b64 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	4413      	add	r3, r2
 8000b50:	009a      	lsls	r2, r3, #2
 8000b52:	4413      	add	r3, r2
 8000b54:	69fa      	ldr	r2, [r7, #28]
 8000b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5a:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8000b5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b62:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8000b64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d103      	bne.n	8000b76 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8000b6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8000b76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000b78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000b82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000b86:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8000b88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000b8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000b8e:	fb02 f303 	mul.w	r3, r2, r3
 8000b92:	4a1e      	ldr	r2, [pc, #120]	; (8000c0c <I2C_Init+0x180>)
 8000b94:	fb82 1203 	smull	r1, r2, r2, r3
 8000b98:	1192      	asrs	r2, r2, #6
 8000b9a:	17db      	asrs	r3, r3, #31
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000bac:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000bc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000bc6:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8000bca:	f023 0302 	bic.w	r3, r3, #2
 8000bce:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	889a      	ldrh	r2, [r3, #4]
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	895b      	ldrh	r3, [r3, #10]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	b29a      	uxth	r2, r3
 8000bdc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000bde:	4313      	orrs	r3, r2
 8000be0:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000be6:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	899a      	ldrh	r2, [r3, #12]
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	891b      	ldrh	r3, [r3, #8]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	811a      	strh	r2, [r3, #8]
}
 8000bf8:	bf00      	nop
 8000bfa:	3728      	adds	r7, #40	; 0x28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	007a1200 	.word	0x007a1200
 8000c04:	431bde83 	.word	0x431bde83
 8000c08:	000186a0 	.word	0x000186a0
 8000c0c:	10624dd3 	.word	0x10624dd3

08000c10 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c1c:	78fb      	ldrb	r3, [r7, #3]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d008      	beq.n	8000c34 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 8000c32:	e007      	b.n	8000c44 <I2C_Cmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	f023 0301 	bic.w	r3, r3, #1
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	801a      	strh	r2, [r3, #0]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c5c:	78fb      	ldrb	r3, [r7, #3]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d008      	beq.n	8000c74 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 8000c72:	e007      	b.n	8000c84 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	881b      	ldrh	r3, [r3, #0]
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	801a      	strh	r2, [r3, #0]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	460b      	mov	r3, r1
 8000c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c9c:	78fb      	ldrb	r3, [r7, #3]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d008      	beq.n	8000cb4 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 8000cb2:	e007      	b.n	8000cc4 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	801a      	strh	r2, [r3, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	460b      	mov	r3, r1
 8000cda:	70fb      	strb	r3, [r7, #3]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8000ce0:	78bb      	ldrb	r3, [r7, #2]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d004      	beq.n	8000cf0 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8000ce6:	78fb      	ldrb	r3, [r7, #3]
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	70fb      	strb	r3, [r7, #3]
 8000cee:	e003      	b.n	8000cf8 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8000cf0:	78fb      	ldrb	r3, [r7, #3]
 8000cf2:	f023 0301 	bic.w	r3, r3, #1
 8000cf6:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8000cf8:	78fb      	ldrb	r3, [r7, #3]
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	821a      	strh	r2, [r3, #16]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	460b      	mov	r3, r1
 8000d16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d18:	78fb      	ldrb	r3, [r7, #3]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d008      	beq.n	8000d30 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 8000d2e:	e007      	b.n	8000d40 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	881b      	ldrh	r3, [r3, #0]
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	801a      	strh	r2, [r3, #0]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <I2C_SoftwareResetCmd>:
  * @param  NewState: new state of the I2C software reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	460b      	mov	r3, r1
 8000d56:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d58:	78fb      	ldrb	r3, [r7, #3]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d00a      	beq.n	8000d74 <I2C_SoftwareResetCmd+0x28>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	881b      	ldrh	r3, [r3, #0]
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000d68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
  }
}
 8000d72:	e007      	b.n	8000d84 <I2C_SoftwareResetCmd+0x38>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	801a      	strh	r2, [r3, #0]
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <I2C_NACKPositionConfig>:
  *          is intended to used in SMBUS mode. 
  *            
  * @retval None
  */
void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 8000d9c:	887b      	ldrh	r3, [r7, #2]
 8000d9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000da2:	d108      	bne.n	8000db6 <I2C_NACKPositionConfig+0x26>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
  }
}
 8000db4:	e007      	b.n	8000dc6 <I2C_NACKPositionConfig+0x36>
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	801a      	strh	r2, [r3, #0]
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	b083      	sub	sp, #12
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	460b      	mov	r3, r1
 8000ddc:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8000dde:	78fb      	ldrb	r3, [r7, #3]
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	821a      	strh	r2, [r3, #16]
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	8a1b      	ldrh	r3, [r3, #16]
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	b2db      	uxtb	r3, r3
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b087      	sub	sp, #28
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
 8000e16:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	2300      	movs	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	0f1b      	lsrs	r3, r3, #28
 8000e2c:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000e34:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	3314      	adds	r3, #20
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	e005      	b.n	8000e50 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	0c1b      	lsrs	r3, r3, #16
 8000e48:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	3318      	adds	r3, #24
 8000e4e:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	4013      	ands	r3, r2
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d002      	beq.n	8000e62 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	75fb      	strb	r3, [r7, #23]
 8000e60:	e001      	b.n	8000e66 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8000e62:	2300      	movs	r3, #0
 8000e64:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8000e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	371c      	adds	r7, #28
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <LTDC_Init>:
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_Init(LTDC_InitTypeDef* LTDC_InitStruct)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b089      	sub	sp, #36	; 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t horizontalsync = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  uint32_t accumulatedHBP = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61bb      	str	r3, [r7, #24]
  uint32_t accumulatedactiveW = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  uint32_t totalwidth = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	613b      	str	r3, [r7, #16]
  uint32_t backgreen = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60fb      	str	r3, [r7, #12]
  uint32_t backred = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LTDC_BackBlueValue(LTDC_InitStruct->LTDC_BackgroundBlueValue));
  assert_param(IS_LTDC_BackGreenValue(LTDC_InitStruct->LTDC_BackgroundGreenValue));
  assert_param(IS_LTDC_BackRedValue(LTDC_InitStruct->LTDC_BackgroundRedValue));

  /* Sets Synchronization size */
  LTDC->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8000e94:	4940      	ldr	r1, [pc, #256]	; (8000f98 <LTDC_Init+0x124>)
 8000e96:	4b40      	ldr	r3, [pc, #256]	; (8000f98 <LTDC_Init+0x124>)
 8000e98:	689a      	ldr	r2, [r3, #8]
 8000e9a:	4b40      	ldr	r3, [pc, #256]	; (8000f9c <LTDC_Init+0x128>)
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	608b      	str	r3, [r1, #8]
  horizontalsync = (LTDC_InitStruct->LTDC_HorizontalSync << 16);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	691b      	ldr	r3, [r3, #16]
 8000ea4:	041b      	lsls	r3, r3, #16
 8000ea6:	61fb      	str	r3, [r7, #28]
  LTDC->SSCR |= (horizontalsync | LTDC_InitStruct->LTDC_VerticalSync);
 8000ea8:	483b      	ldr	r0, [pc, #236]	; (8000f98 <LTDC_Init+0x124>)
 8000eaa:	4b3b      	ldr	r3, [pc, #236]	; (8000f98 <LTDC_Init+0x124>)
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6959      	ldr	r1, [r3, #20]
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	430b      	orrs	r3, r1
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	6083      	str	r3, [r0, #8]

  /* Sets Accumulated Back porch */
  LTDC->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8000eba:	4937      	ldr	r1, [pc, #220]	; (8000f98 <LTDC_Init+0x124>)
 8000ebc:	4b36      	ldr	r3, [pc, #216]	; (8000f98 <LTDC_Init+0x124>)
 8000ebe:	68da      	ldr	r2, [r3, #12]
 8000ec0:	4b36      	ldr	r3, [pc, #216]	; (8000f9c <LTDC_Init+0x128>)
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	60cb      	str	r3, [r1, #12]
  accumulatedHBP = (LTDC_InitStruct->LTDC_AccumulatedHBP << 16);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	041b      	lsls	r3, r3, #16
 8000ecc:	61bb      	str	r3, [r7, #24]
  LTDC->BPCR |= (accumulatedHBP | LTDC_InitStruct->LTDC_AccumulatedVBP);
 8000ece:	4832      	ldr	r0, [pc, #200]	; (8000f98 <LTDC_Init+0x124>)
 8000ed0:	4b31      	ldr	r3, [pc, #196]	; (8000f98 <LTDC_Init+0x124>)
 8000ed2:	68da      	ldr	r2, [r3, #12]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	69d9      	ldr	r1, [r3, #28]
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	430b      	orrs	r3, r1
 8000edc:	4313      	orrs	r3, r2
 8000ede:	60c3      	str	r3, [r0, #12]

  /* Sets Accumulated Active Width */
  LTDC->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8000ee0:	492d      	ldr	r1, [pc, #180]	; (8000f98 <LTDC_Init+0x124>)
 8000ee2:	4b2d      	ldr	r3, [pc, #180]	; (8000f98 <LTDC_Init+0x124>)
 8000ee4:	691a      	ldr	r2, [r3, #16]
 8000ee6:	4b2d      	ldr	r3, [pc, #180]	; (8000f9c <LTDC_Init+0x128>)
 8000ee8:	4013      	ands	r3, r2
 8000eea:	610b      	str	r3, [r1, #16]
  accumulatedactiveW = (LTDC_InitStruct->LTDC_AccumulatedActiveW << 16);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6a1b      	ldr	r3, [r3, #32]
 8000ef0:	041b      	lsls	r3, r3, #16
 8000ef2:	617b      	str	r3, [r7, #20]
  LTDC->AWCR |= (accumulatedactiveW | LTDC_InitStruct->LTDC_AccumulatedActiveH);
 8000ef4:	4828      	ldr	r0, [pc, #160]	; (8000f98 <LTDC_Init+0x124>)
 8000ef6:	4b28      	ldr	r3, [pc, #160]	; (8000f98 <LTDC_Init+0x124>)
 8000ef8:	691a      	ldr	r2, [r3, #16]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	430b      	orrs	r3, r1
 8000f02:	4313      	orrs	r3, r2
 8000f04:	6103      	str	r3, [r0, #16]

  /* Sets Total Width */
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8000f06:	4924      	ldr	r1, [pc, #144]	; (8000f98 <LTDC_Init+0x124>)
 8000f08:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <LTDC_Init+0x124>)
 8000f0a:	695a      	ldr	r2, [r3, #20]
 8000f0c:	4b23      	ldr	r3, [pc, #140]	; (8000f9c <LTDC_Init+0x128>)
 8000f0e:	4013      	ands	r3, r2
 8000f10:	614b      	str	r3, [r1, #20]
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f16:	041b      	lsls	r3, r3, #16
 8000f18:	613b      	str	r3, [r7, #16]
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);
 8000f1a:	481f      	ldr	r0, [pc, #124]	; (8000f98 <LTDC_Init+0x124>)
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <LTDC_Init+0x124>)
 8000f1e:	695a      	ldr	r2, [r3, #20]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	430b      	orrs	r3, r1
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	6143      	str	r3, [r0, #20]

  LTDC->GCR &= (uint32_t)GCR_MASK;
 8000f2c:	491a      	ldr	r1, [pc, #104]	; (8000f98 <LTDC_Init+0x124>)
 8000f2e:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <LTDC_Init+0x124>)
 8000f30:	699a      	ldr	r2, [r3, #24]
 8000f32:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <LTDC_Init+0x12c>)
 8000f34:	4013      	ands	r3, r2
 8000f36:	618b      	str	r3, [r1, #24]
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 8000f38:	4817      	ldr	r0, [pc, #92]	; (8000f98 <LTDC_Init+0x124>)
 8000f3a:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <LTDC_Init+0x124>)
 8000f3c:	699a      	ldr	r2, [r3, #24]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6819      	ldr	r1, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	4319      	orrs	r1, r3
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 8000f4c:	4319      	orrs	r1, r3
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	430b      	orrs	r3, r1
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 8000f54:	4313      	orrs	r3, r2
 8000f56:	6183      	str	r3, [r0, #24]

  /* sets the background color value */
  backgreen = (LTDC_InitStruct->LTDC_BackgroundGreenValue << 8);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f5c:	021b      	lsls	r3, r3, #8
 8000f5e:	60fb      	str	r3, [r7, #12]
  backred = (LTDC_InitStruct->LTDC_BackgroundRedValue << 16);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	041b      	lsls	r3, r3, #16
 8000f66:	60bb      	str	r3, [r7, #8]

  LTDC->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8000f68:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <LTDC_Init+0x124>)
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <LTDC_Init+0x124>)
 8000f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f6e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000f72:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC->BCCR |= (backred | backgreen | LTDC_InitStruct->LTDC_BackgroundBlueValue);
 8000f74:	4808      	ldr	r0, [pc, #32]	; (8000f98 <LTDC_Init+0x124>)
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <LTDC_Init+0x124>)
 8000f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f7a:	68b9      	ldr	r1, [r7, #8]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4319      	orrs	r1, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f84:	430b      	orrs	r3, r1
 8000f86:	4313      	orrs	r3, r2
 8000f88:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8000f8a:	bf00      	nop
 8000f8c:	3724      	adds	r7, #36	; 0x24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40016800 	.word	0x40016800
 8000f9c:	f000f800 	.word	0xf000f800
 8000fa0:	0ffe888f 	.word	0x0ffe888f

08000fa4 <LTDC_Cmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_Cmd(FunctionalState NewState)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d006      	beq.n	8000fc2 <LTDC_Cmd+0x1e>
  {
    /* Enable LTDC by setting LTDCEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_LTDCEN;
 8000fb4:	4a09      	ldr	r2, [pc, #36]	; (8000fdc <LTDC_Cmd+0x38>)
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <LTDC_Cmd+0x38>)
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	6193      	str	r3, [r2, #24]
  else
  {
    /* Disable LTDC by clearing LTDCEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_LTDCEN;
  }
}
 8000fc0:	e005      	b.n	8000fce <LTDC_Cmd+0x2a>
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_LTDCEN;
 8000fc2:	4a06      	ldr	r2, [pc, #24]	; (8000fdc <LTDC_Cmd+0x38>)
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <LTDC_Cmd+0x38>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	f023 0301 	bic.w	r3, r3, #1
 8000fcc:	6193      	str	r3, [r2, #24]
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40016800 	.word	0x40016800

08000fe0 <LTDC_DitherCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_DitherCmd(FunctionalState NewState)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d006      	beq.n	8000ffe <LTDC_DitherCmd+0x1e>
  {
    /* Enable Dither by setting DTEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_DTEN;
 8000ff0:	4a09      	ldr	r2, [pc, #36]	; (8001018 <LTDC_DitherCmd+0x38>)
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <LTDC_DitherCmd+0x38>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ffa:	6193      	str	r3, [r2, #24]
  else
  {
    /* Disable Dither by clearing DTEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_DTEN;
  }
}
 8000ffc:	e005      	b.n	800100a <LTDC_DitherCmd+0x2a>
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_DTEN;
 8000ffe:	4a06      	ldr	r2, [pc, #24]	; (8001018 <LTDC_DitherCmd+0x38>)
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <LTDC_DitherCmd+0x38>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001008:	6193      	str	r3, [r2, #24]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40016800 	.word	0x40016800

0800101c <LTDC_ReloadConfig>:
  *     @arg LTDC_VBReload: Immediate reload.  
  * @retval None
  */

void LTDC_ReloadConfig(uint32_t LTDC_Reload)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(LTDC_Reload));

  /* Sets the Reload type */
  LTDC->SRCR = (uint32_t)LTDC_Reload;
 8001024:	4a04      	ldr	r2, [pc, #16]	; (8001038 <LTDC_ReloadConfig+0x1c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6253      	str	r3, [r2, #36]	; 0x24
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40016800 	.word	0x40016800

0800103c <LTDC_LayerInit>:
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_LayerInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_Layer_InitTypeDef* LTDC_Layer_InitStruct)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]

  uint32_t whsppos = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
  uint32_t wvsppos = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	61bb      	str	r3, [r7, #24]
  uint32_t dcgreen = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  uint32_t dcred = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  uint32_t dcalpha = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
  uint32_t cfbp = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LTDC_CFBP(LTDC_Layer_InitStruct->LTDC_CFBPitch));
  assert_param(IS_LTDC_CFBLL(LTDC_Layer_InitStruct->LTDC_CFBLineLength));
  assert_param(IS_LTDC_CFBLNBR(LTDC_Layer_InitStruct->LTDC_CFBLineNumber));

  /* Configures the horizontal start and stop position */
  whsppos = LTDC_Layer_InitStruct->LTDC_HorizontalStop << 16;
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	041b      	lsls	r3, r3, #16
 8001064:	61fb      	str	r3, [r7, #28]
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	431a      	orrs	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	605a      	str	r2, [r3, #4]

  /* Configures the vertical start and stop position */
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	041b      	lsls	r3, r3, #16
 8001084:	61bb      	str	r3, [r7, #24]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	609a      	str	r2, [r3, #8]
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	431a      	orrs	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	609a      	str	r2, [r3, #8]

  /* Specifies the pixel format */
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	f023 0207 	bic.w	r2, r3, #7
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	611a      	str	r2, [r3, #16]
  LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	691a      	ldr	r2, [r3, #16]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	611a      	str	r2, [r3, #16]

  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	617b      	str	r3, [r7, #20]
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	6a1b      	ldr	r3, [r3, #32]
 80010be:	041b      	lsls	r3, r3, #16
 80010c0:	613b      	str	r3, [r7, #16]
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c6:	061b      	lsls	r3, r3, #24
 80010c8:	60fb      	str	r3, [r7, #12]
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	699a      	ldr	r2, [r3, #24]
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	431a      	orrs	r2, r3
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	431a      	orrs	r2, r3
                        dcred | dcalpha);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	431a      	orrs	r2, r3
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	619a      	str	r2, [r3, #24]

  /* Specifies the constant alpha value */      
  LTDC_Layerx->CACR &= ~(LTDC_LxCACR_CONSTA);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	615a      	str	r2, [r3, #20]
  LTDC_Layerx->CACR = (LTDC_Layer_InitStruct->LTDC_ConstantAlpha);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	695a      	ldr	r2, [r3, #20]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	615a      	str	r2, [r3, #20]

  /* Specifies the blending factors */
  LTDC_Layerx->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69db      	ldr	r3, [r3, #28]
 8001100:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001104:	f023 0307 	bic.w	r3, r3, #7
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	61d3      	str	r3, [r2, #28]
  LTDC_Layerx->BFCR = (LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 | LTDC_Layer_InitStruct->LTDC_BlendingFactor_2);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001114:	431a      	orrs	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	61da      	str	r2, [r3, #28]

  /* Configures the color frame buffer start address */
  LTDC_Layerx->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_Layerx->CFBAR = (LTDC_Layer_InitStruct->LTDC_CFBStartAdress);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Configures the color frame buffer pitch in byte */
  cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001130:	041b      	lsls	r3, r3, #16
 8001132:	60bb      	str	r3, [r7, #8]
  LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001138:	f003 22e0 	and.w	r2, r3, #3758153728	; 0xe000e000
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC_Layerx->CFBLR  = (LTDC_Layer_InitStruct->LTDC_CFBLineLength | cfbp);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	431a      	orrs	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_Layerx->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001150:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001154:	f023 0307 	bic.w	r3, r3, #7
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_Layerx->CFBLNR  = (LTDC_Layer_InitStruct->LTDC_CFBLineNumber);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	631a      	str	r2, [r3, #48]	; 0x30

}
 8001164:	bf00      	nop
 8001166:	3724      	adds	r7, #36	; 0x24
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <LTDC_LayerCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_LayerCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800117c:	78fb      	ldrb	r3, [r7, #3]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d006      	beq.n	8001190 <LTDC_LayerCmd+0x20>
  {
    /* Enable LTDC_Layer by setting LEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_LEN;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f043 0201 	orr.w	r2, r3, #1
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable LTDC_Layer by clearing LEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_LEN;
  }
}
 800118e:	e005      	b.n	800119c <LTDC_LayerCmd+0x2c>
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_LEN;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f023 0201 	bic.w	r2, r3, #1
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	601a      	str	r2, [r3, #0]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <RCC_HSEConfig+0x24>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 80011b8:	4a04      	ldr	r2, [pc, #16]	; (80011cc <RCC_HSEConfig+0x24>)
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	7013      	strb	r3, [r2, #0]
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40023802 	.word	0x40023802

080011d0 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80011da:	4a04      	ldr	r2, [pc, #16]	; (80011ec <RCC_PLLCmd+0x1c>)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	6013      	str	r3, [r2, #0]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	42470060 	.word	0x42470060

080011f0 <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));

  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 80011fc:	4908      	ldr	r1, [pc, #32]	; (8001220 <RCC_PLLSAIConfig+0x30>)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	019a      	lsls	r2, r3, #6
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	061b      	lsls	r3, r3, #24
 8001206:	431a      	orrs	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	071b      	lsls	r3, r3, #28
 800120c:	4313      	orrs	r3, r2
 800120e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001212:	bf00      	nop
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800

08001224 <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <RCC_PLLSAICmd+0x1c>)
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	6013      	str	r3, [r2, #0]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	42470070 	.word	0x42470070

08001244 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <RCC_SYSCLKConfig+0x34>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f023 0303 	bic.w	r3, r3, #3
 800125c:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4313      	orrs	r3, r2
 8001264:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001266:	4a04      	ldr	r2, [pc, #16]	; (8001278 <RCC_SYSCLKConfig+0x34>)
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6093      	str	r3, [r2, #8]
}
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	40023800 	.word	0x40023800

0800127c <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <RCC_GetSYSCLKSource+0x1c>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	b2db      	uxtb	r3, r3
 8001286:	f003 030c 	and.w	r3, r3, #12
 800128a:	b2db      	uxtb	r3, r3
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800

0800129c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
 80012b0:	2302      	movs	r3, #2
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	2302      	movs	r3, #2
 80012ba:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80012bc:	4b47      	ldr	r3, [pc, #284]	; (80013dc <RCC_GetClocksFreq+0x140>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 030c 	and.w	r3, r3, #12
 80012c4:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	2b04      	cmp	r3, #4
 80012ca:	d007      	beq.n	80012dc <RCC_GetClocksFreq+0x40>
 80012cc:	2b08      	cmp	r3, #8
 80012ce:	d009      	beq.n	80012e4 <RCC_GetClocksFreq+0x48>
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d13d      	bne.n	8001350 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a42      	ldr	r2, [pc, #264]	; (80013e0 <RCC_GetClocksFreq+0x144>)
 80012d8:	601a      	str	r2, [r3, #0]
      break;
 80012da:	e03d      	b.n	8001358 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a41      	ldr	r2, [pc, #260]	; (80013e4 <RCC_GetClocksFreq+0x148>)
 80012e0:	601a      	str	r2, [r3, #0]
      break;
 80012e2:	e039      	b.n	8001358 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80012e4:	4b3d      	ldr	r3, [pc, #244]	; (80013dc <RCC_GetClocksFreq+0x140>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	0d9b      	lsrs	r3, r3, #22
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012f0:	4b3a      	ldr	r3, [pc, #232]	; (80013dc <RCC_GetClocksFreq+0x140>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012f8:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00c      	beq.n	800131a <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001300:	4a38      	ldr	r2, [pc, #224]	; (80013e4 <RCC_GetClocksFreq+0x148>)
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	fbb2 f3f3 	udiv	r3, r2, r3
 8001308:	4a34      	ldr	r2, [pc, #208]	; (80013dc <RCC_GetClocksFreq+0x140>)
 800130a:	6852      	ldr	r2, [r2, #4]
 800130c:	0992      	lsrs	r2, r2, #6
 800130e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001312:	fb02 f303 	mul.w	r3, r2, r3
 8001316:	61fb      	str	r3, [r7, #28]
 8001318:	e00b      	b.n	8001332 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800131a:	4a31      	ldr	r2, [pc, #196]	; (80013e0 <RCC_GetClocksFreq+0x144>)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001322:	4a2e      	ldr	r2, [pc, #184]	; (80013dc <RCC_GetClocksFreq+0x140>)
 8001324:	6852      	ldr	r2, [r2, #4]
 8001326:	0992      	lsrs	r2, r2, #6
 8001328:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800132c:	fb02 f303 	mul.w	r3, r2, r3
 8001330:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001332:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <RCC_GetClocksFreq+0x140>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	0c1b      	lsrs	r3, r3, #16
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	3301      	adds	r3, #1
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	fbb2 f2f3 	udiv	r2, r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	601a      	str	r2, [r3, #0]
      break;
 800134e:	e003      	b.n	8001358 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a23      	ldr	r2, [pc, #140]	; (80013e0 <RCC_GetClocksFreq+0x144>)
 8001354:	601a      	str	r2, [r3, #0]
      break;
 8001356:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001358:	4b20      	ldr	r3, [pc, #128]	; (80013dc <RCC_GetClocksFreq+0x140>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001360:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	091b      	lsrs	r3, r3, #4
 8001366:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001368:	4a1f      	ldr	r2, [pc, #124]	; (80013e8 <RCC_GetClocksFreq+0x14c>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	4413      	add	r3, r2
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	40da      	lsrs	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001380:	4b16      	ldr	r3, [pc, #88]	; (80013dc <RCC_GetClocksFreq+0x140>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001388:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	0a9b      	lsrs	r3, r3, #10
 800138e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001390:	4a15      	ldr	r2, [pc, #84]	; (80013e8 <RCC_GetClocksFreq+0x14c>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	4413      	add	r3, r2
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	b2db      	uxtb	r3, r3
 800139a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685a      	ldr	r2, [r3, #4]
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	40da      	lsrs	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <RCC_GetClocksFreq+0x140>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80013b0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	0b5b      	lsrs	r3, r3, #13
 80013b6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80013b8:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <RCC_GetClocksFreq+0x14c>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	4413      	add	r3, r2
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	40da      	lsrs	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	60da      	str	r2, [r3, #12]
}
 80013d0:	bf00      	nop
 80013d2:	3724      	adds	r7, #36	; 0x24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	40023800 	.word	0x40023800
 80013e0:	00f42400 	.word	0x00f42400
 80013e4:	007a1200 	.word	0x007a1200
 80013e8:	20000000 	.word	0x20000000

080013ec <RCC_LTDCCLKDivConfig>:
  *          LTDC clock frequency = f(PLLSAI_R) / RCC_PLLSAIDivR  
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
 80013f8:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <RCC_LTDCCLKDivConfig+0x38>)
 80013fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013fe:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001406:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
 8001408:	68fa      	ldr	r2, [r7, #12]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4313      	orrs	r3, r2
 800140e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8001410:	4a04      	ldr	r2, [pc, #16]	; (8001424 <RCC_LTDCCLKDivConfig+0x38>)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8001418:	bf00      	nop
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	40023800 	.word	0x40023800

08001428 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001434:	78fb      	ldrb	r3, [r7, #3]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d006      	beq.n	8001448 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800143a:	490a      	ldr	r1, [pc, #40]	; (8001464 <RCC_AHB1PeriphClockCmd+0x3c>)
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <RCC_AHB1PeriphClockCmd+0x3c>)
 800143e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4313      	orrs	r3, r2
 8001444:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8001446:	e006      	b.n	8001456 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001448:	4906      	ldr	r1, [pc, #24]	; (8001464 <RCC_AHB1PeriphClockCmd+0x3c>)
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <RCC_AHB1PeriphClockCmd+0x3c>)
 800144c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	43db      	mvns	r3, r3
 8001452:	4013      	ands	r3, r2
 8001454:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800

08001468 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001474:	78fb      	ldrb	r3, [r7, #3]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d006      	beq.n	8001488 <RCC_AHB3PeriphClockCmd+0x20>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 800147a:	490a      	ldr	r1, [pc, #40]	; (80014a4 <RCC_AHB3PeriphClockCmd+0x3c>)
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <RCC_AHB3PeriphClockCmd+0x3c>)
 800147e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4313      	orrs	r3, r2
 8001484:	638b      	str	r3, [r1, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
 8001486:	e006      	b.n	8001496 <RCC_AHB3PeriphClockCmd+0x2e>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8001488:	4906      	ldr	r1, [pc, #24]	; (80014a4 <RCC_AHB3PeriphClockCmd+0x3c>)
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <RCC_AHB3PeriphClockCmd+0x3c>)
 800148c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	43db      	mvns	r3, r3
 8001492:	4013      	ands	r3, r2
 8001494:	638b      	str	r3, [r1, #56]	; 0x38
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800

080014a8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d006      	beq.n	80014c8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80014ba:	490a      	ldr	r1, [pc, #40]	; (80014e4 <RCC_APB1PeriphClockCmd+0x3c>)
 80014bc:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <RCC_APB1PeriphClockCmd+0x3c>)
 80014be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80014c6:	e006      	b.n	80014d6 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80014c8:	4906      	ldr	r1, [pc, #24]	; (80014e4 <RCC_APB1PeriphClockCmd+0x3c>)
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <RCC_APB1PeriphClockCmd+0x3c>)
 80014cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	4013      	ands	r3, r2
 80014d4:	640b      	str	r3, [r1, #64]	; 0x40
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800

080014e8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80014f4:	78fb      	ldrb	r3, [r7, #3]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d006      	beq.n	8001508 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80014fa:	490a      	ldr	r1, [pc, #40]	; (8001524 <RCC_APB2PeriphClockCmd+0x3c>)
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <RCC_APB2PeriphClockCmd+0x3c>)
 80014fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4313      	orrs	r3, r2
 8001504:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001506:	e006      	b.n	8001516 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001508:	4906      	ldr	r1, [pc, #24]	; (8001524 <RCC_APB2PeriphClockCmd+0x3c>)
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <RCC_APB2PeriphClockCmd+0x3c>)
 800150c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	43db      	mvns	r3, r3
 8001512:	4013      	ands	r3, r2
 8001514:	644b      	str	r3, [r1, #68]	; 0x44
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800

08001528 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001534:	78fb      	ldrb	r3, [r7, #3]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d006      	beq.n	8001548 <RCC_AHB1PeriphResetCmd+0x20>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 800153a:	490a      	ldr	r1, [pc, #40]	; (8001564 <RCC_AHB1PeriphResetCmd+0x3c>)
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <RCC_AHB1PeriphResetCmd+0x3c>)
 800153e:	691a      	ldr	r2, [r3, #16]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4313      	orrs	r3, r2
 8001544:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
 8001546:	e006      	b.n	8001556 <RCC_AHB1PeriphResetCmd+0x2e>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8001548:	4906      	ldr	r1, [pc, #24]	; (8001564 <RCC_AHB1PeriphResetCmd+0x3c>)
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <RCC_AHB1PeriphResetCmd+0x3c>)
 800154c:	691a      	ldr	r2, [r3, #16]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	43db      	mvns	r3, r3
 8001552:	4013      	ands	r3, r2
 8001554:	610b      	str	r3, [r1, #16]
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800

08001568 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d006      	beq.n	8001588 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800157a:	490a      	ldr	r1, [pc, #40]	; (80015a4 <RCC_APB1PeriphResetCmd+0x3c>)
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <RCC_APB1PeriphResetCmd+0x3c>)
 800157e:	6a1a      	ldr	r2, [r3, #32]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4313      	orrs	r3, r2
 8001584:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8001586:	e006      	b.n	8001596 <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001588:	4906      	ldr	r1, [pc, #24]	; (80015a4 <RCC_APB1PeriphResetCmd+0x3c>)
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <RCC_APB1PeriphResetCmd+0x3c>)
 800158c:	6a1a      	ldr	r2, [r3, #32]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	43db      	mvns	r3, r3
 8001592:	4013      	ands	r3, r2
 8001594:	620b      	str	r3, [r1, #32]
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800

080015a8 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80015b4:	78fb      	ldrb	r3, [r7, #3]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d006      	beq.n	80015c8 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80015ba:	490a      	ldr	r1, [pc, #40]	; (80015e4 <RCC_APB2PeriphResetCmd+0x3c>)
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <RCC_APB2PeriphResetCmd+0x3c>)
 80015be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 80015c6:	e006      	b.n	80015d6 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80015c8:	4906      	ldr	r1, [pc, #24]	; (80015e4 <RCC_APB2PeriphResetCmd+0x3c>)
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <RCC_APB2PeriphResetCmd+0x3c>)
 80015cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	4013      	ands	r3, r2
 80015d4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40023800 	.word	0x40023800

080015e8 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b087      	sub	sp, #28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 80015fa:	2300      	movs	r3, #0
 80015fc:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	095b      	lsrs	r3, r3, #5
 8001602:	b2db      	uxtb	r3, r3
 8001604:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d103      	bne.n	8001614 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <RCC_GetFlagStatus+0x70>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	e009      	b.n	8001628 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2b02      	cmp	r3, #2
 8001618:	d103      	bne.n	8001622 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <RCC_GetFlagStatus+0x70>)
 800161c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	e002      	b.n	8001628 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8001622:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <RCC_GetFlagStatus+0x70>)
 8001624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001626:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	f003 031f 	and.w	r3, r3, #31
 800162e:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	fa22 f303 	lsr.w	r3, r2, r3
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	2b00      	cmp	r3, #0
 800163e:	d002      	beq.n	8001646 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8001640:	2301      	movs	r3, #1
 8001642:	74fb      	strb	r3, [r7, #19]
 8001644:	e001      	b.n	800164a <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8001646:	2300      	movs	r3, #0
 8001648:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 800164a:	7cfb      	ldrb	r3, [r7, #19]
}
 800164c:	4618      	mov	r0, r3
 800164e:	371c      	adds	r7, #28
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	40023800 	.word	0x40023800

0800165c <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a2e      	ldr	r2, [pc, #184]	; (8001720 <SPI_I2S_DeInit+0xc4>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d10a      	bne.n	8001682 <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 800166c:	2101      	movs	r1, #1
 800166e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001672:	f7ff ff99 	bl	80015a8 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001676:	2100      	movs	r1, #0
 8001678:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800167c:	f7ff ff94 	bl	80015a8 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001680:	e049      	b.n	8001716 <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI2)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a27      	ldr	r2, [pc, #156]	; (8001724 <SPI_I2S_DeInit+0xc8>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d10a      	bne.n	80016a0 <SPI_I2S_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 800168a:	2101      	movs	r1, #1
 800168c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001690:	f7ff ff6a 	bl	8001568 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8001694:	2100      	movs	r1, #0
 8001696:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800169a:	f7ff ff65 	bl	8001568 <RCC_APB1PeriphResetCmd>
}
 800169e:	e03a      	b.n	8001716 <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI3)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a21      	ldr	r2, [pc, #132]	; (8001728 <SPI_I2S_DeInit+0xcc>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d10a      	bne.n	80016be <SPI_I2S_DeInit+0x62>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 80016a8:	2101      	movs	r1, #1
 80016aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80016ae:	f7ff ff5b 	bl	8001568 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 80016b2:	2100      	movs	r1, #0
 80016b4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80016b8:	f7ff ff56 	bl	8001568 <RCC_APB1PeriphResetCmd>
}
 80016bc:	e02b      	b.n	8001716 <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI4)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a1a      	ldr	r2, [pc, #104]	; (800172c <SPI_I2S_DeInit+0xd0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d10a      	bne.n	80016dc <SPI_I2S_DeInit+0x80>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 80016c6:	2101      	movs	r1, #1
 80016c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016cc:	f7ff ff6c 	bl	80015a8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 80016d0:	2100      	movs	r1, #0
 80016d2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016d6:	f7ff ff67 	bl	80015a8 <RCC_APB2PeriphResetCmd>
}
 80016da:	e01c      	b.n	8001716 <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI5)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a14      	ldr	r2, [pc, #80]	; (8001730 <SPI_I2S_DeInit+0xd4>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d10a      	bne.n	80016fa <SPI_I2S_DeInit+0x9e>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 80016e4:	2101      	movs	r1, #1
 80016e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80016ea:	f7ff ff5d 	bl	80015a8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 80016ee:	2100      	movs	r1, #0
 80016f0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80016f4:	f7ff ff58 	bl	80015a8 <RCC_APB2PeriphResetCmd>
}
 80016f8:	e00d      	b.n	8001716 <SPI_I2S_DeInit+0xba>
    if (SPIx == SPI6)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a0d      	ldr	r2, [pc, #52]	; (8001734 <SPI_I2S_DeInit+0xd8>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d109      	bne.n	8001716 <SPI_I2S_DeInit+0xba>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 8001702:	2101      	movs	r1, #1
 8001704:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001708:	f7ff ff4e 	bl	80015a8 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 800170c:	2100      	movs	r1, #0
 800170e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001712:	f7ff ff49 	bl	80015a8 <RCC_APB2PeriphResetCmd>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40013000 	.word	0x40013000
 8001724:	40003800 	.word	0x40003800
 8001728:	40003c00 	.word	0x40003c00
 800172c:	40013400 	.word	0x40013400
 8001730:	40015000 	.word	0x40015000
 8001734:	40015400 	.word	0x40015400

08001738 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 800174c:	89fb      	ldrh	r3, [r7, #14]
 800174e:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8001752:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	881a      	ldrh	r2, [r3, #0]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	885b      	ldrh	r3, [r3, #2]
 800175c:	4313      	orrs	r3, r2
 800175e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001764:	4313      	orrs	r3, r2
 8001766:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800176c:	4313      	orrs	r3, r2
 800176e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001774:	4313      	orrs	r3, r2
 8001776:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800177c:	4313      	orrs	r3, r2
 800177e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001784:	4313      	orrs	r3, r2
 8001786:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800178c:	4313      	orrs	r3, r2
 800178e:	b29a      	uxth	r2, r3
 8001790:	89fb      	ldrh	r3, [r7, #14]
 8001792:	4313      	orrs	r3, r2
 8001794:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	89fa      	ldrh	r2, [r7, #14]
 800179a:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	8b9b      	ldrh	r3, [r3, #28]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	8a1a      	ldrh	r2, [r3, #16]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	821a      	strh	r2, [r3, #16]
}
 80017b4:	bf00      	nop
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80017cc:	78fb      	ldrb	r3, [r7, #3]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d008      	beq.n	80017e4 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017dc:	b29a      	uxth	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 80017e2:	e007      	b.n	80017f4 <SPI_Cmd+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	801a      	strh	r2, [r3, #0]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	887a      	ldrh	r2, [r7, #2]
 8001810:	819a      	strh	r2, [r3, #12]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800181e:	b480      	push	{r7}
 8001820:	b085      	sub	sp, #20
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	460b      	mov	r3, r1
 8001828:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800182a:	2300      	movs	r3, #0
 800182c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	891b      	ldrh	r3, [r3, #8]
 8001832:	b29a      	uxth	r2, r3
 8001834:	887b      	ldrh	r3, [r7, #2]
 8001836:	4013      	ands	r3, r2
 8001838:	b29b      	uxth	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d002      	beq.n	8001844 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800183e:	2301      	movs	r3, #1
 8001840:	73fb      	strb	r3, [r7, #15]
 8001842:	e001      	b.n	8001848 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8001844:	2300      	movs	r3, #0
 8001846:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8001848:	7bfb      	ldrb	r3, [r7, #15]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <IOE_Config>:
  *         hardware (GPIOs, APB clocks ..).
  * @param  None
  * @retval IOE_OK if all initializations done correctly. Other value if error.
  */
uint8_t IOE_Config(void)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	af00      	add	r7, sp, #0
  /* Configure the needed pins */
  IOE_GPIO_Config(); 
 800185a:	f000 f9cf 	bl	8001bfc <IOE_GPIO_Config>
  
  /* I2C initialization */
  IOE_I2C_Config();
 800185e:	f000 fa13 	bl	8001c88 <IOE_I2C_Config>
    
  /* Read IO Expander ID  */
  if(IOE_IsOperational())
 8001862:	f000 f877 	bl	8001954 <IOE_IsOperational>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <IOE_Config+0x1a>
  {
    return IOE_NOT_OPERATIONAL;
 800186c:	2304      	movs	r3, #4
 800186e:	e008      	b.n	8001882 <IOE_Config+0x2c>
  }
  
  /* Generate IO Expander Software reset */
  IOE_Reset(); 
 8001870:	f000 f88a 	bl	8001988 <IOE_Reset>
  
  /* IO Expander configuration */
  /* Touch Panel controller and ADC configuration */
  IOE_FnctCmd(IOE_ADC_FCT, ENABLE);
 8001874:	2101      	movs	r1, #1
 8001876:	2001      	movs	r0, #1
 8001878:	f000 f8b0 	bl	80019dc <IOE_FnctCmd>
  IOE_TP_Config();
 800187c:	f000 f8d8 	bl	8001a30 <IOE_TP_Config>

  /* Configuration is OK */
  return IOE_OK; 
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <IOE_TP_GetState>:
  * @brief  Returns Status and positions of the Touch Panel.
  * @param  None
  * @retval Pointer to TP_STATE structure holding Touch Panel information.
  */
TP_STATE* IOE_TP_GetState(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
  uint32_t xDiff, yDiff , x , y;
  static uint32_t _x = 0, _y = 0;
  
  /* Check if the Touch detect event happened */
  TP_State.TouchDetected = (I2C_ReadDeviceRegister(IOE_REG_TP_CTRL) & 0x80);
 800188e:	2040      	movs	r0, #64	; 0x40
 8001890:	f000 face 	bl	8001e30 <I2C_ReadDeviceRegister>
 8001894:	4603      	mov	r3, r0
 8001896:	b29b      	uxth	r3, r3
 8001898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800189c:	b29a      	uxth	r2, r3
 800189e:	4b2a      	ldr	r3, [pc, #168]	; (8001948 <IOE_TP_GetState+0xc0>)
 80018a0:	801a      	strh	r2, [r3, #0]
  
  if(TP_State.TouchDetected) 
 80018a2:	4b29      	ldr	r3, [pc, #164]	; (8001948 <IOE_TP_GetState+0xc0>)
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d030      	beq.n	800190c <IOE_TP_GetState+0x84>
  {
    x = IOE_TP_Read_X();
 80018aa:	f000 f935 	bl	8001b18 <IOE_TP_Read_X>
 80018ae:	4603      	mov	r3, r0
 80018b0:	60fb      	str	r3, [r7, #12]
    y = IOE_TP_Read_Y();
 80018b2:	f000 f965 	bl	8001b80 <IOE_TP_Read_Y>
 80018b6:	4603      	mov	r3, r0
 80018b8:	60bb      	str	r3, [r7, #8]
    xDiff = x > _x? (x - _x): (_x - x);
 80018ba:	4b24      	ldr	r3, [pc, #144]	; (800194c <IOE_TP_GetState+0xc4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d904      	bls.n	80018ce <IOE_TP_GetState+0x46>
 80018c4:	4b21      	ldr	r3, [pc, #132]	; (800194c <IOE_TP_GetState+0xc4>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	e003      	b.n	80018d6 <IOE_TP_GetState+0x4e>
 80018ce:	4b1f      	ldr	r3, [pc, #124]	; (800194c <IOE_TP_GetState+0xc4>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	607b      	str	r3, [r7, #4]
    yDiff = y > _y? (y - _y): (_y - y);
 80018d8:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <IOE_TP_GetState+0xc8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68ba      	ldr	r2, [r7, #8]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d904      	bls.n	80018ec <IOE_TP_GetState+0x64>
 80018e2:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <IOE_TP_GetState+0xc8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	e003      	b.n	80018f4 <IOE_TP_GetState+0x6c>
 80018ec:	4b18      	ldr	r3, [pc, #96]	; (8001950 <IOE_TP_GetState+0xc8>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	603b      	str	r3, [r7, #0]
    if (xDiff + yDiff > 5)
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	4413      	add	r3, r2
 80018fc:	2b05      	cmp	r3, #5
 80018fe:	d905      	bls.n	800190c <IOE_TP_GetState+0x84>
    {
      _x = x;
 8001900:	4a12      	ldr	r2, [pc, #72]	; (800194c <IOE_TP_GetState+0xc4>)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6013      	str	r3, [r2, #0]
      _y = y;       
 8001906:	4a12      	ldr	r2, [pc, #72]	; (8001950 <IOE_TP_GetState+0xc8>)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	6013      	str	r3, [r2, #0]
    }
  }  
  /* Update the X position */
  TP_State.X = _x;
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <IOE_TP_GetState+0xc4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	b29a      	uxth	r2, r3
 8001912:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <IOE_TP_GetState+0xc0>)
 8001914:	805a      	strh	r2, [r3, #2]
    
  /* Update the Y position */  
  TP_State.Y = _y;
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <IOE_TP_GetState+0xc8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	b29a      	uxth	r2, r3
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <IOE_TP_GetState+0xc0>)
 800191e:	809a      	strh	r2, [r3, #4]
  /* Update the Z Pression index */  
  TP_State.Z = IOE_TP_Read_Z();  
 8001920:	f000 f958 	bl	8001bd4 <IOE_TP_Read_Z>
 8001924:	4603      	mov	r3, r0
 8001926:	461a      	mov	r2, r3
 8001928:	4b07      	ldr	r3, [pc, #28]	; (8001948 <IOE_TP_GetState+0xc0>)
 800192a:	80da      	strh	r2, [r3, #6]
  
  /* Clear the interrupt pending bit and enable the FIFO again */
  I2C_WriteDeviceRegister(IOE_REG_FIFO_STA, 0x01);
 800192c:	2101      	movs	r1, #1
 800192e:	204b      	movs	r0, #75	; 0x4b
 8001930:	f000 f9ce 	bl	8001cd0 <I2C_WriteDeviceRegister>
  I2C_WriteDeviceRegister(IOE_REG_FIFO_STA, 0x00);
 8001934:	2100      	movs	r1, #0
 8001936:	204b      	movs	r0, #75	; 0x4b
 8001938:	f000 f9ca 	bl	8001cd0 <I2C_WriteDeviceRegister>
  
  /* Return pointer to the updated structure */
  return &TP_State; 
 800193c:	4b02      	ldr	r3, [pc, #8]	; (8001948 <IOE_TP_GetState+0xc0>)
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200001dc 	.word	0x200001dc
 800194c:	2000016c 	.word	0x2000016c
 8001950:	20000170 	.word	0x20000170

08001954 <IOE_IsOperational>:
  * @brief  Checks if the IOE device is correctly configured and 
  *         communicates correctly ont the I2C bus.
  * @retval IOE_OK if IOE is operational. Other value if failure.
  */
uint8_t IOE_IsOperational(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* Return Error if the ID is not correct */
  if( IOE_ReadID() != (uint16_t)STMPE811_ID )
 8001958:	f000 f826 	bl	80019a8 <IOE_ReadID>
 800195c:	4603      	mov	r3, r0
 800195e:	461a      	mov	r2, r3
 8001960:	f640 0311 	movw	r3, #2065	; 0x811
 8001964:	429a      	cmp	r2, r3
 8001966:	d009      	beq.n	800197c <IOE_IsOperational+0x28>
  {
    /* Check if a Timeout occurred */
    if (IOE_TimeOut == 0)
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <IOE_IsOperational+0x30>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d103      	bne.n	8001978 <IOE_IsOperational+0x24>
    {
      return(IOE_TimeoutUserCallback());
 8001970:	f000 fc38 	bl	80021e4 <IOE_TimeoutUserCallback>
 8001974:	4603      	mov	r3, r0
 8001976:	e002      	b.n	800197e <IOE_IsOperational+0x2a>
    }
    else
    {
      return IOE_FAILURE; /* ID is not Correct */
 8001978:	2301      	movs	r3, #1
 800197a:	e000      	b.n	800197e <IOE_IsOperational+0x2a>
    }
  } 
  else 
  {
    return IOE_OK; /* ID is correct */
 800197c:	2300      	movs	r3, #0
  }
}
 800197e:	4618      	mov	r0, r3
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000020 	.word	0x20000020

08001988 <IOE_Reset>:
/**
  * @brief  Resets the IO Expander by Software (SYS_CTRL1, RESET bit).
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_Reset(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* Power Down the IO_Expander */
  I2C_WriteDeviceRegister(IOE_REG_SYS_CTRL1, 0x02);
 800198c:	2102      	movs	r1, #2
 800198e:	2003      	movs	r0, #3
 8001990:	f000 f99e 	bl	8001cd0 <I2C_WriteDeviceRegister>

  /* wait for a delay to insure registers erasing */
  _delay_(2); 
 8001994:	2002      	movs	r0, #2
 8001996:	f000 fc5b 	bl	8002250 <delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized*/
  I2C_WriteDeviceRegister(IOE_REG_SYS_CTRL1, 0x00);
 800199a:	2100      	movs	r1, #0
 800199c:	2003      	movs	r0, #3
 800199e:	f000 f997 	bl	8001cd0 <I2C_WriteDeviceRegister>
  
  /* If all OK return IOE_OK */
  return IOE_OK;    
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <IOE_ReadID>:
/**
  * @brief  Reads the IOE device ID.
  * @retval The Device ID (two bytes).
  */
uint16_t IOE_ReadID(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
  uint16_t tmp = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	80fb      	strh	r3, [r7, #6]

  /* Read device ID  */
  tmp = I2C_ReadDeviceRegister(0);
 80019b2:	2000      	movs	r0, #0
 80019b4:	f000 fa3c 	bl	8001e30 <I2C_ReadDeviceRegister>
 80019b8:	4603      	mov	r3, r0
 80019ba:	80fb      	strh	r3, [r7, #6]
  tmp = (uint32_t)(tmp << 8);
 80019bc:	88fb      	ldrh	r3, [r7, #6]
 80019be:	021b      	lsls	r3, r3, #8
 80019c0:	80fb      	strh	r3, [r7, #6]
  tmp |= (uint32_t)I2C_ReadDeviceRegister(1);
 80019c2:	2001      	movs	r0, #1
 80019c4:	f000 fa34 	bl	8001e30 <I2C_ReadDeviceRegister>
 80019c8:	4603      	mov	r3, r0
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	88fb      	ldrh	r3, [r7, #6]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	80fb      	strh	r3, [r7, #6]
  
  /* Return the ID */
  return (uint16_t)tmp;
 80019d2:	88fb      	ldrh	r3, [r7, #6]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <IOE_FnctCmd>:
  *   @arg  IOE_ADC_FCT : ADC function
  * @param  NewState: can be ENABLE pr DISABLE   
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_FnctCmd(uint8_t Fct, FunctionalState NewState)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	460a      	mov	r2, r1
 80019e6:	71fb      	strb	r3, [r7, #7]
 80019e8:	4613      	mov	r3, r2
 80019ea:	71bb      	strb	r3, [r7, #6]
  uint8_t tmp = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	73fb      	strb	r3, [r7, #15]
  
  /* Get the register value */
  tmp = I2C_ReadDeviceRegister(IOE_REG_SYS_CTRL2);
 80019f0:	2004      	movs	r0, #4
 80019f2:	f000 fa1d 	bl	8001e30 <I2C_ReadDeviceRegister>
 80019f6:	4603      	mov	r3, r0
 80019f8:	73fb      	strb	r3, [r7, #15]
  
  if (NewState != DISABLE)
 80019fa:	79bb      	ldrb	r3, [r7, #6]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d009      	beq.n	8001a14 <IOE_FnctCmd+0x38>
  {
    /* Set the Functionalities to be Enabled */    
    tmp &= ~(uint8_t)Fct;
 8001a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a04:	43db      	mvns	r3, r3
 8001a06:	b25a      	sxtb	r2, r3
 8001a08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	b25b      	sxtb	r3, r3
 8001a10:	73fb      	strb	r3, [r7, #15]
 8001a12:	e003      	b.n	8001a1c <IOE_FnctCmd+0x40>
  }
  else
  {
    /* Set the Functionalities to be Disabled */    
    tmp |= (uint8_t)Fct;  
 8001a14:	7bfa      	ldrb	r2, [r7, #15]
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Set the register value */
  I2C_WriteDeviceRegister(IOE_REG_SYS_CTRL2, tmp);
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	4619      	mov	r1, r3
 8001a20:	2004      	movs	r0, #4
 8001a22:	f000 f955 	bl	8001cd0 <I2C_WriteDeviceRegister>
  
  /* If all OK return IOE_OK */
  return IOE_OK;    
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <IOE_TP_Config>:
  * @brief  Configures the touch Panel Controller (Single point detection)
  * @param  None
  * @retval IOE_OK if all initializations are OK. Other value if error.
  */
uint8_t IOE_TP_Config(void)
{ 
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Enable touch Panel functionality */
  IOE_FnctCmd(IOE_TP_FCT, ENABLE);
 8001a34:	2101      	movs	r1, #1
 8001a36:	2002      	movs	r0, #2
 8001a38:	f7ff ffd0 	bl	80019dc <IOE_FnctCmd>
  
  /* Select Sample Time, bit number and ADC Reference */
  I2C_WriteDeviceRegister(IOE_REG_ADC_CTRL1, 0x49);
 8001a3c:	2149      	movs	r1, #73	; 0x49
 8001a3e:	2020      	movs	r0, #32
 8001a40:	f000 f946 	bl	8001cd0 <I2C_WriteDeviceRegister>
  
  /* Wait for ~20 ms */
  _delay_(2);  
 8001a44:	2002      	movs	r0, #2
 8001a46:	f000 fc03 	bl	8002250 <delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  I2C_WriteDeviceRegister(IOE_REG_ADC_CTRL2, 0x01);
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	2021      	movs	r0, #33	; 0x21
 8001a4e:	f000 f93f 	bl	8001cd0 <I2C_WriteDeviceRegister>
  
  /* Select TSC pins in non default mode */  
  IOE_IOAFConfig((uint8_t)TOUCH_IO_ALL, DISABLE);
 8001a52:	2100      	movs	r1, #0
 8001a54:	201e      	movs	r0, #30
 8001a56:	f000 f835 	bl	8001ac4 <IOE_IOAFConfig>
  
  /* Select 2 nF filter capacitor */
  I2C_WriteDeviceRegister(IOE_REG_TP_CFG, 0x9A);   
 8001a5a:	219a      	movs	r1, #154	; 0x9a
 8001a5c:	2041      	movs	r0, #65	; 0x41
 8001a5e:	f000 f937 	bl	8001cd0 <I2C_WriteDeviceRegister>
  
  /* Select single point reading  */
  I2C_WriteDeviceRegister(IOE_REG_FIFO_TH, 0x01);
 8001a62:	2101      	movs	r1, #1
 8001a64:	204a      	movs	r0, #74	; 0x4a
 8001a66:	f000 f933 	bl	8001cd0 <I2C_WriteDeviceRegister>
  
  /* Write 0x01 to clear the FIFO memory content. */
  I2C_WriteDeviceRegister(IOE_REG_FIFO_STA, 0x01);
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	204b      	movs	r0, #75	; 0x4b
 8001a6e:	f000 f92f 	bl	8001cd0 <I2C_WriteDeviceRegister>
  
  /* Write 0x00 to put the FIFO back into operation mode  */
  I2C_WriteDeviceRegister(IOE_REG_FIFO_STA, 0x00);
 8001a72:	2100      	movs	r1, #0
 8001a74:	204b      	movs	r0, #75	; 0x4b
 8001a76:	f000 f92b 	bl	8001cd0 <I2C_WriteDeviceRegister>
  
  /* set the data format for Z value: 7 fractional part and 1 whole part */
  I2C_WriteDeviceRegister(IOE_REG_TP_FRACT_XYZ, 0x01);
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	2056      	movs	r0, #86	; 0x56
 8001a7e:	f000 f927 	bl	8001cd0 <I2C_WriteDeviceRegister>
  
  /* set the driving capability of the device for TSC pins: 50mA */
  I2C_WriteDeviceRegister(IOE_REG_TP_I_DRIVE, 0x01);
 8001a82:	2101      	movs	r1, #1
 8001a84:	2058      	movs	r0, #88	; 0x58
 8001a86:	f000 f923 	bl	8001cd0 <I2C_WriteDeviceRegister>
  
  /* Use no tracking index, touch-panel controller operation mode (XYZ) and 
     enable the TSC */
  I2C_WriteDeviceRegister(IOE_REG_TP_CTRL, 0x03);
 8001a8a:	2103      	movs	r1, #3
 8001a8c:	2040      	movs	r0, #64	; 0x40
 8001a8e:	f000 f91f 	bl	8001cd0 <I2C_WriteDeviceRegister>
  
  /*  Clear all the status pending bits */
  I2C_WriteDeviceRegister(IOE_REG_INT_STA, 0xFF); 
 8001a92:	21ff      	movs	r1, #255	; 0xff
 8001a94:	200b      	movs	r0, #11
 8001a96:	f000 f91b 	bl	8001cd0 <I2C_WriteDeviceRegister>
  
  /* Initialize the TS structure to their default values */ 
  TP_State.TouchDetected = TP_State.X = TP_State.Y = TP_State.Z = 0;
 8001a9a:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <IOE_TP_Config+0x90>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	80da      	strh	r2, [r3, #6]
 8001aa0:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <IOE_TP_Config+0x90>)
 8001aa2:	88da      	ldrh	r2, [r3, #6]
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <IOE_TP_Config+0x90>)
 8001aa6:	809a      	strh	r2, [r3, #4]
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <IOE_TP_Config+0x90>)
 8001aaa:	889a      	ldrh	r2, [r3, #4]
 8001aac:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <IOE_TP_Config+0x90>)
 8001aae:	805a      	strh	r2, [r3, #2]
 8001ab0:	4b03      	ldr	r3, [pc, #12]	; (8001ac0 <IOE_TP_Config+0x90>)
 8001ab2:	885a      	ldrh	r2, [r3, #2]
 8001ab4:	4b02      	ldr	r3, [pc, #8]	; (8001ac0 <IOE_TP_Config+0x90>)
 8001ab6:	801a      	strh	r2, [r3, #0]
  
  /* All configuration done */
  return IOE_OK;  
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	200001dc 	.word	0x200001dc

08001ac4 <IOE_IOAFConfig>:
  * @param  NewState: State of the AF for the selected pin, could be 
  *         ENABLE or DISABLE.       
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_IOAFConfig(uint8_t IO_Pin, FunctionalState NewState)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	460a      	mov	r2, r1
 8001ace:	71fb      	strb	r3, [r7, #7]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	71bb      	strb	r3, [r7, #6]
  uint8_t tmp = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current state of the GPIO_AF register */
  tmp = I2C_ReadDeviceRegister(IOE_REG_GPIO_AF);
 8001ad8:	2017      	movs	r0, #23
 8001ada:	f000 f9a9 	bl	8001e30 <I2C_ReadDeviceRegister>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	73fb      	strb	r3, [r7, #15]
  
  if (NewState != DISABLE)
 8001ae2:	79bb      	ldrb	r3, [r7, #6]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d004      	beq.n	8001af2 <IOE_IOAFConfig+0x2e>
  {
    /* Enable the selected pins alternate function */
    tmp |= (uint8_t)IO_Pin;
 8001ae8:	7bfa      	ldrb	r2, [r7, #15]
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	73fb      	strb	r3, [r7, #15]
 8001af0:	e008      	b.n	8001b04 <IOE_IOAFConfig+0x40>
  }
  else
  {
    /* Disable the selected pins alternate function */   
    tmp &= ~(uint8_t)IO_Pin;   
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	43db      	mvns	r3, r3
 8001af8:	b25a      	sxtb	r2, r3
 8001afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afe:	4013      	ands	r3, r2
 8001b00:	b25b      	sxtb	r3, r3
 8001b02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write back the new value in GPIO_AF register */  
  I2C_WriteDeviceRegister(IOE_REG_GPIO_AF, tmp);  
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
 8001b06:	4619      	mov	r1, r3
 8001b08:	2017      	movs	r0, #23
 8001b0a:	f000 f8e1 	bl	8001cd0 <I2C_WriteDeviceRegister>

  /* If all OK return IOE_OK */
  return IOE_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <IOE_TP_Read_X>:
  * @brief  Return Touch Panel X position value
  * @param  None
  * @retval X position.
  */
static uint16_t IOE_TP_Read_X(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
  int32_t x, xr;
  
  /* Read x value from DATA_X register */
  x = I2C_ReadDataBuffer(IOE_REG_TP_DATA_X);
 8001b1e:	204d      	movs	r0, #77	; 0x4d
 8001b20:	f000 fa74 	bl	800200c <I2C_ReadDataBuffer>
 8001b24:	4603      	mov	r3, r0
 8001b26:	607b      	str	r3, [r7, #4]
  
  /* x value first correction */
  if(x <= 3000)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	dc05      	bgt.n	8001b3e <IOE_TP_Read_X+0x26>
  {
  x = 3870 - x;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 8001b38:	330e      	adds	r3, #14
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	e004      	b.n	8001b48 <IOE_TP_Read_X+0x30>
  }
  else
  {
   x = 3800 - x;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8001b44:	3308      	adds	r3, #8
 8001b46:	607b      	str	r3, [r7, #4]
  }
  
  /* x value second correction */  
  xr = x / 15;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a0c      	ldr	r2, [pc, #48]	; (8001b7c <IOE_TP_Read_X+0x64>)
 8001b4c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b50:	441a      	add	r2, r3
 8001b52:	10d2      	asrs	r2, r2, #3
 8001b54:	17db      	asrs	r3, r3, #31
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	603b      	str	r3, [r7, #0]
  
  /* return x position value */
  if(xr <= 0)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	dc02      	bgt.n	8001b66 <IOE_TP_Read_X+0x4e>
  {
    xr = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	e004      	b.n	8001b70 <IOE_TP_Read_X+0x58>
  }
  else if (xr > 240)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	2bf0      	cmp	r3, #240	; 0xf0
 8001b6a:	dd01      	ble.n	8001b70 <IOE_TP_Read_X+0x58>
  {
    xr = 239;
 8001b6c:	23ef      	movs	r3, #239	; 0xef
 8001b6e:	603b      	str	r3, [r7, #0]
  }
  else 
  {}
  return (uint16_t)(xr); 
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	b29b      	uxth	r3, r3
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	88888889 	.word	0x88888889

08001b80 <IOE_TP_Read_Y>:
  * @brief  Return Touch Panel Y position value
  * @param  None
  * @retval Y position.
  */
static uint16_t IOE_TP_Read_Y(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
  int32_t y, yr;
  
  /* Read y value from DATA_Y register */
  y = I2C_ReadDataBuffer(IOE_REG_TP_DATA_Y);
 8001b86:	204f      	movs	r0, #79	; 0x4f
 8001b88:	f000 fa40 	bl	800200c <I2C_ReadDataBuffer>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	603b      	str	r3, [r7, #0]
  
  /* y value first correction */

  y -= 360;  
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001b96:	603b      	str	r3, [r7, #0]
  
  /* y value second correction */
  yr = y / 11;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	4a0d      	ldr	r2, [pc, #52]	; (8001bd0 <IOE_TP_Read_Y+0x50>)
 8001b9c:	fb82 1203 	smull	r1, r2, r2, r3
 8001ba0:	1052      	asrs	r2, r2, #1
 8001ba2:	17db      	asrs	r3, r3, #31
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	607b      	str	r3, [r7, #4]
  
  /* return y position value */
  if(yr <= 0)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	dc02      	bgt.n	8001bb4 <IOE_TP_Read_Y+0x34>
  {
    yr = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	607b      	str	r3, [r7, #4]
 8001bb2:	e006      	b.n	8001bc2 <IOE_TP_Read_Y+0x42>
  }
  else if (yr > 320)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001bba:	dd02      	ble.n	8001bc2 <IOE_TP_Read_Y+0x42>
  {
    yr = 319;
 8001bbc:	f240 133f 	movw	r3, #319	; 0x13f
 8001bc0:	607b      	str	r3, [r7, #4]
  }
  else
  {}
  return (uint16_t)(yr); 
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	b29b      	uxth	r3, r3
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	2e8ba2e9 	.word	0x2e8ba2e9

08001bd4 <IOE_TP_Read_Z>:
  * @brief  Return Touch Panel Z position value
  * @param  None
  * @retval Z position.
  */
static uint16_t IOE_TP_Read_Z(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
  uint32_t z;
  
  /* Read z value from DATA_Z register */
  z = I2C_ReadDataBuffer(IOE_REG_TP_DATA_Z);
 8001bda:	2051      	movs	r0, #81	; 0x51
 8001bdc:	f000 fa16 	bl	800200c <I2C_ReadDataBuffer>
 8001be0:	4603      	mov	r3, r0
 8001be2:	607b      	str	r3, [r7, #4]

  /* return z position value */
  if(z <= 0)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <IOE_TP_Read_Z+0x1a>
    z = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	607b      	str	r3, [r7, #4]
  return (uint16_t)(z); 
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	b29b      	uxth	r3, r3
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <IOE_GPIO_Config>:
  * @brief  Initializes the GPIO pins used by the IO expander.
  * @param  None
  * @retval None
  */
static void IOE_GPIO_Config(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable IOE_I2C and IOE_I2C_GPIO_PORT & Alternate Function clocks */
  RCC_APB1PeriphClockCmd(IOE_I2C_CLK, ENABLE);
 8001c02:	2101      	movs	r1, #1
 8001c04:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001c08:	f7ff fc4e 	bl	80014a8 <RCC_APB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(IOE_I2C_SCL_GPIO_CLK | IOE_I2C_SDA_GPIO_CLK |
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	f240 1005 	movw	r0, #261	; 0x105
 8001c12:	f7ff fc09 	bl	8001428 <RCC_AHB1PeriphClockCmd>
                         IOE_IT_GPIO_CLK, ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001c16:	2101      	movs	r1, #1
 8001c18:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c1c:	f7ff fc64 	bl	80014e8 <RCC_APB2PeriphClockCmd>
  
  /* Reset IOE_I2C IP */
  RCC_APB1PeriphResetCmd(IOE_I2C_CLK, ENABLE);
 8001c20:	2101      	movs	r1, #1
 8001c22:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001c26:	f7ff fc9f 	bl	8001568 <RCC_APB1PeriphResetCmd>
  /* Release reset signal of IOE_I2C IP */
  RCC_APB1PeriphResetCmd(IOE_I2C_CLK, DISABLE);
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001c30:	f7ff fc9a 	bl	8001568 <RCC_APB1PeriphResetCmd>

  /* Connect PXx to I2C_SCL*/
  GPIO_PinAFConfig(IOE_I2C_SCL_GPIO_PORT, IOE_I2C_SCL_SOURCE, IOE_I2C_SCL_AF);
 8001c34:	2204      	movs	r2, #4
 8001c36:	2108      	movs	r1, #8
 8001c38:	4811      	ldr	r0, [pc, #68]	; (8001c80 <IOE_GPIO_Config+0x84>)
 8001c3a:	f7fe fea3 	bl	8000984 <GPIO_PinAFConfig>
  /* Connect PXx to I2C_SDA*/
  GPIO_PinAFConfig(IOE_I2C_SDA_GPIO_PORT, IOE_I2C_SDA_SOURCE, IOE_I2C_SDA_AF); 
 8001c3e:	2204      	movs	r2, #4
 8001c40:	2109      	movs	r1, #9
 8001c42:	4810      	ldr	r0, [pc, #64]	; (8001c84 <IOE_GPIO_Config+0x88>)
 8001c44:	f7fe fe9e 	bl	8000984 <GPIO_PinAFConfig>
    
  /* IOE_I2C SCL and SDA pins configuration */
  GPIO_InitStructure.GPIO_Pin = IOE_I2C_SCL_PIN;
 8001c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c4c:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001c52:	2302      	movs	r3, #2
 8001c54:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8001c56:	2301      	movs	r3, #1
 8001c58:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(IOE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 8001c5e:	463b      	mov	r3, r7
 8001c60:	4619      	mov	r1, r3
 8001c62:	4807      	ldr	r0, [pc, #28]	; (8001c80 <IOE_GPIO_Config+0x84>)
 8001c64:	f7fe fdca 	bl	80007fc <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = IOE_I2C_SDA_PIN;
 8001c68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c6c:	603b      	str	r3, [r7, #0]
  GPIO_Init(IOE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 8001c6e:	463b      	mov	r3, r7
 8001c70:	4619      	mov	r1, r3
 8001c72:	4804      	ldr	r0, [pc, #16]	; (8001c84 <IOE_GPIO_Config+0x88>)
 8001c74:	f7fe fdc2 	bl	80007fc <GPIO_Init>
  
}
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40020000 	.word	0x40020000
 8001c84:	40020800 	.word	0x40020800

08001c88 <IOE_I2C_Config>:
  * @brief  Configure the I2C Peripheral used to communicate with IO_Expanders.
  * @param  None
  * @retval None
  */
static void IOE_I2C_Config(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
  I2C_InitTypeDef I2C_InitStructure;
  
  /* IOE_I2C configuration */
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	80bb      	strh	r3, [r7, #4]
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8001c92:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8001c96:	80fb      	strh	r3, [r7, #6]
  I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	813b      	strh	r3, [r7, #8]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8001c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ca0:	817b      	strh	r3, [r7, #10]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001ca2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ca6:	81bb      	strh	r3, [r7, #12]
  I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 8001ca8:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <IOE_I2C_Config+0x40>)
 8001caa:	603b      	str	r3, [r7, #0]
  
  /* Initialize the I2C peripheral */
  I2C_Init(IOE_I2C, &I2C_InitStructure);
 8001cac:	463b      	mov	r3, r7
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4806      	ldr	r0, [pc, #24]	; (8001ccc <IOE_I2C_Config+0x44>)
 8001cb2:	f7fe feeb 	bl	8000a8c <I2C_Init>
  
  /* Enable the I2C peripheral */
  I2C_Cmd(IOE_I2C, ENABLE);
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	4804      	ldr	r0, [pc, #16]	; (8001ccc <IOE_I2C_Config+0x44>)
 8001cba:	f7fe ffa9 	bl	8000c10 <I2C_Cmd>
}
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	000186a0 	.word	0x000186a0
 8001ccc:	40005c00 	.word	0x40005c00

08001cd0 <I2C_WriteDeviceRegister>:
  * @param  RegisterAddr: The target register address
  * @param  RegisterValue: The target register value to be written 
  * @retval IOE_OK: if all operations are OK. Other value if error.
  */
uint8_t I2C_WriteDeviceRegister(uint8_t RegisterAddr, uint8_t RegisterValue)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	460a      	mov	r2, r1
 8001cda:	71fb      	strb	r3, [r7, #7]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	71bb      	strb	r3, [r7, #6]
  uint32_t read_verif = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60fb      	str	r3, [r7, #12]

  /* Begin the configuration sequence */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	484c      	ldr	r0, [pc, #304]	; (8001e18 <I2C_WriteDeviceRegister+0x148>)
 8001ce8:	f7fe ffb2 	bl	8000c50 <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8001cec:	4b4b      	ldr	r3, [pc, #300]	; (8001e1c <I2C_WriteDeviceRegister+0x14c>)
 8001cee:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001cf2:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 8001cf4:	e00a      	b.n	8001d0c <I2C_WriteDeviceRegister+0x3c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8001cf6:	4b49      	ldr	r3, [pc, #292]	; (8001e1c <I2C_WriteDeviceRegister+0x14c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	1e5a      	subs	r2, r3, #1
 8001cfc:	4947      	ldr	r1, [pc, #284]	; (8001e1c <I2C_WriteDeviceRegister+0x14c>)
 8001cfe:	600a      	str	r2, [r1, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d103      	bne.n	8001d0c <I2C_WriteDeviceRegister+0x3c>
 8001d04:	f000 fa6e 	bl	80021e4 <IOE_TimeoutUserCallback>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	e080      	b.n	8001e0e <I2C_WriteDeviceRegister+0x13e>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 8001d0c:	4944      	ldr	r1, [pc, #272]	; (8001e20 <I2C_WriteDeviceRegister+0x150>)
 8001d0e:	4842      	ldr	r0, [pc, #264]	; (8001e18 <I2C_WriteDeviceRegister+0x148>)
 8001d10:	f7ff f87d 	bl	8000e0e <I2C_GetFlagStatus>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0ed      	beq.n	8001cf6 <I2C_WriteDeviceRegister+0x26>
  }

  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2182      	movs	r1, #130	; 0x82
 8001d1e:	483e      	ldr	r0, [pc, #248]	; (8001e18 <I2C_WriteDeviceRegister+0x148>)
 8001d20:	f7fe ffd6 	bl	8000cd0 <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
 8001d24:	4b3d      	ldr	r3, [pc, #244]	; (8001e1c <I2C_WriteDeviceRegister+0x14c>)
 8001d26:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001d2a:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 8001d2c:	e00a      	b.n	8001d44 <I2C_WriteDeviceRegister+0x74>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8001d2e:	4b3b      	ldr	r3, [pc, #236]	; (8001e1c <I2C_WriteDeviceRegister+0x14c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	1e5a      	subs	r2, r3, #1
 8001d34:	4939      	ldr	r1, [pc, #228]	; (8001e1c <I2C_WriteDeviceRegister+0x14c>)
 8001d36:	600a      	str	r2, [r1, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d103      	bne.n	8001d44 <I2C_WriteDeviceRegister+0x74>
 8001d3c:	f000 fa52 	bl	80021e4 <IOE_TimeoutUserCallback>
 8001d40:	4603      	mov	r3, r0
 8001d42:	e064      	b.n	8001e0e <I2C_WriteDeviceRegister+0x13e>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 8001d44:	4937      	ldr	r1, [pc, #220]	; (8001e24 <I2C_WriteDeviceRegister+0x154>)
 8001d46:	4834      	ldr	r0, [pc, #208]	; (8001e18 <I2C_WriteDeviceRegister+0x148>)
 8001d48:	f7ff f861 	bl	8000e0e <I2C_GetFlagStatus>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0ed      	beq.n	8001d2e <I2C_WriteDeviceRegister+0x5e>
  }
  
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 8001d52:	4b31      	ldr	r3, [pc, #196]	; (8001e18 <I2C_WriteDeviceRegister+0x148>)
 8001d54:	8b1b      	ldrh	r3, [r3, #24]
  
  /* Test on EV8_1 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8001d56:	4b31      	ldr	r3, [pc, #196]	; (8001e1c <I2C_WriteDeviceRegister+0x14c>)
 8001d58:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001d5c:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 8001d5e:	e00a      	b.n	8001d76 <I2C_WriteDeviceRegister+0xa6>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8001d60:	4b2e      	ldr	r3, [pc, #184]	; (8001e1c <I2C_WriteDeviceRegister+0x14c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	1e5a      	subs	r2, r3, #1
 8001d66:	492d      	ldr	r1, [pc, #180]	; (8001e1c <I2C_WriteDeviceRegister+0x14c>)
 8001d68:	600a      	str	r2, [r1, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d103      	bne.n	8001d76 <I2C_WriteDeviceRegister+0xa6>
 8001d6e:	f000 fa39 	bl	80021e4 <IOE_TimeoutUserCallback>
 8001d72:	4603      	mov	r3, r0
 8001d74:	e04b      	b.n	8001e0e <I2C_WriteDeviceRegister+0x13e>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 8001d76:	492c      	ldr	r1, [pc, #176]	; (8001e28 <I2C_WriteDeviceRegister+0x158>)
 8001d78:	4827      	ldr	r0, [pc, #156]	; (8001e18 <I2C_WriteDeviceRegister+0x148>)
 8001d7a:	f7ff f848 	bl	8000e0e <I2C_GetFlagStatus>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ed      	beq.n	8001d60 <I2C_WriteDeviceRegister+0x90>
  }
  
  /* Transmit the first address for r/w operations */
  I2C_SendData(IOE_I2C, RegisterAddr);
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	4619      	mov	r1, r3
 8001d88:	4823      	ldr	r0, [pc, #140]	; (8001e18 <I2C_WriteDeviceRegister+0x148>)
 8001d8a:	f7ff f822 	bl	8000dd2 <I2C_SendData>
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8001d8e:	4b23      	ldr	r3, [pc, #140]	; (8001e1c <I2C_WriteDeviceRegister+0x14c>)
 8001d90:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001d94:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 8001d96:	e00a      	b.n	8001dae <I2C_WriteDeviceRegister+0xde>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8001d98:	4b20      	ldr	r3, [pc, #128]	; (8001e1c <I2C_WriteDeviceRegister+0x14c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	1e5a      	subs	r2, r3, #1
 8001d9e:	491f      	ldr	r1, [pc, #124]	; (8001e1c <I2C_WriteDeviceRegister+0x14c>)
 8001da0:	600a      	str	r2, [r1, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d103      	bne.n	8001dae <I2C_WriteDeviceRegister+0xde>
 8001da6:	f000 fa1d 	bl	80021e4 <IOE_TimeoutUserCallback>
 8001daa:	4603      	mov	r3, r0
 8001dac:	e02f      	b.n	8001e0e <I2C_WriteDeviceRegister+0x13e>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 8001dae:	491e      	ldr	r1, [pc, #120]	; (8001e28 <I2C_WriteDeviceRegister+0x158>)
 8001db0:	4819      	ldr	r0, [pc, #100]	; (8001e18 <I2C_WriteDeviceRegister+0x148>)
 8001db2:	f7ff f82c 	bl	8000e0e <I2C_GetFlagStatus>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0ed      	beq.n	8001d98 <I2C_WriteDeviceRegister+0xc8>
  }
  
  /* Prepare the register value to be sent */
  I2C_SendData(IOE_I2C, RegisterValue);
 8001dbc:	79bb      	ldrb	r3, [r7, #6]
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4815      	ldr	r0, [pc, #84]	; (8001e18 <I2C_WriteDeviceRegister+0x148>)
 8001dc2:	f7ff f806 	bl	8000dd2 <I2C_SendData>
  
  /* Test on EV8_2 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8001dc6:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <I2C_WriteDeviceRegister+0x14c>)
 8001dc8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001dcc:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE)) || (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF)))
 8001dce:	e00a      	b.n	8001de6 <I2C_WriteDeviceRegister+0x116>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <I2C_WriteDeviceRegister+0x14c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	1e5a      	subs	r2, r3, #1
 8001dd6:	4911      	ldr	r1, [pc, #68]	; (8001e1c <I2C_WriteDeviceRegister+0x14c>)
 8001dd8:	600a      	str	r2, [r1, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d103      	bne.n	8001de6 <I2C_WriteDeviceRegister+0x116>
 8001dde:	f000 fa01 	bl	80021e4 <IOE_TimeoutUserCallback>
 8001de2:	4603      	mov	r3, r0
 8001de4:	e013      	b.n	8001e0e <I2C_WriteDeviceRegister+0x13e>
  while ((!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE)) || (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF)))
 8001de6:	4910      	ldr	r1, [pc, #64]	; (8001e28 <I2C_WriteDeviceRegister+0x158>)
 8001de8:	480b      	ldr	r0, [pc, #44]	; (8001e18 <I2C_WriteDeviceRegister+0x148>)
 8001dea:	f7ff f810 	bl	8000e0e <I2C_GetFlagStatus>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0ed      	beq.n	8001dd0 <I2C_WriteDeviceRegister+0x100>
 8001df4:	490d      	ldr	r1, [pc, #52]	; (8001e2c <I2C_WriteDeviceRegister+0x15c>)
 8001df6:	4808      	ldr	r0, [pc, #32]	; (8001e18 <I2C_WriteDeviceRegister+0x148>)
 8001df8:	f7ff f809 	bl	8000e0e <I2C_GetFlagStatus>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0e6      	beq.n	8001dd0 <I2C_WriteDeviceRegister+0x100>
  }
  
  /* End the configuration sequence */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 8001e02:	2101      	movs	r1, #1
 8001e04:	4804      	ldr	r0, [pc, #16]	; (8001e18 <I2C_WriteDeviceRegister+0x148>)
 8001e06:	f7fe ff43 	bl	8000c90 <I2C_GenerateSTOP>
    read_verif = 0;
  }
#endif
  
  /* Return the verifying value: 0 (Passed) or 1 (Failed) */
  return read_verif;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	b2db      	uxtb	r3, r3
  
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40005c00 	.word	0x40005c00
 8001e1c:	20000020 	.word	0x20000020
 8001e20:	10000001 	.word	0x10000001
 8001e24:	10000002 	.word	0x10000002
 8001e28:	10000080 	.word	0x10000080
 8001e2c:	10000004 	.word	0x10000004

08001e30 <I2C_ReadDeviceRegister>:
  * @brief  Reads a register of the device through I2C without DMA.
  * @param  RegisterAddr: The target register address (between 00x and 0x24)
  * @retval The value of the read register (0xAA if Timeout occurred)   
  */ 
uint8_t I2C_ReadDeviceRegister(uint8_t RegisterAddr)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 8001e3e:	2101      	movs	r1, #1
 8001e40:	486b      	ldr	r0, [pc, #428]	; (8001ff0 <I2C_ReadDeviceRegister+0x1c0>)
 8001e42:	f7fe ff05 	bl	8000c50 <I2C_GenerateSTART>
  
    /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8001e46:	4b6b      	ldr	r3, [pc, #428]	; (8001ff4 <I2C_ReadDeviceRegister+0x1c4>)
 8001e48:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001e4c:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 8001e4e:	e00a      	b.n	8001e66 <I2C_ReadDeviceRegister+0x36>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8001e50:	4b68      	ldr	r3, [pc, #416]	; (8001ff4 <I2C_ReadDeviceRegister+0x1c4>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	1e5a      	subs	r2, r3, #1
 8001e56:	4967      	ldr	r1, [pc, #412]	; (8001ff4 <I2C_ReadDeviceRegister+0x1c4>)
 8001e58:	600a      	str	r2, [r1, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d103      	bne.n	8001e66 <I2C_ReadDeviceRegister+0x36>
 8001e5e:	f000 f9c1 	bl	80021e4 <IOE_TimeoutUserCallback>
 8001e62:	4603      	mov	r3, r0
 8001e64:	e0c0      	b.n	8001fe8 <I2C_ReadDeviceRegister+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 8001e66:	4964      	ldr	r1, [pc, #400]	; (8001ff8 <I2C_ReadDeviceRegister+0x1c8>)
 8001e68:	4861      	ldr	r0, [pc, #388]	; (8001ff0 <I2C_ReadDeviceRegister+0x1c0>)
 8001e6a:	f7fe ffd0 	bl	8000e0e <I2C_GetFlagStatus>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0ed      	beq.n	8001e50 <I2C_ReadDeviceRegister+0x20>
  }
  /* Disable Acknowledgement */
  I2C_AcknowledgeConfig(IOE_I2C, DISABLE);
 8001e74:	2100      	movs	r1, #0
 8001e76:	485e      	ldr	r0, [pc, #376]	; (8001ff0 <I2C_ReadDeviceRegister+0x1c0>)
 8001e78:	f7fe ff48 	bl	8000d0c <I2C_AcknowledgeConfig>
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2182      	movs	r1, #130	; 0x82
 8001e80:	485b      	ldr	r0, [pc, #364]	; (8001ff0 <I2C_ReadDeviceRegister+0x1c0>)
 8001e82:	f7fe ff25 	bl	8000cd0 <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
 8001e86:	4b5b      	ldr	r3, [pc, #364]	; (8001ff4 <I2C_ReadDeviceRegister+0x1c4>)
 8001e88:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001e8c:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 8001e8e:	e00a      	b.n	8001ea6 <I2C_ReadDeviceRegister+0x76>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8001e90:	4b58      	ldr	r3, [pc, #352]	; (8001ff4 <I2C_ReadDeviceRegister+0x1c4>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	1e5a      	subs	r2, r3, #1
 8001e96:	4957      	ldr	r1, [pc, #348]	; (8001ff4 <I2C_ReadDeviceRegister+0x1c4>)
 8001e98:	600a      	str	r2, [r1, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d103      	bne.n	8001ea6 <I2C_ReadDeviceRegister+0x76>
 8001e9e:	f000 f9a1 	bl	80021e4 <IOE_TimeoutUserCallback>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	e0a0      	b.n	8001fe8 <I2C_ReadDeviceRegister+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 8001ea6:	4955      	ldr	r1, [pc, #340]	; (8001ffc <I2C_ReadDeviceRegister+0x1cc>)
 8001ea8:	4851      	ldr	r0, [pc, #324]	; (8001ff0 <I2C_ReadDeviceRegister+0x1c0>)
 8001eaa:	f7fe ffb0 	bl	8000e0e <I2C_GetFlagStatus>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0ed      	beq.n	8001e90 <I2C_ReadDeviceRegister+0x60>
  }
  
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 8001eb4:	4b4e      	ldr	r3, [pc, #312]	; (8001ff0 <I2C_ReadDeviceRegister+0x1c0>)
 8001eb6:	8b1b      	ldrh	r3, [r3, #24]
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8001eb8:	4b4e      	ldr	r3, [pc, #312]	; (8001ff4 <I2C_ReadDeviceRegister+0x1c4>)
 8001eba:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001ebe:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 8001ec0:	e00a      	b.n	8001ed8 <I2C_ReadDeviceRegister+0xa8>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8001ec2:	4b4c      	ldr	r3, [pc, #304]	; (8001ff4 <I2C_ReadDeviceRegister+0x1c4>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	1e5a      	subs	r2, r3, #1
 8001ec8:	494a      	ldr	r1, [pc, #296]	; (8001ff4 <I2C_ReadDeviceRegister+0x1c4>)
 8001eca:	600a      	str	r2, [r1, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d103      	bne.n	8001ed8 <I2C_ReadDeviceRegister+0xa8>
 8001ed0:	f000 f988 	bl	80021e4 <IOE_TimeoutUserCallback>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	e087      	b.n	8001fe8 <I2C_ReadDeviceRegister+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 8001ed8:	4949      	ldr	r1, [pc, #292]	; (8002000 <I2C_ReadDeviceRegister+0x1d0>)
 8001eda:	4845      	ldr	r0, [pc, #276]	; (8001ff0 <I2C_ReadDeviceRegister+0x1c0>)
 8001edc:	f7fe ff97 	bl	8000e0e <I2C_GetFlagStatus>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0ed      	beq.n	8001ec2 <I2C_ReadDeviceRegister+0x92>
  }
  
  /* Transmit the first address for r/w operations */
  I2C_SendData(IOE_I2C, RegisterAddr);
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4841      	ldr	r0, [pc, #260]	; (8001ff0 <I2C_ReadDeviceRegister+0x1c0>)
 8001eec:	f7fe ff71 	bl	8000dd2 <I2C_SendData>
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8001ef0:	4b40      	ldr	r3, [pc, #256]	; (8001ff4 <I2C_ReadDeviceRegister+0x1c4>)
 8001ef2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001ef6:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE)) || (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF)))
 8001ef8:	e00a      	b.n	8001f10 <I2C_ReadDeviceRegister+0xe0>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8001efa:	4b3e      	ldr	r3, [pc, #248]	; (8001ff4 <I2C_ReadDeviceRegister+0x1c4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	1e5a      	subs	r2, r3, #1
 8001f00:	493c      	ldr	r1, [pc, #240]	; (8001ff4 <I2C_ReadDeviceRegister+0x1c4>)
 8001f02:	600a      	str	r2, [r1, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d103      	bne.n	8001f10 <I2C_ReadDeviceRegister+0xe0>
 8001f08:	f000 f96c 	bl	80021e4 <IOE_TimeoutUserCallback>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	e06b      	b.n	8001fe8 <I2C_ReadDeviceRegister+0x1b8>
  while ((!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE)) || (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF)))
 8001f10:	493b      	ldr	r1, [pc, #236]	; (8002000 <I2C_ReadDeviceRegister+0x1d0>)
 8001f12:	4837      	ldr	r0, [pc, #220]	; (8001ff0 <I2C_ReadDeviceRegister+0x1c0>)
 8001f14:	f7fe ff7b 	bl	8000e0e <I2C_GetFlagStatus>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0ed      	beq.n	8001efa <I2C_ReadDeviceRegister+0xca>
 8001f1e:	4939      	ldr	r1, [pc, #228]	; (8002004 <I2C_ReadDeviceRegister+0x1d4>)
 8001f20:	4833      	ldr	r0, [pc, #204]	; (8001ff0 <I2C_ReadDeviceRegister+0x1c0>)
 8001f22:	f7fe ff74 	bl	8000e0e <I2C_GetFlagStatus>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0e6      	beq.n	8001efa <I2C_ReadDeviceRegister+0xca>
  }
  
  /* Regenerate a start condition */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	4830      	ldr	r0, [pc, #192]	; (8001ff0 <I2C_ReadDeviceRegister+0x1c0>)
 8001f30:	f7fe fe8e 	bl	8000c50 <I2C_GenerateSTART>
  
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8001f34:	4b2f      	ldr	r3, [pc, #188]	; (8001ff4 <I2C_ReadDeviceRegister+0x1c4>)
 8001f36:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001f3a:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 8001f3c:	e00a      	b.n	8001f54 <I2C_ReadDeviceRegister+0x124>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8001f3e:	4b2d      	ldr	r3, [pc, #180]	; (8001ff4 <I2C_ReadDeviceRegister+0x1c4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	1e5a      	subs	r2, r3, #1
 8001f44:	492b      	ldr	r1, [pc, #172]	; (8001ff4 <I2C_ReadDeviceRegister+0x1c4>)
 8001f46:	600a      	str	r2, [r1, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d103      	bne.n	8001f54 <I2C_ReadDeviceRegister+0x124>
 8001f4c:	f000 f94a 	bl	80021e4 <IOE_TimeoutUserCallback>
 8001f50:	4603      	mov	r3, r0
 8001f52:	e049      	b.n	8001fe8 <I2C_ReadDeviceRegister+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 8001f54:	4928      	ldr	r1, [pc, #160]	; (8001ff8 <I2C_ReadDeviceRegister+0x1c8>)
 8001f56:	4826      	ldr	r0, [pc, #152]	; (8001ff0 <I2C_ReadDeviceRegister+0x1c0>)
 8001f58:	f7fe ff59 	bl	8000e0e <I2C_GetFlagStatus>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0ed      	beq.n	8001f3e <I2C_ReadDeviceRegister+0x10e>
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
 8001f62:	2201      	movs	r2, #1
 8001f64:	2182      	movs	r1, #130	; 0x82
 8001f66:	4822      	ldr	r0, [pc, #136]	; (8001ff0 <I2C_ReadDeviceRegister+0x1c0>)
 8001f68:	f7fe feb2 	bl	8000cd0 <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8001f6c:	4b21      	ldr	r3, [pc, #132]	; (8001ff4 <I2C_ReadDeviceRegister+0x1c4>)
 8001f6e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001f72:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 8001f74:	e00a      	b.n	8001f8c <I2C_ReadDeviceRegister+0x15c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8001f76:	4b1f      	ldr	r3, [pc, #124]	; (8001ff4 <I2C_ReadDeviceRegister+0x1c4>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	1e5a      	subs	r2, r3, #1
 8001f7c:	491d      	ldr	r1, [pc, #116]	; (8001ff4 <I2C_ReadDeviceRegister+0x1c4>)
 8001f7e:	600a      	str	r2, [r1, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d103      	bne.n	8001f8c <I2C_ReadDeviceRegister+0x15c>
 8001f84:	f000 f92e 	bl	80021e4 <IOE_TimeoutUserCallback>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	e02d      	b.n	8001fe8 <I2C_ReadDeviceRegister+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 8001f8c:	491b      	ldr	r1, [pc, #108]	; (8001ffc <I2C_ReadDeviceRegister+0x1cc>)
 8001f8e:	4818      	ldr	r0, [pc, #96]	; (8001ff0 <I2C_ReadDeviceRegister+0x1c0>)
 8001f90:	f7fe ff3d 	bl	8000e0e <I2C_GetFlagStatus>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0ed      	beq.n	8001f76 <I2C_ReadDeviceRegister+0x146>
  }
  
    /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 8001f9a:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <I2C_ReadDeviceRegister+0x1c0>)
 8001f9c:	8b1b      	ldrh	r3, [r3, #24]
  
  /* Test on EV7 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8001f9e:	4b15      	ldr	r3, [pc, #84]	; (8001ff4 <I2C_ReadDeviceRegister+0x1c4>)
 8001fa0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001fa4:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_RXNE))
 8001fa6:	e00a      	b.n	8001fbe <I2C_ReadDeviceRegister+0x18e>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <I2C_ReadDeviceRegister+0x1c4>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	1e5a      	subs	r2, r3, #1
 8001fae:	4911      	ldr	r1, [pc, #68]	; (8001ff4 <I2C_ReadDeviceRegister+0x1c4>)
 8001fb0:	600a      	str	r2, [r1, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d103      	bne.n	8001fbe <I2C_ReadDeviceRegister+0x18e>
 8001fb6:	f000 f915 	bl	80021e4 <IOE_TimeoutUserCallback>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	e014      	b.n	8001fe8 <I2C_ReadDeviceRegister+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_RXNE))
 8001fbe:	4912      	ldr	r1, [pc, #72]	; (8002008 <I2C_ReadDeviceRegister+0x1d8>)
 8001fc0:	480b      	ldr	r0, [pc, #44]	; (8001ff0 <I2C_ReadDeviceRegister+0x1c0>)
 8001fc2:	f7fe ff24 	bl	8000e0e <I2C_GetFlagStatus>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0ed      	beq.n	8001fa8 <I2C_ReadDeviceRegister+0x178>
  }
  
  /* End the configuration sequence */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 8001fcc:	2101      	movs	r1, #1
 8001fce:	4808      	ldr	r0, [pc, #32]	; (8001ff0 <I2C_ReadDeviceRegister+0x1c0>)
 8001fd0:	f7fe fe5e 	bl	8000c90 <I2C_GenerateSTOP>
  
  /* Load the register value */
  tmp = I2C_ReceiveData(IOE_I2C);
 8001fd4:	4806      	ldr	r0, [pc, #24]	; (8001ff0 <I2C_ReadDeviceRegister+0x1c0>)
 8001fd6:	f7fe ff0c 	bl	8000df2 <I2C_ReceiveData>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	73fb      	strb	r3, [r7, #15]
  
  /* Enable Acknowledgement */
  I2C_AcknowledgeConfig(IOE_I2C, ENABLE);
 8001fde:	2101      	movs	r1, #1
 8001fe0:	4803      	ldr	r0, [pc, #12]	; (8001ff0 <I2C_ReadDeviceRegister+0x1c0>)
 8001fe2:	f7fe fe93 	bl	8000d0c <I2C_AcknowledgeConfig>
  
  /* Return the read value */
  return tmp;
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40005c00 	.word	0x40005c00
 8001ff4:	20000020 	.word	0x20000020
 8001ff8:	10000001 	.word	0x10000001
 8001ffc:	10000002 	.word	0x10000002
 8002000:	10000080 	.word	0x10000080
 8002004:	10000004 	.word	0x10000004
 8002008:	10000040 	.word	0x10000040

0800200c <I2C_ReadDataBuffer>:
  *         or IOE_2_ADDR. 
  * @param  RegisterAddr: The target register adress (between 00x and 0x24)
  * @retval The data in the buffer containing the two returned bytes (in halfword).   
  */
uint16_t I2C_ReadDataBuffer(uint32_t RegisterAddr)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint8_t IOE_BufferRX[2] = {0x00, 0x00};  
 8002014:	2300      	movs	r3, #0
 8002016:	733b      	strb	r3, [r7, #12]
 8002018:	2300      	movs	r3, #0
 800201a:	737b      	strb	r3, [r7, #13]
  
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800201c:	2101      	movs	r1, #1
 800201e:	486b      	ldr	r0, [pc, #428]	; (80021cc <I2C_ReadDataBuffer+0x1c0>)
 8002020:	f7fe fe16 	bl	8000c50 <I2C_GenerateSTART>
 
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8002024:	4b6a      	ldr	r3, [pc, #424]	; (80021d0 <I2C_ReadDataBuffer+0x1c4>)
 8002026:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800202a:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800202c:	e00b      	b.n	8002046 <I2C_ReadDataBuffer+0x3a>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800202e:	4b68      	ldr	r3, [pc, #416]	; (80021d0 <I2C_ReadDataBuffer+0x1c4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	1e5a      	subs	r2, r3, #1
 8002034:	4966      	ldr	r1, [pc, #408]	; (80021d0 <I2C_ReadDataBuffer+0x1c4>)
 8002036:	600a      	str	r2, [r1, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d104      	bne.n	8002046 <I2C_ReadDataBuffer+0x3a>
 800203c:	f000 f8d2 	bl	80021e4 <IOE_TimeoutUserCallback>
 8002040:	4603      	mov	r3, r0
 8002042:	b29b      	uxth	r3, r3
 8002044:	e0be      	b.n	80021c4 <I2C_ReadDataBuffer+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 8002046:	4963      	ldr	r1, [pc, #396]	; (80021d4 <I2C_ReadDataBuffer+0x1c8>)
 8002048:	4860      	ldr	r0, [pc, #384]	; (80021cc <I2C_ReadDataBuffer+0x1c0>)
 800204a:	f7fe fee0 	bl	8000e0e <I2C_GetFlagStatus>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0ec      	beq.n	800202e <I2C_ReadDataBuffer+0x22>
  }
   
  /* Send device address for write */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 8002054:	2200      	movs	r2, #0
 8002056:	2182      	movs	r1, #130	; 0x82
 8002058:	485c      	ldr	r0, [pc, #368]	; (80021cc <I2C_ReadDataBuffer+0x1c0>)
 800205a:	f7fe fe39 	bl	8000cd0 <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
 800205e:	4b5c      	ldr	r3, [pc, #368]	; (80021d0 <I2C_ReadDataBuffer+0x1c4>)
 8002060:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002064:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 8002066:	e00b      	b.n	8002080 <I2C_ReadDataBuffer+0x74>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8002068:	4b59      	ldr	r3, [pc, #356]	; (80021d0 <I2C_ReadDataBuffer+0x1c4>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	1e5a      	subs	r2, r3, #1
 800206e:	4958      	ldr	r1, [pc, #352]	; (80021d0 <I2C_ReadDataBuffer+0x1c4>)
 8002070:	600a      	str	r2, [r1, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d104      	bne.n	8002080 <I2C_ReadDataBuffer+0x74>
 8002076:	f000 f8b5 	bl	80021e4 <IOE_TimeoutUserCallback>
 800207a:	4603      	mov	r3, r0
 800207c:	b29b      	uxth	r3, r3
 800207e:	e0a1      	b.n	80021c4 <I2C_ReadDataBuffer+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 8002080:	4955      	ldr	r1, [pc, #340]	; (80021d8 <I2C_ReadDataBuffer+0x1cc>)
 8002082:	4852      	ldr	r0, [pc, #328]	; (80021cc <I2C_ReadDataBuffer+0x1c0>)
 8002084:	f7fe fec3 	bl	8000e0e <I2C_GetFlagStatus>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0ec      	beq.n	8002068 <I2C_ReadDataBuffer+0x5c>
  }
  
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 800208e:	4b4f      	ldr	r3, [pc, #316]	; (80021cc <I2C_ReadDataBuffer+0x1c0>)
 8002090:	8b1b      	ldrh	r3, [r3, #24]
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8002092:	4b4f      	ldr	r3, [pc, #316]	; (80021d0 <I2C_ReadDataBuffer+0x1c4>)
 8002094:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002098:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800209a:	e00b      	b.n	80020b4 <I2C_ReadDataBuffer+0xa8>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800209c:	4b4c      	ldr	r3, [pc, #304]	; (80021d0 <I2C_ReadDataBuffer+0x1c4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	1e5a      	subs	r2, r3, #1
 80020a2:	494b      	ldr	r1, [pc, #300]	; (80021d0 <I2C_ReadDataBuffer+0x1c4>)
 80020a4:	600a      	str	r2, [r1, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d104      	bne.n	80020b4 <I2C_ReadDataBuffer+0xa8>
 80020aa:	f000 f89b 	bl	80021e4 <IOE_TimeoutUserCallback>
 80020ae:	4603      	mov	r3, r0
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	e087      	b.n	80021c4 <I2C_ReadDataBuffer+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 80020b4:	4949      	ldr	r1, [pc, #292]	; (80021dc <I2C_ReadDataBuffer+0x1d0>)
 80020b6:	4845      	ldr	r0, [pc, #276]	; (80021cc <I2C_ReadDataBuffer+0x1c0>)
 80020b8:	f7fe fea9 	bl	8000e0e <I2C_GetFlagStatus>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0ec      	beq.n	800209c <I2C_ReadDataBuffer+0x90>
  }
  
  /* Send the device's internal address to write to */
  I2C_SendData(IOE_I2C, RegisterAddr);  
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	4619      	mov	r1, r3
 80020c8:	4840      	ldr	r0, [pc, #256]	; (80021cc <I2C_ReadDataBuffer+0x1c0>)
 80020ca:	f7fe fe82 	bl	8000dd2 <I2C_SendData>
    
  /* Send START condition a second time */  
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 80020ce:	2101      	movs	r1, #1
 80020d0:	483e      	ldr	r0, [pc, #248]	; (80021cc <I2C_ReadDataBuffer+0x1c0>)
 80020d2:	f7fe fdbd 	bl	8000c50 <I2C_GenerateSTART>
  
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 80020d6:	4b3e      	ldr	r3, [pc, #248]	; (80021d0 <I2C_ReadDataBuffer+0x1c4>)
 80020d8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80020dc:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 80020de:	e00b      	b.n	80020f8 <I2C_ReadDataBuffer+0xec>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 80020e0:	4b3b      	ldr	r3, [pc, #236]	; (80021d0 <I2C_ReadDataBuffer+0x1c4>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	1e5a      	subs	r2, r3, #1
 80020e6:	493a      	ldr	r1, [pc, #232]	; (80021d0 <I2C_ReadDataBuffer+0x1c4>)
 80020e8:	600a      	str	r2, [r1, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d104      	bne.n	80020f8 <I2C_ReadDataBuffer+0xec>
 80020ee:	f000 f879 	bl	80021e4 <IOE_TimeoutUserCallback>
 80020f2:	4603      	mov	r3, r0
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	e065      	b.n	80021c4 <I2C_ReadDataBuffer+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 80020f8:	4936      	ldr	r1, [pc, #216]	; (80021d4 <I2C_ReadDataBuffer+0x1c8>)
 80020fa:	4834      	ldr	r0, [pc, #208]	; (80021cc <I2C_ReadDataBuffer+0x1c0>)
 80020fc:	f7fe fe87 	bl	8000e0e <I2C_GetFlagStatus>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0ec      	beq.n	80020e0 <I2C_ReadDataBuffer+0xd4>
  }
  
  /* Send IO Expander address for read */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
 8002106:	2201      	movs	r2, #1
 8002108:	2182      	movs	r1, #130	; 0x82
 800210a:	4830      	ldr	r0, [pc, #192]	; (80021cc <I2C_ReadDataBuffer+0x1c0>)
 800210c:	f7fe fde0 	bl	8000cd0 <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8002110:	4b2f      	ldr	r3, [pc, #188]	; (80021d0 <I2C_ReadDataBuffer+0x1c4>)
 8002112:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002116:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 8002118:	e00b      	b.n	8002132 <I2C_ReadDataBuffer+0x126>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800211a:	4b2d      	ldr	r3, [pc, #180]	; (80021d0 <I2C_ReadDataBuffer+0x1c4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	1e5a      	subs	r2, r3, #1
 8002120:	492b      	ldr	r1, [pc, #172]	; (80021d0 <I2C_ReadDataBuffer+0x1c4>)
 8002122:	600a      	str	r2, [r1, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d104      	bne.n	8002132 <I2C_ReadDataBuffer+0x126>
 8002128:	f000 f85c 	bl	80021e4 <IOE_TimeoutUserCallback>
 800212c:	4603      	mov	r3, r0
 800212e:	b29b      	uxth	r3, r3
 8002130:	e048      	b.n	80021c4 <I2C_ReadDataBuffer+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 8002132:	4929      	ldr	r1, [pc, #164]	; (80021d8 <I2C_ReadDataBuffer+0x1cc>)
 8002134:	4825      	ldr	r0, [pc, #148]	; (80021cc <I2C_ReadDataBuffer+0x1c0>)
 8002136:	f7fe fe6a 	bl	8000e0e <I2C_GetFlagStatus>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0ec      	beq.n	800211a <I2C_ReadDataBuffer+0x10e>
  }
 
  /* Disable Acknowledgement and set Pos bit */
  I2C_AcknowledgeConfig(IOE_I2C, DISABLE);       
 8002140:	2100      	movs	r1, #0
 8002142:	4822      	ldr	r0, [pc, #136]	; (80021cc <I2C_ReadDataBuffer+0x1c0>)
 8002144:	f7fe fde2 	bl	8000d0c <I2C_AcknowledgeConfig>
  I2C_NACKPositionConfig(IOE_I2C, I2C_NACKPosition_Next);
 8002148:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800214c:	481f      	ldr	r0, [pc, #124]	; (80021cc <I2C_ReadDataBuffer+0x1c0>)
 800214e:	f7fe fe1f 	bl	8000d90 <I2C_NACKPositionConfig>
  
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 8002152:	4b1e      	ldr	r3, [pc, #120]	; (80021cc <I2C_ReadDataBuffer+0x1c0>)
 8002154:	8b1b      	ldrh	r3, [r3, #24]

  /* Test on EV7 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8002156:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <I2C_ReadDataBuffer+0x1c4>)
 8002158:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800215c:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF))
 800215e:	e00b      	b.n	8002178 <I2C_ReadDataBuffer+0x16c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8002160:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <I2C_ReadDataBuffer+0x1c4>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	1e5a      	subs	r2, r3, #1
 8002166:	491a      	ldr	r1, [pc, #104]	; (80021d0 <I2C_ReadDataBuffer+0x1c4>)
 8002168:	600a      	str	r2, [r1, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d104      	bne.n	8002178 <I2C_ReadDataBuffer+0x16c>
 800216e:	f000 f839 	bl	80021e4 <IOE_TimeoutUserCallback>
 8002172:	4603      	mov	r3, r0
 8002174:	b29b      	uxth	r3, r3
 8002176:	e025      	b.n	80021c4 <I2C_ReadDataBuffer+0x1b8>
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF))
 8002178:	4919      	ldr	r1, [pc, #100]	; (80021e0 <I2C_ReadDataBuffer+0x1d4>)
 800217a:	4814      	ldr	r0, [pc, #80]	; (80021cc <I2C_ReadDataBuffer+0x1c0>)
 800217c:	f7fe fe47 	bl	8000e0e <I2C_GetFlagStatus>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0ec      	beq.n	8002160 <I2C_ReadDataBuffer+0x154>
  }
 
  /* Send STOP Condition */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 8002186:	2101      	movs	r1, #1
 8002188:	4810      	ldr	r0, [pc, #64]	; (80021cc <I2C_ReadDataBuffer+0x1c0>)
 800218a:	f7fe fd81 	bl	8000c90 <I2C_GenerateSTOP>
   
  /* Read the first byte from the IO Expander */
  IOE_BufferRX[1] = I2C_ReceiveData(IOE_I2C);
 800218e:	480f      	ldr	r0, [pc, #60]	; (80021cc <I2C_ReadDataBuffer+0x1c0>)
 8002190:	f7fe fe2f 	bl	8000df2 <I2C_ReceiveData>
 8002194:	4603      	mov	r3, r0
 8002196:	737b      	strb	r3, [r7, #13]
    
  /* Read the second byte from the IO Expander */
  IOE_BufferRX[0] = I2C_ReceiveData(IOE_I2C);
 8002198:	480c      	ldr	r0, [pc, #48]	; (80021cc <I2C_ReadDataBuffer+0x1c0>)
 800219a:	f7fe fe2a 	bl	8000df2 <I2C_ReceiveData>
 800219e:	4603      	mov	r3, r0
 80021a0:	733b      	strb	r3, [r7, #12]
                                         
  /* Enable Acknowledgement and reset POS bit to be ready for another reception */
  I2C_AcknowledgeConfig(IOE_I2C, ENABLE);
 80021a2:	2101      	movs	r1, #1
 80021a4:	4809      	ldr	r0, [pc, #36]	; (80021cc <I2C_ReadDataBuffer+0x1c0>)
 80021a6:	f7fe fdb1 	bl	8000d0c <I2C_AcknowledgeConfig>
  I2C_NACKPositionConfig(IOE_I2C, I2C_NACKPosition_Current);
 80021aa:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 80021ae:	4807      	ldr	r0, [pc, #28]	; (80021cc <I2C_ReadDataBuffer+0x1c0>)
 80021b0:	f7fe fdee 	bl	8000d90 <I2C_NACKPositionConfig>
   
  /* return the data */
  return ((uint16_t) IOE_BufferRX[0] | ((uint16_t)IOE_BufferRX[1]<< 8));
 80021b4:	7b3b      	ldrb	r3, [r7, #12]
 80021b6:	b21a      	sxth	r2, r3
 80021b8:	7b7b      	ldrb	r3, [r7, #13]
 80021ba:	021b      	lsls	r3, r3, #8
 80021bc:	b21b      	sxth	r3, r3
 80021be:	4313      	orrs	r3, r2
 80021c0:	b21b      	sxth	r3, r3
 80021c2:	b29b      	uxth	r3, r3
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40005c00 	.word	0x40005c00
 80021d0:	20000020 	.word	0x20000020
 80021d4:	10000001 	.word	0x10000001
 80021d8:	10000002 	.word	0x10000002
 80021dc:	10000080 	.word	0x10000080
 80021e0:	10000004 	.word	0x10000004

080021e4 <IOE_TimeoutUserCallback>:
  * @brief  IOE_TIMEOUT_UserCallback
  * @param  None
  * @retval 0
  */
uint8_t IOE_TimeoutUserCallback(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
  I2C_InitTypeDef I2C_InitStructure;

  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 80021ea:	2101      	movs	r1, #1
 80021ec:	4816      	ldr	r0, [pc, #88]	; (8002248 <IOE_TimeoutUserCallback+0x64>)
 80021ee:	f7fe fd4f 	bl	8000c90 <I2C_GenerateSTOP>
  I2C_SoftwareResetCmd(IOE_I2C, ENABLE);
 80021f2:	2101      	movs	r1, #1
 80021f4:	4814      	ldr	r0, [pc, #80]	; (8002248 <IOE_TimeoutUserCallback+0x64>)
 80021f6:	f7fe fda9 	bl	8000d4c <I2C_SoftwareResetCmd>
  I2C_SoftwareResetCmd(IOE_I2C, DISABLE);
 80021fa:	2100      	movs	r1, #0
 80021fc:	4812      	ldr	r0, [pc, #72]	; (8002248 <IOE_TimeoutUserCallback+0x64>)
 80021fe:	f7fe fda5 	bl	8000d4c <I2C_SoftwareResetCmd>
  
  IOE_GPIO_Config();
 8002202:	f7ff fcfb 	bl	8001bfc <IOE_GPIO_Config>

  /* CODEC_I2C peripheral configuration */
  I2C_DeInit(IOE_I2C);
 8002206:	4810      	ldr	r0, [pc, #64]	; (8002248 <IOE_TimeoutUserCallback+0x64>)
 8002208:	f7fe fc06 	bl	8000a18 <I2C_DeInit>
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800220c:	2300      	movs	r3, #0
 800220e:	80bb      	strh	r3, [r7, #4]
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8002210:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8002214:	80fb      	strh	r3, [r7, #6]
  I2C_InitStructure.I2C_OwnAddress1 = 0x33;
 8002216:	2333      	movs	r3, #51	; 0x33
 8002218:	813b      	strh	r3, [r7, #8]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 800221a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800221e:	817b      	strh	r3, [r7, #10]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8002220:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002224:	81bb      	strh	r3, [r7, #12]
  I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 8002226:	4b09      	ldr	r3, [pc, #36]	; (800224c <IOE_TimeoutUserCallback+0x68>)
 8002228:	603b      	str	r3, [r7, #0]
  
  /* Enable the I2C peripheral */
  I2C_Cmd(IOE_I2C, ENABLE);  
 800222a:	2101      	movs	r1, #1
 800222c:	4806      	ldr	r0, [pc, #24]	; (8002248 <IOE_TimeoutUserCallback+0x64>)
 800222e:	f7fe fcef 	bl	8000c10 <I2C_Cmd>
  I2C_Init(IOE_I2C, &I2C_InitStructure);
 8002232:	463b      	mov	r3, r7
 8002234:	4619      	mov	r1, r3
 8002236:	4804      	ldr	r0, [pc, #16]	; (8002248 <IOE_TimeoutUserCallback+0x64>)
 8002238:	f7fe fc28 	bl	8000a8c <I2C_Init>
  
  return 0;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40005c00 	.word	0x40005c00
 800224c:	000186a0 	.word	0x000186a0

08002250 <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
  for(index = (100000 * nCount); index != 0; index--)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a08      	ldr	r2, [pc, #32]	; (8002280 <delay+0x30>)
 8002260:	fb02 f303 	mul.w	r3, r2, r3
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	e002      	b.n	800226e <delay+0x1e>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	3b01      	subs	r3, #1
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f9      	bne.n	8002268 <delay+0x18>
  {
  }
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	000186a0 	.word	0x000186a0

08002284 <LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval None
  */
void LCD_Init(void)
{ 
 8002284:	b580      	push	{r7, lr}
 8002286:	b092      	sub	sp, #72	; 0x48
 8002288:	af00      	add	r7, sp, #0
  LTDC_InitTypeDef       LTDC_InitStruct;
  GPIO_InitTypeDef       GPIO_InitStructure;
  
  /* Enable clock for NCS port */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800228a:	2101      	movs	r1, #1
 800228c:	2008      	movs	r0, #8
 800228e:	f7ff f8cb 	bl	8001428 <RCC_AHB1PeriphClockCmd>
  
  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8002292:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002296:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002298:	2302      	movs	r3, #2
 800229a:	727b      	strb	r3, [r7, #9]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800229c:	2301      	movs	r3, #1
 800229e:	723b      	strb	r3, [r7, #8]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80022a0:	2300      	movs	r3, #0
 80022a2:	72bb      	strb	r3, [r7, #10]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	72fb      	strb	r3, [r7, #11]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 80022a8:	1d3b      	adds	r3, r7, #4
 80022aa:	4619      	mov	r1, r3
 80022ac:	482d      	ldr	r0, [pc, #180]	; (8002364 <LCD_Init+0xe0>)
 80022ae:	f7fe faa5 	bl	80007fc <GPIO_Init>
  
  /* Configure the LCD Control pins ------------------------------------------*/
  LCD_CtrlLinesConfig();
 80022b2:	f000 fc49 	bl	8002b48 <LCD_CtrlLinesConfig>
  LCD_ChipSelect(DISABLE);
 80022b6:	2000      	movs	r0, #0
 80022b8:	f000 f8b2 	bl	8002420 <LCD_ChipSelect>
  LCD_ChipSelect(ENABLE);
 80022bc:	2001      	movs	r0, #1
 80022be:	f000 f8af 	bl	8002420 <LCD_ChipSelect>
  
  /* Configure the LCD_SPI interface -----------------------------------------*/
  LCD_SPIConfig(); 
 80022c2:	f000 fc75 	bl	8002bb0 <LCD_SPIConfig>
  
  /* Power on the LCD --------------------------------------------------------*/
  LCD_PowerOn();
 80022c6:	f000 faf7 	bl	80028b8 <LCD_PowerOn>
  
  /* Enable the LTDC Clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_LTDC, ENABLE);
 80022ca:	2101      	movs	r1, #1
 80022cc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80022d0:	f7ff f90a 	bl	80014e8 <RCC_APB2PeriphClockCmd>
  
  /* Enable the DMA2D Clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2D, ENABLE); 
 80022d4:	2101      	movs	r1, #1
 80022d6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80022da:	f7ff f8a5 	bl	8001428 <RCC_AHB1PeriphClockCmd>
  
  /* Configure the LCD Control pins */
  LCD_AF_GPIOConfig();  
 80022de:	f000 fccb 	bl	8002c78 <LCD_AF_GPIOConfig>
  
  /* Configure the FMC Parallel interface : SDRAM is used as Frame Buffer for LCD */
  SDRAM_Init();
 80022e2:	f000 fd9a 	bl	8002e1a <SDRAM_Init>
  
  /* LTDC Configuration *********************************************************/  
  /* Polarity configuration */
  /* Initialize the horizontal synchronization polarity as active low */
  LTDC_InitStruct.LTDC_HSPolarity = LTDC_HSPolarity_AL;     
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
  /* Initialize the vertical synchronization polarity as active low */  
  LTDC_InitStruct.LTDC_VSPolarity = LTDC_VSPolarity_AL;     
 80022ea:	2300      	movs	r3, #0
 80022ec:	613b      	str	r3, [r7, #16]
  /* Initialize the data enable polarity as active low */
  LTDC_InitStruct.LTDC_DEPolarity = LTDC_DEPolarity_AL;     
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  /* Initialize the pixel clock polarity as input pixel clock */ 
  LTDC_InitStruct.LTDC_PCPolarity = LTDC_PCPolarity_IPC;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
  
  /* Configure R,G,B component values for LCD background color */                   
  LTDC_InitStruct.LTDC_BackgroundRedValue = 0;            
 80022f6:	2300      	movs	r3, #0
 80022f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  LTDC_InitStruct.LTDC_BackgroundGreenValue = 0;          
 80022fa:	2300      	movs	r3, #0
 80022fc:	643b      	str	r3, [r7, #64]	; 0x40
  LTDC_InitStruct.LTDC_BackgroundBlueValue = 0;  
 80022fe:	2300      	movs	r3, #0
 8002300:	647b      	str	r3, [r7, #68]	; 0x44
  /* Enable Pixel Clock */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAI_N = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAI_R = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / RCC_PLLSAIDivR = 48/8 = 6 Mhz */
  RCC_PLLSAIConfig(192, 7, 4);
 8002302:	2204      	movs	r2, #4
 8002304:	2107      	movs	r1, #7
 8002306:	20c0      	movs	r0, #192	; 0xc0
 8002308:	f7fe ff72 	bl	80011f0 <RCC_PLLSAIConfig>
  RCC_LTDCCLKDivConfig(RCC_PLLSAIDivR_Div8);
 800230c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002310:	f7ff f86c 	bl	80013ec <RCC_LTDCCLKDivConfig>
  
  /* Enable PLLSAI Clock */
  RCC_PLLSAICmd(ENABLE);
 8002314:	2001      	movs	r0, #1
 8002316:	f7fe ff85 	bl	8001224 <RCC_PLLSAICmd>
  /* Wait for PLLSAI activation */
  while(RCC_GetFlagStatus(RCC_FLAG_PLLSAIRDY) == RESET)
 800231a:	bf00      	nop
 800231c:	203d      	movs	r0, #61	; 0x3d
 800231e:	f7ff f963 	bl	80015e8 <RCC_GetFlagStatus>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0f9      	beq.n	800231c <LCD_Init+0x98>
  {
  }
  
  /* Timing configuration */  
  /* Configure horizontal synchronization width */     
  LTDC_InitStruct.LTDC_HorizontalSync = 9;
 8002328:	2309      	movs	r3, #9
 800232a:	61fb      	str	r3, [r7, #28]
  /* Configure vertical synchronization height */
  LTDC_InitStruct.LTDC_VerticalSync = 1;
 800232c:	2301      	movs	r3, #1
 800232e:	623b      	str	r3, [r7, #32]
  /* Configure accumulated horizontal back porch */
  LTDC_InitStruct.LTDC_AccumulatedHBP = 29; 
 8002330:	231d      	movs	r3, #29
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure accumulated vertical back porch */
  LTDC_InitStruct.LTDC_AccumulatedVBP = 3;  
 8002334:	2303      	movs	r3, #3
 8002336:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Configure accumulated active width */  
  LTDC_InitStruct.LTDC_AccumulatedActiveW = 269;
 8002338:	f240 130d 	movw	r3, #269	; 0x10d
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure accumulated active height */
  LTDC_InitStruct.LTDC_AccumulatedActiveH = 323;
 800233e:	f240 1343 	movw	r3, #323	; 0x143
 8002342:	633b      	str	r3, [r7, #48]	; 0x30
  /* Configure total width */
  LTDC_InitStruct.LTDC_TotalWidth = 279; 
 8002344:	f240 1317 	movw	r3, #279	; 0x117
 8002348:	637b      	str	r3, [r7, #52]	; 0x34
  /* Configure total height */
  LTDC_InitStruct.LTDC_TotalHeigh = 327;
 800234a:	f240 1347 	movw	r3, #327	; 0x147
 800234e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  LTDC_Init(&LTDC_InitStruct);
 8002350:	f107 030c 	add.w	r3, r7, #12
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe fd8d 	bl	8000e74 <LTDC_Init>
}  
 800235a:	bf00      	nop
 800235c:	3748      	adds	r7, #72	; 0x48
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40020c00 	.word	0x40020c00

08002368 <LCD_LayerInit>:
  * @brief  Initializes the LCD Layers.
  * @param  None
  * @retval None
  */
void LCD_LayerInit(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b090      	sub	sp, #64	; 0x40
 800236c:	af00      	add	r7, sp, #0
  /* In this case all the active display area is used to display a picture then :
  Horizontal start = horizontal synchronization + Horizontal back porch = 30 
  Horizontal stop = Horizontal start + window width -1 = 30 + 240 -1
  Vertical start   = vertical synchronization + vertical back porch     = 4
  Vertical stop   = Vertical start + window height -1  = 4 + 320 -1      */      
  LTDC_Layer_InitStruct.LTDC_HorizontalStart = 30;
 800236e:	231e      	movs	r3, #30
 8002370:	603b      	str	r3, [r7, #0]
  LTDC_Layer_InitStruct.LTDC_HorizontalStop = (LCD_PIXEL_WIDTH + 30 - 1); 
 8002372:	f240 130d 	movw	r3, #269	; 0x10d
 8002376:	607b      	str	r3, [r7, #4]
  LTDC_Layer_InitStruct.LTDC_VerticalStart = 4;
 8002378:	2304      	movs	r3, #4
 800237a:	60bb      	str	r3, [r7, #8]
  LTDC_Layer_InitStruct.LTDC_VerticalStop = (LCD_PIXEL_HEIGHT + 4 - 1);
 800237c:	f240 1343 	movw	r3, #323	; 0x143
 8002380:	60fb      	str	r3, [r7, #12]
  
  /* Pixel Format configuration*/
  LTDC_Layer_InitStruct.LTDC_PixelFormat = LTDC_Pixelformat_RGB565;
 8002382:	2302      	movs	r3, #2
 8002384:	613b      	str	r3, [r7, #16]
  /* Alpha constant (255 totally opaque) */
  LTDC_Layer_InitStruct.LTDC_ConstantAlpha = 255; 
 8002386:	23ff      	movs	r3, #255	; 0xff
 8002388:	617b      	str	r3, [r7, #20]
  /* Default Color configuration (configure A,R,G,B component values) */          
  LTDC_Layer_InitStruct.LTDC_DefaultColorBlue = 0;        
 800238a:	2300      	movs	r3, #0
 800238c:	61bb      	str	r3, [r7, #24]
  LTDC_Layer_InitStruct.LTDC_DefaultColorGreen = 0;       
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
  LTDC_Layer_InitStruct.LTDC_DefaultColorRed = 0;         
 8002392:	2300      	movs	r3, #0
 8002394:	623b      	str	r3, [r7, #32]
  LTDC_Layer_InitStruct.LTDC_DefaultColorAlpha = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure blending factors */       
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_CA;    
 800239a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_CA;
 80023a0:	2305      	movs	r3, #5
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* the length of one line of pixels in bytes + 3 then :
  Line Lenth = Active high width x number of bytes per pixel + 3 
  Active high width         = LCD_PIXEL_WIDTH 
  number of bytes per pixel = 2    (pixel_format : RGB565) 
  */
  LTDC_Layer_InitStruct.LTDC_CFBLineLength = ((LCD_PIXEL_WIDTH * 2) + 3);
 80023a4:	f240 13e3 	movw	r3, #483	; 0x1e3
 80023a8:	637b      	str	r3, [r7, #52]	; 0x34
  /* the pitch is the increment from the start of one line of pixels to the 
  start of the next line in bytes, then :
  Pitch = Active high width x number of bytes per pixel */ 
  LTDC_Layer_InitStruct.LTDC_CFBPitch = (LCD_PIXEL_WIDTH * 2);
 80023aa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80023ae:	63bb      	str	r3, [r7, #56]	; 0x38
  
  /* Configure the number of lines */  
  LTDC_Layer_InitStruct.LTDC_CFBLineNumber = LCD_PIXEL_HEIGHT;
 80023b0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80023b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Start Address configuration : the LCD Frame buffer is defined on SDRAM */    
  LTDC_Layer_InitStruct.LTDC_CFBStartAdress = LCD_FRAME_BUFFER;
 80023b6:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80023ba:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize LTDC layer 1 */
  LTDC_LayerInit(LTDC_Layer1, &LTDC_Layer_InitStruct);
 80023bc:	463b      	mov	r3, r7
 80023be:	4619      	mov	r1, r3
 80023c0:	4813      	ldr	r0, [pc, #76]	; (8002410 <LCD_LayerInit+0xa8>)
 80023c2:	f7fe fe3b 	bl	800103c <LTDC_LayerInit>
  
  /* Configure Layer2 */
  /* Start Address configuration : the LCD Frame buffer is defined on SDRAM w/ Offset */     
  LTDC_Layer_InitStruct.LTDC_CFBStartAdress = LCD_FRAME_BUFFER + BUFFER_OFFSET;
 80023c6:	4b13      	ldr	r3, [pc, #76]	; (8002414 <LCD_LayerInit+0xac>)
 80023c8:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Configure blending factors */       
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;    
 80023ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023ce:	62bb      	str	r3, [r7, #40]	; 0x28
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
 80023d0:	2307      	movs	r3, #7
 80023d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Initialize LTDC layer 2 */
  LTDC_LayerInit(LTDC_Layer2, &LTDC_Layer_InitStruct);
 80023d4:	463b      	mov	r3, r7
 80023d6:	4619      	mov	r1, r3
 80023d8:	480f      	ldr	r0, [pc, #60]	; (8002418 <LCD_LayerInit+0xb0>)
 80023da:	f7fe fe2f 	bl	800103c <LTDC_LayerInit>
  
  /* LTDC configuration reload */  
  LTDC_ReloadConfig(LTDC_IMReload);
 80023de:	2001      	movs	r0, #1
 80023e0:	f7fe fe1c 	bl	800101c <LTDC_ReloadConfig>
  
  /* Enable foreground & background Layers */
  LTDC_LayerCmd(LTDC_Layer1, ENABLE); 
 80023e4:	2101      	movs	r1, #1
 80023e6:	480a      	ldr	r0, [pc, #40]	; (8002410 <LCD_LayerInit+0xa8>)
 80023e8:	f7fe fec2 	bl	8001170 <LTDC_LayerCmd>
  LTDC_LayerCmd(LTDC_Layer2, ENABLE);
 80023ec:	2101      	movs	r1, #1
 80023ee:	480a      	ldr	r0, [pc, #40]	; (8002418 <LCD_LayerInit+0xb0>)
 80023f0:	f7fe febe 	bl	8001170 <LTDC_LayerCmd>
  
  /* LTDC configuration reload */  
  LTDC_ReloadConfig(LTDC_IMReload);
 80023f4:	2001      	movs	r0, #1
 80023f6:	f7fe fe11 	bl	800101c <LTDC_ReloadConfig>
  
  /* Set default font */    
  LCD_SetFont(&LCD_DEFAULT_FONT); 
 80023fa:	4808      	ldr	r0, [pc, #32]	; (800241c <LCD_LayerInit+0xb4>)
 80023fc:	f000 f86e 	bl	80024dc <LCD_SetFont>
  
  /* dithering activation */
  LTDC_DitherCmd(ENABLE);
 8002400:	2001      	movs	r0, #1
 8002402:	f7fe fded 	bl	8000fe0 <LTDC_DitherCmd>
}
 8002406:	bf00      	nop
 8002408:	3740      	adds	r7, #64	; 0x40
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40016884 	.word	0x40016884
 8002414:	d0050000 	.word	0xd0050000
 8002418:	40016904 	.word	0x40016904
 800241c:	20000010 	.word	0x20000010

08002420 <LCD_ChipSelect>:
  * @brief  Enable or Disable the LCD through CS pin
  * @param  NewState CS pin state
  * @retval None
  */
void LCD_ChipSelect(FunctionalState NewState)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	71fb      	strb	r3, [r7, #7]
  if (NewState == DISABLE)
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d104      	bne.n	800243a <LCD_ChipSelect+0x1a>
  {
    GPIO_ResetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin low: LCD disabled */
 8002430:	2104      	movs	r1, #4
 8002432:	4806      	ldr	r0, [pc, #24]	; (800244c <LCD_ChipSelect+0x2c>)
 8002434:	f7fe fa7f 	bl	8000936 <GPIO_ResetBits>
  }
  else
  {
    GPIO_SetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin high: LCD enabled */
  }
}
 8002438:	e003      	b.n	8002442 <LCD_ChipSelect+0x22>
    GPIO_SetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin high: LCD enabled */
 800243a:	2104      	movs	r1, #4
 800243c:	4803      	ldr	r0, [pc, #12]	; (800244c <LCD_ChipSelect+0x2c>)
 800243e:	f7fe fa6b 	bl	8000918 <GPIO_SetBits>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40020800 	.word	0x40020800

08002450 <LCD_SetLayer>:
  * @brief  Sets the LCD Layer.
  * @param  Layerx: specifies the Layer foreground or background.
  * @retval None
  */
void LCD_SetLayer(__IO uint32_t Layerx)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if (Layerx == LCD_BACKGROUND_LAYER)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d107      	bne.n	800246e <LCD_SetLayer+0x1e>
  {
    CurrentFrameBuffer = LCD_FRAME_BUFFER; 
 800245e:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <LCD_SetLayer+0x38>)
 8002460:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 8002464:	601a      	str	r2, [r3, #0]
    CurrentLayer = LCD_BACKGROUND_LAYER;
 8002466:	4b09      	ldr	r3, [pc, #36]	; (800248c <LCD_SetLayer+0x3c>)
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
  else
  {
    CurrentFrameBuffer = LCD_FRAME_BUFFER + BUFFER_OFFSET;
    CurrentLayer = LCD_FOREGROUND_LAYER;
  }
}  
 800246c:	e005      	b.n	800247a <LCD_SetLayer+0x2a>
    CurrentFrameBuffer = LCD_FRAME_BUFFER + BUFFER_OFFSET;
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <LCD_SetLayer+0x38>)
 8002470:	4a07      	ldr	r2, [pc, #28]	; (8002490 <LCD_SetLayer+0x40>)
 8002472:	601a      	str	r2, [r3, #0]
    CurrentLayer = LCD_FOREGROUND_LAYER;
 8002474:	4b05      	ldr	r3, [pc, #20]	; (800248c <LCD_SetLayer+0x3c>)
 8002476:	2201      	movs	r2, #1
 8002478:	601a      	str	r2, [r3, #0]
}  
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	20000028 	.word	0x20000028
 800248c:	2000017c 	.word	0x2000017c
 8002490:	d0050000 	.word	0xd0050000

08002494 <LCD_SetTextColor>:
  * @brief  Sets the Text color.
  * @param  Color: specifies the Text color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetTextColor(__IO uint16_t Color)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 800249e:	88fb      	ldrh	r3, [r7, #6]
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <LCD_SetTextColor+0x20>)
 80024a4:	801a      	strh	r2, [r3, #0]
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	20000178 	.word	0x20000178

080024b8 <LCD_SetBackColor>:
  * @brief  Sets the Background color.
  * @param  Color: specifies the Background color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetBackColor(__IO uint16_t Color)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	80fb      	strh	r3, [r7, #6]
  CurrentBackColor = Color;
 80024c2:	88fb      	ldrh	r3, [r7, #6]
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <LCD_SetBackColor+0x20>)
 80024c8:	801a      	strh	r2, [r3, #0]
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	20000024 	.word	0x20000024

080024dc <LCD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  fonts: specifies the font to be used.
  * @retval None
  */
void LCD_SetFont(sFONT *fonts)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 80024e4:	4a04      	ldr	r2, [pc, #16]	; (80024f8 <LCD_SetFont+0x1c>)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6013      	str	r3, [r2, #0]
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	20000174 	.word	0x20000174

080024fc <LCD_GetFont>:
  * @brief  Gets the Text Font.
  * @param  None.
  * @retval the used font.
  */
sFONT *LCD_GetFont(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return LCD_Currentfonts;
 8002500:	4b03      	ldr	r3, [pc, #12]	; (8002510 <LCD_GetFont+0x14>)
 8002502:	681b      	ldr	r3, [r3, #0]
}
 8002504:	4618      	mov	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000174 	.word	0x20000174

08002514 <LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background.
  * @retval None
  */
void LCD_Clear(uint16_t Color)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	80fb      	strh	r3, [r7, #6]
  uint32_t index = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]
  
  /* erase memory */
  for (index = 0x00; index < BUFFER_OFFSET; index++)
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	e00a      	b.n	800253e <LCD_Clear+0x2a>
  {
    *(__IO uint16_t*)(CurrentFrameBuffer + (2*index)) = Color;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	005a      	lsls	r2, r3, #1
 800252c:	4b09      	ldr	r3, [pc, #36]	; (8002554 <LCD_Clear+0x40>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4413      	add	r3, r2
 8002532:	461a      	mov	r2, r3
 8002534:	88fb      	ldrh	r3, [r7, #6]
 8002536:	8013      	strh	r3, [r2, #0]
  for (index = 0x00; index < BUFFER_OFFSET; index++)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	3301      	adds	r3, #1
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002544:	d3f0      	bcc.n	8002528 <LCD_Clear+0x14>
  } 
}
 8002546:	bf00      	nop
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	20000028 	.word	0x20000028

08002558 <LCD_DrawChar>:
  * @param  Ypos: start column address.
  * @param  c: pointer to the character data.
  * @retval None
  */
void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8002558:	b480      	push	{r7}
 800255a:	b087      	sub	sp, #28
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	603a      	str	r2, [r7, #0]
 8002562:	80fb      	strh	r3, [r7, #6]
 8002564:	460b      	mov	r3, r1
 8002566:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0, xpos =0;
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]
 800256c:	2300      	movs	r3, #0
 800256e:	613b      	str	r3, [r7, #16]
 8002570:	2300      	movs	r3, #0
 8002572:	60bb      	str	r3, [r7, #8]
  uint32_t  Xaddress = 0;
 8002574:	2300      	movs	r3, #0
 8002576:	60fb      	str	r3, [r7, #12]
  
  xpos = Xpos*LCD_PIXEL_WIDTH*2;
 8002578:	88fa      	ldrh	r2, [r7, #6]
 800257a:	4613      	mov	r3, r2
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	1a9b      	subs	r3, r3, r2
 8002580:	015b      	lsls	r3, r3, #5
 8002582:	60bb      	str	r3, [r7, #8]
  Xaddress += Ypos;
 8002584:	88bb      	ldrh	r3, [r7, #4]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	4413      	add	r3, r2
 800258a:	60fb      	str	r3, [r7, #12]
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	e05f      	b.n	8002652 <LCD_DrawChar+0xfa>
  {
    
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8002592:	2300      	movs	r3, #0
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	e04a      	b.n	800262e <LCD_DrawChar+0xd6>
    {
          
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	4619      	mov	r1, r3
 80025a4:	4b31      	ldr	r3, [pc, #196]	; (800266c <LCD_DrawChar+0x114>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	889b      	ldrh	r3, [r3, #4]
 80025aa:	4a31      	ldr	r2, [pc, #196]	; (8002670 <LCD_DrawChar+0x118>)
 80025ac:	fba2 2303 	umull	r2, r3, r2, r3
 80025b0:	08db      	lsrs	r3, r3, #3
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	2280      	movs	r2, #128	; 0x80
 80025b8:	409a      	lsls	r2, r3
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	fa42 f303 	asr.w	r3, r2, r3
 80025c0:	400b      	ands	r3, r1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d104      	bne.n	80025d0 <LCD_DrawChar+0x78>
 80025c6:	4b29      	ldr	r3, [pc, #164]	; (800266c <LCD_DrawChar+0x114>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	889b      	ldrh	r3, [r3, #4]
 80025cc:	2b0c      	cmp	r3, #12
 80025ce:	d911      	bls.n	80025f4 <LCD_DrawChar+0x9c>
        (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	4413      	add	r3, r2
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	461a      	mov	r2, r3
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	fa42 f303 	asr.w	r3, r2, r3
 80025e2:	f003 0301 	and.w	r3, r3, #1
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d110      	bne.n	800260c <LCD_DrawChar+0xb4>
        (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80025ea:	4b20      	ldr	r3, [pc, #128]	; (800266c <LCD_DrawChar+0x114>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	889b      	ldrh	r3, [r3, #4]
 80025f0:	2b0c      	cmp	r3, #12
 80025f2:	d90b      	bls.n	800260c <LCD_DrawChar+0xb4>
      {
          /* Write data value to all SDRAM memory */
         *(__IO uint16_t*) (CurrentFrameBuffer + (2*Xaddress) + xpos) = CurrentBackColor;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	005a      	lsls	r2, r3, #1
 80025f8:	4b1e      	ldr	r3, [pc, #120]	; (8002674 <LCD_DrawChar+0x11c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	441a      	add	r2, r3
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	4413      	add	r3, r2
 8002602:	461a      	mov	r2, r3
 8002604:	4b1c      	ldr	r3, [pc, #112]	; (8002678 <LCD_DrawChar+0x120>)
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	8013      	strh	r3, [r2, #0]
 800260a:	e00a      	b.n	8002622 <LCD_DrawChar+0xca>
      }
      else
      {
          /* Write data value to all SDRAM memory */
         *(__IO uint16_t*) (CurrentFrameBuffer + (2*Xaddress) + xpos) = CurrentTextColor;         
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	005a      	lsls	r2, r3, #1
 8002610:	4b18      	ldr	r3, [pc, #96]	; (8002674 <LCD_DrawChar+0x11c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	441a      	add	r2, r3
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	4413      	add	r3, r2
 800261a:	461a      	mov	r2, r3
 800261c:	4b17      	ldr	r3, [pc, #92]	; (800267c <LCD_DrawChar+0x124>)
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	8013      	strh	r3, [r2, #0]
      }
      Xaddress++;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	3301      	adds	r3, #1
 8002626:	60fb      	str	r3, [r7, #12]
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	3301      	adds	r3, #1
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	4b0f      	ldr	r3, [pc, #60]	; (800266c <LCD_DrawChar+0x114>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	889b      	ldrh	r3, [r3, #4]
 8002634:	461a      	mov	r2, r3
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	429a      	cmp	r2, r3
 800263a:	d8ad      	bhi.n	8002598 <LCD_DrawChar+0x40>
    }
      Xaddress += (LCD_PIXEL_WIDTH - LCD_Currentfonts->Width);
 800263c:	4b0b      	ldr	r3, [pc, #44]	; (800266c <LCD_DrawChar+0x114>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	889b      	ldrh	r3, [r3, #4]
 8002642:	461a      	mov	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	1a9b      	subs	r3, r3, r2
 8002648:	33f0      	adds	r3, #240	; 0xf0
 800264a:	60fb      	str	r3, [r7, #12]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	3301      	adds	r3, #1
 8002650:	617b      	str	r3, [r7, #20]
 8002652:	4b06      	ldr	r3, [pc, #24]	; (800266c <LCD_DrawChar+0x114>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	88db      	ldrh	r3, [r3, #6]
 8002658:	461a      	mov	r2, r3
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	429a      	cmp	r2, r3
 800265e:	d898      	bhi.n	8002592 <LCD_DrawChar+0x3a>
  }
}
 8002660:	bf00      	nop
 8002662:	371c      	adds	r7, #28
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	20000174 	.word	0x20000174
 8002670:	aaaaaaab 	.word	0xaaaaaaab
 8002674:	20000028 	.word	0x20000028
 8002678:	20000024 	.word	0x20000024
 800267c:	20000178 	.word	0x20000178

08002680 <LCD_DisplayChar>:
  * @param  Column: start column address.
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E.
  * @retval None
  */
void LCD_DisplayChar(uint16_t Line, uint16_t Column, uint8_t Ascii)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	80fb      	strh	r3, [r7, #6]
 800268a:	460b      	mov	r3, r1
 800268c:	80bb      	strh	r3, [r7, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8002692:	78fb      	ldrb	r3, [r7, #3]
 8002694:	3b20      	subs	r3, #32
 8002696:	70fb      	strb	r3, [r7, #3]

  LCD_DrawChar(Line, Column, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8002698:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <LCD_DisplayChar+0x40>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	78fb      	ldrb	r3, [r7, #3]
 80026a0:	4907      	ldr	r1, [pc, #28]	; (80026c0 <LCD_DisplayChar+0x40>)
 80026a2:	6809      	ldr	r1, [r1, #0]
 80026a4:	88c9      	ldrh	r1, [r1, #6]
 80026a6:	fb01 f303 	mul.w	r3, r1, r3
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	441a      	add	r2, r3
 80026ae:	88b9      	ldrh	r1, [r7, #4]
 80026b0:	88fb      	ldrh	r3, [r7, #6]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff ff50 	bl	8002558 <LCD_DrawChar>
}
 80026b8:	bf00      	nop
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20000174 	.word	0x20000174

080026c4 <LCD_DisplayStringLine>:
  *     @arg Linex: where x can be 0..9
  * @param  *ptr: pointer to string to display on LCD.
  * @retval None
  */
void LCD_DisplayStringLine(uint16_t Line, uint8_t *ptr)
{  
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	6039      	str	r1, [r7, #0]
 80026ce:	80fb      	strh	r3, [r7, #6]
  uint16_t refcolumn = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	81fb      	strh	r3, [r7, #14]
  /* Send the string character by character on lCD */
  while ((refcolumn < LCD_PIXEL_WIDTH) && ((*ptr != 0) & (((refcolumn + LCD_Currentfonts->Width) & 0xFFFF) >= LCD_Currentfonts->Width)))
 80026d4:	e00f      	b.n	80026f6 <LCD_DisplayStringLine+0x32>
  {
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, *ptr);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	781a      	ldrb	r2, [r3, #0]
 80026da:	89f9      	ldrh	r1, [r7, #14]
 80026dc:	88fb      	ldrh	r3, [r7, #6]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff ffce 	bl	8002680 <LCD_DisplayChar>
    /* Decrement the column position by width */
    refcolumn += LCD_Currentfonts->Width;
 80026e4:	4b14      	ldr	r3, [pc, #80]	; (8002738 <LCD_DisplayStringLine+0x74>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	889a      	ldrh	r2, [r3, #4]
 80026ea:	89fb      	ldrh	r3, [r7, #14]
 80026ec:	4413      	add	r3, r2
 80026ee:	81fb      	strh	r3, [r7, #14]
    /* Point on the next character */
    ptr++;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	3301      	adds	r3, #1
 80026f4:	603b      	str	r3, [r7, #0]
  while ((refcolumn < LCD_PIXEL_WIDTH) && ((*ptr != 0) & (((refcolumn + LCD_Currentfonts->Width) & 0xFFFF) >= LCD_Currentfonts->Width)))
 80026f6:	89fb      	ldrh	r3, [r7, #14]
 80026f8:	2bef      	cmp	r3, #239	; 0xef
 80026fa:	d819      	bhi.n	8002730 <LCD_DisplayStringLine+0x6c>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	bf14      	ite	ne
 8002704:	2301      	movne	r3, #1
 8002706:	2300      	moveq	r3, #0
 8002708:	b2da      	uxtb	r2, r3
 800270a:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <LCD_DisplayStringLine+0x74>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	8899      	ldrh	r1, [r3, #4]
 8002710:	89fb      	ldrh	r3, [r7, #14]
 8002712:	440b      	add	r3, r1
 8002714:	b29b      	uxth	r3, r3
 8002716:	4619      	mov	r1, r3
 8002718:	4b07      	ldr	r3, [pc, #28]	; (8002738 <LCD_DisplayStringLine+0x74>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	889b      	ldrh	r3, [r3, #4]
 800271e:	4299      	cmp	r1, r3
 8002720:	bfac      	ite	ge
 8002722:	2301      	movge	r3, #1
 8002724:	2300      	movlt	r3, #0
 8002726:	b2db      	uxtb	r3, r3
 8002728:	4013      	ands	r3, r2
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1d2      	bne.n	80026d6 <LCD_DisplayStringLine+0x12>
  }
}
 8002730:	bf00      	nop
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	20000174 	.word	0x20000174

0800273c <LCD_DrawFullRect>:
  * @param  Height: rectangle height.
  * @param  Width: rectangle width.
  * @retval None
  */
void LCD_DrawFullRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800273c:	b590      	push	{r4, r7, lr}
 800273e:	b091      	sub	sp, #68	; 0x44
 8002740:	af00      	add	r7, sp, #0
 8002742:	4604      	mov	r4, r0
 8002744:	4608      	mov	r0, r1
 8002746:	4611      	mov	r1, r2
 8002748:	461a      	mov	r2, r3
 800274a:	4623      	mov	r3, r4
 800274c:	80fb      	strh	r3, [r7, #6]
 800274e:	4603      	mov	r3, r0
 8002750:	80bb      	strh	r3, [r7, #4]
 8002752:	460b      	mov	r3, r1
 8002754:	807b      	strh	r3, [r7, #2]
 8002756:	4613      	mov	r3, r2
 8002758:	803b      	strh	r3, [r7, #0]
  DMA2D_InitTypeDef      DMA2D_InitStruct;
  
  uint32_t  Xaddress = 0; 
 800275a:	2300      	movs	r3, #0
 800275c:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t Red_Value = 0, Green_Value = 0, Blue_Value = 0;
 800275e:	2300      	movs	r3, #0
 8002760:	877b      	strh	r3, [r7, #58]	; 0x3a
 8002762:	2300      	movs	r3, #0
 8002764:	873b      	strh	r3, [r7, #56]	; 0x38
 8002766:	2300      	movs	r3, #0
 8002768:	86fb      	strh	r3, [r7, #54]	; 0x36
 
  Red_Value = (0xF800 & CurrentTextColor) >> 11;
 800276a:	4b27      	ldr	r3, [pc, #156]	; (8002808 <LCD_DrawFullRect+0xcc>)
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	0adb      	lsrs	r3, r3, #11
 8002770:	877b      	strh	r3, [r7, #58]	; 0x3a
  Blue_Value = 0x001F & CurrentTextColor;
 8002772:	4b25      	ldr	r3, [pc, #148]	; (8002808 <LCD_DrawFullRect+0xcc>)
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	f003 031f 	and.w	r3, r3, #31
 800277a:	86fb      	strh	r3, [r7, #54]	; 0x36
  Green_Value = (0x07E0 & CurrentTextColor) >> 5;
 800277c:	4b22      	ldr	r3, [pc, #136]	; (8002808 <LCD_DrawFullRect+0xcc>)
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	095b      	lsrs	r3, r3, #5
 8002782:	b29b      	uxth	r3, r3
 8002784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002788:	873b      	strh	r3, [r7, #56]	; 0x38
  
  Xaddress = CurrentFrameBuffer + 2*(LCD_PIXEL_WIDTH*Ypos + Xpos);
 800278a:	88ba      	ldrh	r2, [r7, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	1a9b      	subs	r3, r3, r2
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	461a      	mov	r2, r3
 8002796:	88fb      	ldrh	r3, [r7, #6]
 8002798:	4413      	add	r3, r2
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	461a      	mov	r2, r3
 800279e:	4b1b      	ldr	r3, [pc, #108]	; (800280c <LCD_DrawFullRect+0xd0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4413      	add	r3, r2
 80027a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* configure DMA2D */
  DMA2D_DeInit();
 80027a6:	f7fd fd9f 	bl	80002e8 <DMA2D_DeInit>
  DMA2D_InitStruct.DMA2D_Mode = DMA2D_R2M;       
 80027aa:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80027ae:	60fb      	str	r3, [r7, #12]
  DMA2D_InitStruct.DMA2D_CMode = DMA2D_RGB565;      
 80027b0:	2302      	movs	r3, #2
 80027b2:	613b      	str	r3, [r7, #16]
  DMA2D_InitStruct.DMA2D_OutputGreen = Green_Value;      
 80027b4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80027b6:	61bb      	str	r3, [r7, #24]
  DMA2D_InitStruct.DMA2D_OutputBlue = Blue_Value;     
 80027b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027ba:	617b      	str	r3, [r7, #20]
  DMA2D_InitStruct.DMA2D_OutputRed = Red_Value;                
 80027bc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80027be:	61fb      	str	r3, [r7, #28]
  DMA2D_InitStruct.DMA2D_OutputAlpha = 0x0F;                  
 80027c0:	230f      	movs	r3, #15
 80027c2:	623b      	str	r3, [r7, #32]
  DMA2D_InitStruct.DMA2D_OutputMemoryAdd = Xaddress;                
 80027c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
  DMA2D_InitStruct.DMA2D_OutputOffset = (LCD_PIXEL_WIDTH - Width);                
 80027c8:	887b      	ldrh	r3, [r7, #2]
 80027ca:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80027ce:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA2D_InitStruct.DMA2D_NumberOfLine = Height;            
 80027d0:	883b      	ldrh	r3, [r7, #0]
 80027d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA2D_InitStruct.DMA2D_PixelPerLine = Width;
 80027d4:	887b      	ldrh	r3, [r7, #2]
 80027d6:	633b      	str	r3, [r7, #48]	; 0x30
  DMA2D_Init(&DMA2D_InitStruct); 
 80027d8:	f107 030c 	add.w	r3, r7, #12
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fd fd91 	bl	8000304 <DMA2D_Init>
  
  /* Start Transfer */ 
  DMA2D_StartTransfer();
 80027e2:	f7fd fe3f 	bl	8000464 <DMA2D_StartTransfer>
  
  /* Wait for CTC Flag activation */
  while(DMA2D_GetFlagStatus(DMA2D_FLAG_TC) == RESET)
 80027e6:	bf00      	nop
 80027e8:	2002      	movs	r0, #2
 80027ea:	f7fd fe4b 	bl	8000484 <DMA2D_GetFlagStatus>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0f9      	beq.n	80027e8 <LCD_DrawFullRect+0xac>
  {
  } 

  LCD_SetTextColor(CurrentTextColor);
 80027f4:	4b04      	ldr	r3, [pc, #16]	; (8002808 <LCD_DrawFullRect+0xcc>)
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff fe4b 	bl	8002494 <LCD_SetTextColor>
}
 80027fe:	bf00      	nop
 8002800:	3744      	adds	r7, #68	; 0x44
 8002802:	46bd      	mov	sp, r7
 8002804:	bd90      	pop	{r4, r7, pc}
 8002806:	bf00      	nop
 8002808:	20000178 	.word	0x20000178
 800280c:	20000028 	.word	0x20000028

08002810 <LCD_WriteCommand>:
  * @brief  Writes command to select the LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void LCD_WriteCommand(uint8_t LCD_Reg)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	71fb      	strb	r3, [r7, #7]
    /* Reset WRX to send command */
  LCD_CtrlLinesWrite(LCD_WRX_GPIO_PORT, LCD_WRX_PIN, Bit_RESET);
 800281a:	2200      	movs	r2, #0
 800281c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002820:	480e      	ldr	r0, [pc, #56]	; (800285c <LCD_WriteCommand+0x4c>)
 8002822:	f000 f9b3 	bl	8002b8c <LCD_CtrlLinesWrite>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_ChipSelect(DISABLE);
 8002826:	2000      	movs	r0, #0
 8002828:	f7ff fdfa 	bl	8002420 <LCD_ChipSelect>
  SPI_I2S_SendData(LCD_SPI, LCD_Reg);
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	b29b      	uxth	r3, r3
 8002830:	4619      	mov	r1, r3
 8002832:	480b      	ldr	r0, [pc, #44]	; (8002860 <LCD_WriteCommand+0x50>)
 8002834:	f7fe ffe4 	bl	8001800 <SPI_I2S_SendData>
  
  /* Wait until a data is sent(not busy), before config /CS HIGH */
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET);
 8002838:	bf00      	nop
 800283a:	2180      	movs	r1, #128	; 0x80
 800283c:	4808      	ldr	r0, [pc, #32]	; (8002860 <LCD_WriteCommand+0x50>)
 800283e:	f7fe ffee 	bl	800181e <SPI_I2S_GetFlagStatus>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1f8      	bne.n	800283a <LCD_WriteCommand+0x2a>
  delay(10);
 8002848:	200a      	movs	r0, #10
 800284a:	f000 fad1 	bl	8002df0 <delay>
  LCD_ChipSelect(ENABLE);
 800284e:	2001      	movs	r0, #1
 8002850:	f7ff fde6 	bl	8002420 <LCD_ChipSelect>
}
 8002854:	bf00      	nop
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40020c00 	.word	0x40020c00
 8002860:	40015000 	.word	0x40015000

08002864 <LCD_WriteData>:
  *         This function must be used after LCD_WriteCommand() function
  * @param  value: data to write to the selected register.
  * @retval None
  */
void LCD_WriteData(uint8_t value)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	71fb      	strb	r3, [r7, #7]
    /* Set WRX to send data */
  LCD_CtrlLinesWrite(LCD_WRX_GPIO_PORT, LCD_WRX_PIN, Bit_SET);
 800286e:	2201      	movs	r2, #1
 8002870:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002874:	480e      	ldr	r0, [pc, #56]	; (80028b0 <LCD_WriteData+0x4c>)
 8002876:	f000 f989 	bl	8002b8c <LCD_CtrlLinesWrite>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_ChipSelect(DISABLE);
 800287a:	2000      	movs	r0, #0
 800287c:	f7ff fdd0 	bl	8002420 <LCD_ChipSelect>
  SPI_I2S_SendData(LCD_SPI, value);
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	b29b      	uxth	r3, r3
 8002884:	4619      	mov	r1, r3
 8002886:	480b      	ldr	r0, [pc, #44]	; (80028b4 <LCD_WriteData+0x50>)
 8002888:	f7fe ffba 	bl	8001800 <SPI_I2S_SendData>
  
  /* Wait until a data is sent(not busy), before config /CS HIGH */
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET);
 800288c:	bf00      	nop
 800288e:	2180      	movs	r1, #128	; 0x80
 8002890:	4808      	ldr	r0, [pc, #32]	; (80028b4 <LCD_WriteData+0x50>)
 8002892:	f7fe ffc4 	bl	800181e <SPI_I2S_GetFlagStatus>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f8      	bne.n	800288e <LCD_WriteData+0x2a>
  delay(10);
 800289c:	200a      	movs	r0, #10
 800289e:	f000 faa7 	bl	8002df0 <delay>
  LCD_ChipSelect(ENABLE);
 80028a2:	2001      	movs	r0, #1
 80028a4:	f7ff fdbc 	bl	8002420 <LCD_ChipSelect>
}
 80028a8:	bf00      	nop
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40020c00 	.word	0x40020c00
 80028b4:	40015000 	.word	0x40015000

080028b8 <LCD_PowerOn>:

void LCD_PowerOn(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  LCD_WriteCommand(0xCA);
 80028bc:	20ca      	movs	r0, #202	; 0xca
 80028be:	f7ff ffa7 	bl	8002810 <LCD_WriteCommand>
  LCD_WriteData(0xC3);
 80028c2:	20c3      	movs	r0, #195	; 0xc3
 80028c4:	f7ff ffce 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x08);
 80028c8:	2008      	movs	r0, #8
 80028ca:	f7ff ffcb 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x50);
 80028ce:	2050      	movs	r0, #80	; 0x50
 80028d0:	f7ff ffc8 	bl	8002864 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWERB);
 80028d4:	20cf      	movs	r0, #207	; 0xcf
 80028d6:	f7ff ff9b 	bl	8002810 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 80028da:	2000      	movs	r0, #0
 80028dc:	f7ff ffc2 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0xC1);
 80028e0:	20c1      	movs	r0, #193	; 0xc1
 80028e2:	f7ff ffbf 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x30);
 80028e6:	2030      	movs	r0, #48	; 0x30
 80028e8:	f7ff ffbc 	bl	8002864 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER_SEQ);
 80028ec:	20ed      	movs	r0, #237	; 0xed
 80028ee:	f7ff ff8f 	bl	8002810 <LCD_WriteCommand>
  LCD_WriteData(0x64);
 80028f2:	2064      	movs	r0, #100	; 0x64
 80028f4:	f7ff ffb6 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x03);
 80028f8:	2003      	movs	r0, #3
 80028fa:	f7ff ffb3 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x12);
 80028fe:	2012      	movs	r0, #18
 8002900:	f7ff ffb0 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x81);
 8002904:	2081      	movs	r0, #129	; 0x81
 8002906:	f7ff ffad 	bl	8002864 <LCD_WriteData>
  LCD_WriteCommand(LCD_DTCA);
 800290a:	20e8      	movs	r0, #232	; 0xe8
 800290c:	f7ff ff80 	bl	8002810 <LCD_WriteCommand>
  LCD_WriteData(0x85);
 8002910:	2085      	movs	r0, #133	; 0x85
 8002912:	f7ff ffa7 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x00);
 8002916:	2000      	movs	r0, #0
 8002918:	f7ff ffa4 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x78);
 800291c:	2078      	movs	r0, #120	; 0x78
 800291e:	f7ff ffa1 	bl	8002864 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWERA);
 8002922:	20cb      	movs	r0, #203	; 0xcb
 8002924:	f7ff ff74 	bl	8002810 <LCD_WriteCommand>
  LCD_WriteData(0x39);
 8002928:	2039      	movs	r0, #57	; 0x39
 800292a:	f7ff ff9b 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x2C);
 800292e:	202c      	movs	r0, #44	; 0x2c
 8002930:	f7ff ff98 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x00);
 8002934:	2000      	movs	r0, #0
 8002936:	f7ff ff95 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x34);
 800293a:	2034      	movs	r0, #52	; 0x34
 800293c:	f7ff ff92 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x02);
 8002940:	2002      	movs	r0, #2
 8002942:	f7ff ff8f 	bl	8002864 <LCD_WriteData>
  LCD_WriteCommand(LCD_PRC);
 8002946:	20f7      	movs	r0, #247	; 0xf7
 8002948:	f7ff ff62 	bl	8002810 <LCD_WriteCommand>
  LCD_WriteData(0x20);
 800294c:	2020      	movs	r0, #32
 800294e:	f7ff ff89 	bl	8002864 <LCD_WriteData>
  LCD_WriteCommand(LCD_DTCB);
 8002952:	20ea      	movs	r0, #234	; 0xea
 8002954:	f7ff ff5c 	bl	8002810 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8002958:	2000      	movs	r0, #0
 800295a:	f7ff ff83 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x00);
 800295e:	2000      	movs	r0, #0
 8002960:	f7ff ff80 	bl	8002864 <LCD_WriteData>
  LCD_WriteCommand(LCD_FRC);
 8002964:	20b1      	movs	r0, #177	; 0xb1
 8002966:	f7ff ff53 	bl	8002810 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 800296a:	2000      	movs	r0, #0
 800296c:	f7ff ff7a 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x1B);
 8002970:	201b      	movs	r0, #27
 8002972:	f7ff ff77 	bl	8002864 <LCD_WriteData>
  LCD_WriteCommand(LCD_DFC);
 8002976:	20b6      	movs	r0, #182	; 0xb6
 8002978:	f7ff ff4a 	bl	8002810 <LCD_WriteCommand>
  LCD_WriteData(0x0A);
 800297c:	200a      	movs	r0, #10
 800297e:	f7ff ff71 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0xA2);
 8002982:	20a2      	movs	r0, #162	; 0xa2
 8002984:	f7ff ff6e 	bl	8002864 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER1);
 8002988:	20c0      	movs	r0, #192	; 0xc0
 800298a:	f7ff ff41 	bl	8002810 <LCD_WriteCommand>
  LCD_WriteData(0x10);
 800298e:	2010      	movs	r0, #16
 8002990:	f7ff ff68 	bl	8002864 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER2);
 8002994:	20c1      	movs	r0, #193	; 0xc1
 8002996:	f7ff ff3b 	bl	8002810 <LCD_WriteCommand>
  LCD_WriteData(0x10);
 800299a:	2010      	movs	r0, #16
 800299c:	f7ff ff62 	bl	8002864 <LCD_WriteData>
  LCD_WriteCommand(LCD_VCOM1);
 80029a0:	20c5      	movs	r0, #197	; 0xc5
 80029a2:	f7ff ff35 	bl	8002810 <LCD_WriteCommand>
  LCD_WriteData(0x45);
 80029a6:	2045      	movs	r0, #69	; 0x45
 80029a8:	f7ff ff5c 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x15);
 80029ac:	2015      	movs	r0, #21
 80029ae:	f7ff ff59 	bl	8002864 <LCD_WriteData>
  LCD_WriteCommand(LCD_VCOM2);
 80029b2:	20c7      	movs	r0, #199	; 0xc7
 80029b4:	f7ff ff2c 	bl	8002810 <LCD_WriteCommand>
  LCD_WriteData(0x90);
 80029b8:	2090      	movs	r0, #144	; 0x90
 80029ba:	f7ff ff53 	bl	8002864 <LCD_WriteData>
  LCD_WriteCommand(LCD_MAC);
 80029be:	2036      	movs	r0, #54	; 0x36
 80029c0:	f7ff ff26 	bl	8002810 <LCD_WriteCommand>
  LCD_WriteData(0xC8);
 80029c4:	20c8      	movs	r0, #200	; 0xc8
 80029c6:	f7ff ff4d 	bl	8002864 <LCD_WriteData>
  LCD_WriteCommand(LCD_3GAMMA_EN);
 80029ca:	20f2      	movs	r0, #242	; 0xf2
 80029cc:	f7ff ff20 	bl	8002810 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 80029d0:	2000      	movs	r0, #0
 80029d2:	f7ff ff47 	bl	8002864 <LCD_WriteData>
  LCD_WriteCommand(LCD_RGB_INTERFACE);
 80029d6:	20b0      	movs	r0, #176	; 0xb0
 80029d8:	f7ff ff1a 	bl	8002810 <LCD_WriteCommand>
  LCD_WriteData(0xC2);
 80029dc:	20c2      	movs	r0, #194	; 0xc2
 80029de:	f7ff ff41 	bl	8002864 <LCD_WriteData>
  LCD_WriteCommand(LCD_DFC);
 80029e2:	20b6      	movs	r0, #182	; 0xb6
 80029e4:	f7ff ff14 	bl	8002810 <LCD_WriteCommand>
  LCD_WriteData(0x0A);
 80029e8:	200a      	movs	r0, #10
 80029ea:	f7ff ff3b 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0xA7);
 80029ee:	20a7      	movs	r0, #167	; 0xa7
 80029f0:	f7ff ff38 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x27);
 80029f4:	2027      	movs	r0, #39	; 0x27
 80029f6:	f7ff ff35 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x04);
 80029fa:	2004      	movs	r0, #4
 80029fc:	f7ff ff32 	bl	8002864 <LCD_WriteData>

  /* colomn address set */
  LCD_WriteCommand(LCD_COLUMN_ADDR);
 8002a00:	202a      	movs	r0, #42	; 0x2a
 8002a02:	f7ff ff05 	bl	8002810 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8002a06:	2000      	movs	r0, #0
 8002a08:	f7ff ff2c 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x00);
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	f7ff ff29 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x00);
 8002a12:	2000      	movs	r0, #0
 8002a14:	f7ff ff26 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0xEF);
 8002a18:	20ef      	movs	r0, #239	; 0xef
 8002a1a:	f7ff ff23 	bl	8002864 <LCD_WriteData>
  /* Page Address Set */
  LCD_WriteCommand(LCD_PAGE_ADDR);
 8002a1e:	202b      	movs	r0, #43	; 0x2b
 8002a20:	f7ff fef6 	bl	8002810 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8002a24:	2000      	movs	r0, #0
 8002a26:	f7ff ff1d 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x00);
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	f7ff ff1a 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x01);
 8002a30:	2001      	movs	r0, #1
 8002a32:	f7ff ff17 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x3F);
 8002a36:	203f      	movs	r0, #63	; 0x3f
 8002a38:	f7ff ff14 	bl	8002864 <LCD_WriteData>
  LCD_WriteCommand(LCD_INTERFACE);
 8002a3c:	20f6      	movs	r0, #246	; 0xf6
 8002a3e:	f7ff fee7 	bl	8002810 <LCD_WriteCommand>
  LCD_WriteData(0x01);
 8002a42:	2001      	movs	r0, #1
 8002a44:	f7ff ff0e 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x00);
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f7ff ff0b 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x06);
 8002a4e:	2006      	movs	r0, #6
 8002a50:	f7ff ff08 	bl	8002864 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_GRAM);
 8002a54:	202c      	movs	r0, #44	; 0x2c
 8002a56:	f7ff fedb 	bl	8002810 <LCD_WriteCommand>
  delay(200);
 8002a5a:	20c8      	movs	r0, #200	; 0xc8
 8002a5c:	f000 f9c8 	bl	8002df0 <delay>
  
  LCD_WriteCommand(LCD_GAMMA);
 8002a60:	2026      	movs	r0, #38	; 0x26
 8002a62:	f7ff fed5 	bl	8002810 <LCD_WriteCommand>
  LCD_WriteData(0x01);
 8002a66:	2001      	movs	r0, #1
 8002a68:	f7ff fefc 	bl	8002864 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_PGAMMA);
 8002a6c:	20e0      	movs	r0, #224	; 0xe0
 8002a6e:	f7ff fecf 	bl	8002810 <LCD_WriteCommand>
  LCD_WriteData(0x0F);
 8002a72:	200f      	movs	r0, #15
 8002a74:	f7ff fef6 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x29);
 8002a78:	2029      	movs	r0, #41	; 0x29
 8002a7a:	f7ff fef3 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x24);
 8002a7e:	2024      	movs	r0, #36	; 0x24
 8002a80:	f7ff fef0 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x0C);
 8002a84:	200c      	movs	r0, #12
 8002a86:	f7ff feed 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x0E);
 8002a8a:	200e      	movs	r0, #14
 8002a8c:	f7ff feea 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x09);
 8002a90:	2009      	movs	r0, #9
 8002a92:	f7ff fee7 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x4E);
 8002a96:	204e      	movs	r0, #78	; 0x4e
 8002a98:	f7ff fee4 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x78);
 8002a9c:	2078      	movs	r0, #120	; 0x78
 8002a9e:	f7ff fee1 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x3C);
 8002aa2:	203c      	movs	r0, #60	; 0x3c
 8002aa4:	f7ff fede 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x09);
 8002aa8:	2009      	movs	r0, #9
 8002aaa:	f7ff fedb 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x13);
 8002aae:	2013      	movs	r0, #19
 8002ab0:	f7ff fed8 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x05);
 8002ab4:	2005      	movs	r0, #5
 8002ab6:	f7ff fed5 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x17);
 8002aba:	2017      	movs	r0, #23
 8002abc:	f7ff fed2 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x11);
 8002ac0:	2011      	movs	r0, #17
 8002ac2:	f7ff fecf 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x00);
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	f7ff fecc 	bl	8002864 <LCD_WriteData>
  LCD_WriteCommand(LCD_NGAMMA);
 8002acc:	20e1      	movs	r0, #225	; 0xe1
 8002ace:	f7ff fe9f 	bl	8002810 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f7ff fec6 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x16);
 8002ad8:	2016      	movs	r0, #22
 8002ada:	f7ff fec3 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x1B);
 8002ade:	201b      	movs	r0, #27
 8002ae0:	f7ff fec0 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x04);
 8002ae4:	2004      	movs	r0, #4
 8002ae6:	f7ff febd 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x11);
 8002aea:	2011      	movs	r0, #17
 8002aec:	f7ff feba 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x07);
 8002af0:	2007      	movs	r0, #7
 8002af2:	f7ff feb7 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x31);
 8002af6:	2031      	movs	r0, #49	; 0x31
 8002af8:	f7ff feb4 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x33);
 8002afc:	2033      	movs	r0, #51	; 0x33
 8002afe:	f7ff feb1 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x42);
 8002b02:	2042      	movs	r0, #66	; 0x42
 8002b04:	f7ff feae 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x05);
 8002b08:	2005      	movs	r0, #5
 8002b0a:	f7ff feab 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x0C);
 8002b0e:	200c      	movs	r0, #12
 8002b10:	f7ff fea8 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x0A);
 8002b14:	200a      	movs	r0, #10
 8002b16:	f7ff fea5 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x28);
 8002b1a:	2028      	movs	r0, #40	; 0x28
 8002b1c:	f7ff fea2 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x2F);
 8002b20:	202f      	movs	r0, #47	; 0x2f
 8002b22:	f7ff fe9f 	bl	8002864 <LCD_WriteData>
  LCD_WriteData(0x0F);
 8002b26:	200f      	movs	r0, #15
 8002b28:	f7ff fe9c 	bl	8002864 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_SLEEP_OUT);
 8002b2c:	2011      	movs	r0, #17
 8002b2e:	f7ff fe6f 	bl	8002810 <LCD_WriteCommand>
  delay(200);
 8002b32:	20c8      	movs	r0, #200	; 0xc8
 8002b34:	f000 f95c 	bl	8002df0 <delay>
  LCD_WriteCommand(LCD_DISPLAY_ON);
 8002b38:	2029      	movs	r0, #41	; 0x29
 8002b3a:	f7ff fe69 	bl	8002810 <LCD_WriteCommand>
  /* GRAM start writing */
  LCD_WriteCommand(LCD_GRAM);
 8002b3e:	202c      	movs	r0, #44	; 0x2c
 8002b40:	f7ff fe66 	bl	8002810 <LCD_WriteCommand>
 }
 8002b44:	bf00      	nop
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <LCD_CtrlLinesConfig>:
  *         when VDDIO is lower than required LCD supply.
  * @param  None
  * @retval None
  */
void LCD_CtrlLinesConfig(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  RCC_AHB1PeriphClockCmd(LCD_NCS_GPIO_CLK, ENABLE);
 8002b4e:	2101      	movs	r1, #1
 8002b50:	2004      	movs	r0, #4
 8002b52:	f7fe fc69 	bl	8001428 <RCC_AHB1PeriphClockCmd>

  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_NCS_PIN;
 8002b56:	2304      	movs	r3, #4
 8002b58:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002b62:	2300      	movs	r3, #0
 8002b64:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002b6a:	463b      	mov	r3, r7
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4806      	ldr	r0, [pc, #24]	; (8002b88 <LCD_CtrlLinesConfig+0x40>)
 8002b70:	f7fd fe44 	bl	80007fc <GPIO_Init>

  LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET);
 8002b74:	2201      	movs	r2, #1
 8002b76:	2104      	movs	r1, #4
 8002b78:	4803      	ldr	r0, [pc, #12]	; (8002b88 <LCD_CtrlLinesConfig+0x40>)
 8002b7a:	f000 f807 	bl	8002b8c <LCD_CtrlLinesWrite>
}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40020800 	.word	0x40020800

08002b8c <LCD_CtrlLinesWrite>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void LCD_CtrlLinesWrite(GPIO_TypeDef* GPIOx, uint16_t CtrlPins, BitAction BitVal)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	807b      	strh	r3, [r7, #2]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	707b      	strb	r3, [r7, #1]
  /* Set or Reset the control line */
  GPIO_WriteBit(GPIOx, (uint16_t)CtrlPins, (BitAction)BitVal);
 8002b9c:	787a      	ldrb	r2, [r7, #1]
 8002b9e:	887b      	ldrh	r3, [r7, #2]
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7fd fed6 	bl	8000954 <GPIO_WriteBit>
}
 8002ba8:	bf00      	nop
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <LCD_SPIConfig>:
  * @brief  Configures the LCD_SPI interface.
  * @param  None
  * @retval None
  */
void LCD_SPIConfig(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af00      	add	r7, sp, #0
  SPI_InitTypeDef    SPI_InitStructure;
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable LCD_SPI_SCK_GPIO_CLK, LCD_SPI_MISO_GPIO_CLK and LCD_SPI_MOSI_GPIO_CLK clock */
  RCC_AHB1PeriphClockCmd(LCD_SPI_SCK_GPIO_CLK | LCD_SPI_MISO_GPIO_CLK | LCD_SPI_MOSI_GPIO_CLK, ENABLE);
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	2020      	movs	r0, #32
 8002bba:	f7fe fc35 	bl	8001428 <RCC_AHB1PeriphClockCmd>

  /* Enable LCD_SPI and SYSCFG clock  */
  RCC_APB2PeriphClockCmd(LCD_SPI_CLK, ENABLE);
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002bc4:	f7fe fc90 	bl	80014e8 <RCC_APB2PeriphClockCmd>
  
  /* Configure LCD_SPI SCK pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_SCK_PIN;
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002bcc:	2302      	movs	r3, #2
 8002bce:	727b      	strb	r3, [r7, #9]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	723b      	strb	r3, [r7, #8]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	72bb      	strb	r3, [r7, #10]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	72fb      	strb	r3, [r7, #11]
  GPIO_Init(LCD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8002bdc:	1d3b      	adds	r3, r7, #4
 8002bde:	4619      	mov	r1, r3
 8002be0:	4823      	ldr	r0, [pc, #140]	; (8002c70 <LCD_SPIConfig+0xc0>)
 8002be2:	f7fd fe0b 	bl	80007fc <GPIO_Init>

  /* Configure LCD_SPI MISO pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MISO_PIN;
 8002be6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bea:	607b      	str	r3, [r7, #4]
  GPIO_Init(LCD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 8002bec:	1d3b      	adds	r3, r7, #4
 8002bee:	4619      	mov	r1, r3
 8002bf0:	481f      	ldr	r0, [pc, #124]	; (8002c70 <LCD_SPIConfig+0xc0>)
 8002bf2:	f7fd fe03 	bl	80007fc <GPIO_Init>

  /* Configure LCD_SPI MOSI pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MOSI_PIN;
 8002bf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bfa:	607b      	str	r3, [r7, #4]
  GPIO_Init(LCD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 8002bfc:	1d3b      	adds	r3, r7, #4
 8002bfe:	4619      	mov	r1, r3
 8002c00:	481b      	ldr	r0, [pc, #108]	; (8002c70 <LCD_SPIConfig+0xc0>)
 8002c02:	f7fd fdfb 	bl	80007fc <GPIO_Init>

  /* Connect SPI SCK */
  GPIO_PinAFConfig(LCD_SPI_SCK_GPIO_PORT, LCD_SPI_SCK_SOURCE, LCD_SPI_SCK_AF);
 8002c06:	2205      	movs	r2, #5
 8002c08:	2107      	movs	r1, #7
 8002c0a:	4819      	ldr	r0, [pc, #100]	; (8002c70 <LCD_SPIConfig+0xc0>)
 8002c0c:	f7fd feba 	bl	8000984 <GPIO_PinAFConfig>

  /* Connect SPI MISO */
  GPIO_PinAFConfig(LCD_SPI_MISO_GPIO_PORT, LCD_SPI_MISO_SOURCE, LCD_SPI_MISO_AF);
 8002c10:	2205      	movs	r2, #5
 8002c12:	2108      	movs	r1, #8
 8002c14:	4816      	ldr	r0, [pc, #88]	; (8002c70 <LCD_SPIConfig+0xc0>)
 8002c16:	f7fd feb5 	bl	8000984 <GPIO_PinAFConfig>

  /* Connect SPI MOSI */
  GPIO_PinAFConfig(LCD_SPI_MOSI_GPIO_PORT, LCD_SPI_MOSI_SOURCE, LCD_SPI_MOSI_AF);
 8002c1a:	2205      	movs	r2, #5
 8002c1c:	2109      	movs	r1, #9
 8002c1e:	4814      	ldr	r0, [pc, #80]	; (8002c70 <LCD_SPIConfig+0xc0>)
 8002c20:	f7fd feb0 	bl	8000984 <GPIO_PinAFConfig>
  
  SPI_I2S_DeInit(LCD_SPI);
 8002c24:	4813      	ldr	r0, [pc, #76]	; (8002c74 <LCD_SPIConfig+0xc4>)
 8002c26:	f7fe fd19 	bl	800165c <SPI_I2S_DeInit>
  
  /* SPI Config */
  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex; //SPI_Direction_1Line_Tx;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	81bb      	strh	r3, [r7, #12]
  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8002c2e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002c32:	81fb      	strh	r3, [r7, #14]
  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8002c34:	2300      	movs	r3, #0
 8002c36:	823b      	strh	r3, [r7, #16]
  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	827b      	strh	r3, [r7, #18]
  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	82bb      	strh	r3, [r7, #20]
  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8002c40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c44:	82fb      	strh	r3, [r7, #22]
  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4; 
 8002c46:	2308      	movs	r3, #8
 8002c48:	833b      	strh	r3, [r7, #24]
  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	837b      	strh	r3, [r7, #26]
  SPI_InitStructure.SPI_CRCPolynomial = 7;
 8002c4e:	2307      	movs	r3, #7
 8002c50:	83bb      	strh	r3, [r7, #28]
  SPI_Init(LCD_SPI, &SPI_InitStructure);
 8002c52:	f107 030c 	add.w	r3, r7, #12
 8002c56:	4619      	mov	r1, r3
 8002c58:	4806      	ldr	r0, [pc, #24]	; (8002c74 <LCD_SPIConfig+0xc4>)
 8002c5a:	f7fe fd6d 	bl	8001738 <SPI_Init>

  /* SPI enable */
  SPI_Cmd(LCD_SPI, ENABLE);
 8002c5e:	2101      	movs	r1, #1
 8002c60:	4804      	ldr	r0, [pc, #16]	; (8002c74 <LCD_SPIConfig+0xc4>)
 8002c62:	f7fe fdad 	bl	80017c0 <SPI_Cmd>
}
 8002c66:	bf00      	nop
 8002c68:	3720      	adds	r7, #32
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40021400 	.word	0x40021400
 8002c74:	40015000 	.word	0x40015000

08002c78 <LCD_AF_GPIOConfig>:
  * @brief GPIO config for LTDC.
  * @retval
  *  None
  */
static void LCD_AF_GPIOConfig(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable GPIOI, GPIOJ, GPIOG, GPIOF, GPIOH AHB Clocks */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | \
 8002c7e:	2101      	movs	r1, #1
 8002c80:	206f      	movs	r0, #111	; 0x6f
 8002c82:	f7fe fbd1 	bl	8001428 <RCC_AHB1PeriphClockCmd>
           -----------------------------------------------------

*/

 /* GPIOA configuration */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_LTDC);
 8002c86:	220e      	movs	r2, #14
 8002c88:	2103      	movs	r1, #3
 8002c8a:	4853      	ldr	r0, [pc, #332]	; (8002dd8 <LCD_AF_GPIOConfig+0x160>)
 8002c8c:	f7fd fe7a 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_LTDC);
 8002c90:	220e      	movs	r2, #14
 8002c92:	2104      	movs	r1, #4
 8002c94:	4850      	ldr	r0, [pc, #320]	; (8002dd8 <LCD_AF_GPIOConfig+0x160>)
 8002c96:	f7fd fe75 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_LTDC);
 8002c9a:	220e      	movs	r2, #14
 8002c9c:	2106      	movs	r1, #6
 8002c9e:	484e      	ldr	r0, [pc, #312]	; (8002dd8 <LCD_AF_GPIOConfig+0x160>)
 8002ca0:	f7fd fe70 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_LTDC);
 8002ca4:	220e      	movs	r2, #14
 8002ca6:	210b      	movs	r1, #11
 8002ca8:	484b      	ldr	r0, [pc, #300]	; (8002dd8 <LCD_AF_GPIOConfig+0x160>)
 8002caa:	f7fd fe6b 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_LTDC);
 8002cae:	220e      	movs	r2, #14
 8002cb0:	210c      	movs	r1, #12
 8002cb2:	4849      	ldr	r0, [pc, #292]	; (8002dd8 <LCD_AF_GPIOConfig+0x160>)
 8002cb4:	f7fd fe66 	bl	8000984 <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_6 | \
 8002cb8:	f641 0358 	movw	r3, #6232	; 0x1858
 8002cbc:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_11 | GPIO_Pin_12;
                             
  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	717b      	strb	r3, [r7, #5]
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	713b      	strb	r3, [r7, #4]
  GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cce:	463b      	mov	r3, r7
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4841      	ldr	r0, [pc, #260]	; (8002dd8 <LCD_AF_GPIOConfig+0x160>)
 8002cd4:	f7fd fd92 	bl	80007fc <GPIO_Init>
  
 /* GPIOB configuration */  
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, 0x09);
 8002cd8:	2209      	movs	r2, #9
 8002cda:	2100      	movs	r1, #0
 8002cdc:	483f      	ldr	r0, [pc, #252]	; (8002ddc <LCD_AF_GPIOConfig+0x164>)
 8002cde:	f7fd fe51 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, 0x09);
 8002ce2:	2209      	movs	r2, #9
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	483d      	ldr	r0, [pc, #244]	; (8002ddc <LCD_AF_GPIOConfig+0x164>)
 8002ce8:	f7fd fe4c 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_LTDC);
 8002cec:	220e      	movs	r2, #14
 8002cee:	2108      	movs	r1, #8
 8002cf0:	483a      	ldr	r0, [pc, #232]	; (8002ddc <LCD_AF_GPIOConfig+0x164>)
 8002cf2:	f7fd fe47 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_LTDC);
 8002cf6:	220e      	movs	r2, #14
 8002cf8:	2109      	movs	r1, #9
 8002cfa:	4838      	ldr	r0, [pc, #224]	; (8002ddc <LCD_AF_GPIOConfig+0x164>)
 8002cfc:	f7fd fe42 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_LTDC);
 8002d00:	220e      	movs	r2, #14
 8002d02:	210a      	movs	r1, #10
 8002d04:	4835      	ldr	r0, [pc, #212]	; (8002ddc <LCD_AF_GPIOConfig+0x164>)
 8002d06:	f7fd fe3d 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_LTDC);
 8002d0a:	220e      	movs	r2, #14
 8002d0c:	210b      	movs	r1, #11
 8002d0e:	4833      	ldr	r0, [pc, #204]	; (8002ddc <LCD_AF_GPIOConfig+0x164>)
 8002d10:	f7fd fe38 	bl	8000984 <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | \
 8002d14:	f640 7303 	movw	r3, #3843	; 0xf03
 8002d18:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
  
  GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d1a:	463b      	mov	r3, r7
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	482f      	ldr	r0, [pc, #188]	; (8002ddc <LCD_AF_GPIOConfig+0x164>)
 8002d20:	f7fd fd6c 	bl	80007fc <GPIO_Init>

 /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_LTDC);
 8002d24:	220e      	movs	r2, #14
 8002d26:	2106      	movs	r1, #6
 8002d28:	482d      	ldr	r0, [pc, #180]	; (8002de0 <LCD_AF_GPIOConfig+0x168>)
 8002d2a:	f7fd fe2b 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_LTDC);
 8002d2e:	220e      	movs	r2, #14
 8002d30:	2107      	movs	r1, #7
 8002d32:	482b      	ldr	r0, [pc, #172]	; (8002de0 <LCD_AF_GPIOConfig+0x168>)
 8002d34:	f7fd fe26 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_LTDC);
 8002d38:	220e      	movs	r2, #14
 8002d3a:	210a      	movs	r1, #10
 8002d3c:	4828      	ldr	r0, [pc, #160]	; (8002de0 <LCD_AF_GPIOConfig+0x168>)
 8002d3e:	f7fd fe21 	bl	8000984 <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10;
 8002d42:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002d46:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d48:	463b      	mov	r3, r7
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4824      	ldr	r0, [pc, #144]	; (8002de0 <LCD_AF_GPIOConfig+0x168>)
 8002d4e:	f7fd fd55 	bl	80007fc <GPIO_Init>

 /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource3, GPIO_AF_LTDC);
 8002d52:	220e      	movs	r2, #14
 8002d54:	2103      	movs	r1, #3
 8002d56:	4823      	ldr	r0, [pc, #140]	; (8002de4 <LCD_AF_GPIOConfig+0x16c>)
 8002d58:	f7fd fe14 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_LTDC);
 8002d5c:	220e      	movs	r2, #14
 8002d5e:	2106      	movs	r1, #6
 8002d60:	4820      	ldr	r0, [pc, #128]	; (8002de4 <LCD_AF_GPIOConfig+0x16c>)
 8002d62:	f7fd fe0f 	bl	8000984 <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_6;
 8002d66:	2348      	movs	r3, #72	; 0x48
 8002d68:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d6a:	463b      	mov	r3, r7
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	481d      	ldr	r0, [pc, #116]	; (8002de4 <LCD_AF_GPIOConfig+0x16c>)
 8002d70:	f7fd fd44 	bl	80007fc <GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource10, GPIO_AF_LTDC);
 8002d74:	220e      	movs	r2, #14
 8002d76:	210a      	movs	r1, #10
 8002d78:	481b      	ldr	r0, [pc, #108]	; (8002de8 <LCD_AF_GPIOConfig+0x170>)
 8002d7a:	f7fd fe03 	bl	8000984 <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_10;
 8002d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d82:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOF, &GPIO_InitStruct);     
 8002d84:	463b      	mov	r3, r7
 8002d86:	4619      	mov	r1, r3
 8002d88:	4817      	ldr	r0, [pc, #92]	; (8002de8 <LCD_AF_GPIOConfig+0x170>)
 8002d8a:	f7fd fd37 	bl	80007fc <GPIO_Init>

 /* GPIOG configuration */  
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource6, GPIO_AF_LTDC);
 8002d8e:	220e      	movs	r2, #14
 8002d90:	2106      	movs	r1, #6
 8002d92:	4816      	ldr	r0, [pc, #88]	; (8002dec <LCD_AF_GPIOConfig+0x174>)
 8002d94:	f7fd fdf6 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource7, GPIO_AF_LTDC);
 8002d98:	220e      	movs	r2, #14
 8002d9a:	2107      	movs	r1, #7
 8002d9c:	4813      	ldr	r0, [pc, #76]	; (8002dec <LCD_AF_GPIOConfig+0x174>)
 8002d9e:	f7fd fdf1 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource10, 0x09);
 8002da2:	2209      	movs	r2, #9
 8002da4:	210a      	movs	r1, #10
 8002da6:	4811      	ldr	r0, [pc, #68]	; (8002dec <LCD_AF_GPIOConfig+0x174>)
 8002da8:	f7fd fdec 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource11, GPIO_AF_LTDC);
 8002dac:	220e      	movs	r2, #14
 8002dae:	210b      	movs	r1, #11
 8002db0:	480e      	ldr	r0, [pc, #56]	; (8002dec <LCD_AF_GPIOConfig+0x174>)
 8002db2:	f7fd fde7 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, 0x09);
 8002db6:	2209      	movs	r2, #9
 8002db8:	210c      	movs	r1, #12
 8002dba:	480c      	ldr	r0, [pc, #48]	; (8002dec <LCD_AF_GPIOConfig+0x174>)
 8002dbc:	f7fd fde2 	bl	8000984 <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10 | \
 8002dc0:	f44f 53e6 	mov.w	r3, #7360	; 0x1cc0
 8002dc4:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_11 | GPIO_Pin_12;
  
  GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002dc6:	463b      	mov	r3, r7
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4808      	ldr	r0, [pc, #32]	; (8002dec <LCD_AF_GPIOConfig+0x174>)
 8002dcc:	f7fd fd16 	bl	80007fc <GPIO_Init>
 
}
 8002dd0:	bf00      	nop
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40020000 	.word	0x40020000
 8002ddc:	40020400 	.word	0x40020400
 8002de0:	40020800 	.word	0x40020800
 8002de4:	40020c00 	.word	0x40020c00
 8002de8:	40021400 	.word	0x40021400
 8002dec:	40021800 	.word	0x40021800

08002df0 <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60fb      	str	r3, [r7, #12]
  for(index = nCount; index != 0; index--)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	e002      	b.n	8002e08 <delay+0x18>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	3b01      	subs	r3, #1
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f9      	bne.n	8002e02 <delay+0x12>
  {
  }
}
 8002e0e:	bf00      	nop
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <SDRAM_Init>:
  *         on the SDRAM.
  * @param  None
  * @retval None
  */
void SDRAM_Init(void)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b092      	sub	sp, #72	; 0x48
 8002e1e:	af00      	add	r7, sp, #0
  FMC_SDRAMInitTypeDef  FMC_SDRAMInitStructure;
  FMC_SDRAMTimingInitTypeDef  FMC_SDRAMTimingInitStructure; 
  
  /* GPIO configuration for FMC SDRAM bank */
  SDRAM_GPIOConfig();
 8002e20:	f000 f836 	bl	8002e90 <SDRAM_GPIOConfig>
  
  /* Enable FMC clock */
  RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FMC, ENABLE);
 8002e24:	2101      	movs	r1, #1
 8002e26:	2001      	movs	r0, #1
 8002e28:	f7fe fb1e 	bl	8001468 <RCC_AHB3PeriphClockCmd>
 
/* FMC Configuration ---------------------------------------------------------*/
/* FMC SDRAM Bank configuration */   
  /* Timing configuration for 84 Mhz of SD clock frequency (168Mhz/2) */
  /* TMRD: 2 Clock cycles */
  FMC_SDRAMTimingInitStructure.FMC_LoadToActiveDelay = 2;      
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	603b      	str	r3, [r7, #0]
  /* TXSR: min=70ns (6x11.90ns) */
  FMC_SDRAMTimingInitStructure.FMC_ExitSelfRefreshDelay = 7;
 8002e30:	2307      	movs	r3, #7
 8002e32:	607b      	str	r3, [r7, #4]
  /* TRAS: min=42ns (4x11.90ns) max=120k (ns) */
  FMC_SDRAMTimingInitStructure.FMC_SelfRefreshTime = 4;
 8002e34:	2304      	movs	r3, #4
 8002e36:	60bb      	str	r3, [r7, #8]
  /* TRC:  min=63 (6x11.90ns) */        
  FMC_SDRAMTimingInitStructure.FMC_RowCycleDelay = 7;         
 8002e38:	2307      	movs	r3, #7
 8002e3a:	60fb      	str	r3, [r7, #12]
  /* TWR:  2 Clock cycles */
  FMC_SDRAMTimingInitStructure.FMC_WriteRecoveryTime = 2;      
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	613b      	str	r3, [r7, #16]
  /* TRP:  15ns => 2x11.90ns */
  FMC_SDRAMTimingInitStructure.FMC_RPDelay = 2;                
 8002e40:	2302      	movs	r3, #2
 8002e42:	617b      	str	r3, [r7, #20]
  /* TRCD: 15ns => 2x11.90ns */
  FMC_SDRAMTimingInitStructure.FMC_RCDDelay = 2;
 8002e44:	2302      	movs	r3, #2
 8002e46:	61bb      	str	r3, [r7, #24]

/* FMC SDRAM control configuration */
  FMC_SDRAMInitStructure.FMC_Bank = FMC_Bank2_SDRAM;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	61fb      	str	r3, [r7, #28]
  /* Row addressing: [7:0] */
  FMC_SDRAMInitStructure.FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	623b      	str	r3, [r7, #32]
  /* Column addressing: [11:0] */
  FMC_SDRAMInitStructure.FMC_RowBitsNumber = FMC_RowBits_Number_12b;
 8002e50:	2304      	movs	r3, #4
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24
  FMC_SDRAMInitStructure.FMC_SDMemoryDataWidth = SDRAM_MEMORY_WIDTH;
 8002e54:	2310      	movs	r3, #16
 8002e56:	62bb      	str	r3, [r7, #40]	; 0x28
  FMC_SDRAMInitStructure.FMC_InternalBankNumber = FMC_InternalBank_Number_4;
 8002e58:	2340      	movs	r3, #64	; 0x40
 8002e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  FMC_SDRAMInitStructure.FMC_CASLatency = SDRAM_CAS_LATENCY; 
 8002e5c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002e60:	633b      	str	r3, [r7, #48]	; 0x30
  FMC_SDRAMInitStructure.FMC_WriteProtection = FMC_Write_Protection_Disable;
 8002e62:	2300      	movs	r3, #0
 8002e64:	637b      	str	r3, [r7, #52]	; 0x34
  FMC_SDRAMInitStructure.FMC_SDClockPeriod = SDCLOCK_PERIOD;  
 8002e66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e6a:	63bb      	str	r3, [r7, #56]	; 0x38
  FMC_SDRAMInitStructure.FMC_ReadBurst = SDRAM_READBURST;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FMC_SDRAMInitStructure.FMC_ReadPipeDelay = FMC_ReadPipe_Delay_1;
 8002e70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e74:	643b      	str	r3, [r7, #64]	; 0x40
  FMC_SDRAMInitStructure.FMC_SDRAMTimingStruct = &FMC_SDRAMTimingInitStructure;
 8002e76:	463b      	mov	r3, r7
 8002e78:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* FMC SDRAM bank initialization */
  FMC_SDRAMInit(&FMC_SDRAMInitStructure); 
 8002e7a:	f107 031c 	add.w	r3, r7, #28
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fd fb9c 	bl	80005bc <FMC_SDRAMInit>
  
  /* FMC SDRAM device initialization sequence */
  SDRAM_InitSequence(); 
 8002e84:	f000 f910 	bl	80030a8 <SDRAM_InitSequence>
  
}
 8002e88:	bf00      	nop
 8002e8a:	3748      	adds	r7, #72	; 0x48
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <SDRAM_GPIOConfig>:
  * @brief  Configures all SDRAM memory I/Os pins. 
  * @param  None. 
  * @retval None.
  */
void SDRAM_GPIOConfig(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable GPIOs clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD |
 8002e96:	2101      	movs	r1, #1
 8002e98:	207e      	movs	r0, #126	; 0x7e
 8002e9a:	f7fe fac5 	bl	8001428 <RCC_AHB1PeriphClockCmd>
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	71fb      	strb	r3, [r7, #7]

  /* GPIOB configuration */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource5 , GPIO_AF_FMC);
 8002eae:	220c      	movs	r2, #12
 8002eb0:	2105      	movs	r1, #5
 8002eb2:	4877      	ldr	r0, [pc, #476]	; (8003090 <SDRAM_GPIOConfig+0x200>)
 8002eb4:	f7fd fd66 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6 , GPIO_AF_FMC);
 8002eb8:	220c      	movs	r2, #12
 8002eba:	2106      	movs	r1, #6
 8002ebc:	4874      	ldr	r0, [pc, #464]	; (8003090 <SDRAM_GPIOConfig+0x200>)
 8002ebe:	f7fd fd61 	bl	8000984 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5  | GPIO_Pin_6;      
 8002ec2:	2360      	movs	r3, #96	; 0x60
 8002ec4:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002ec6:	463b      	mov	r3, r7
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4871      	ldr	r0, [pc, #452]	; (8003090 <SDRAM_GPIOConfig+0x200>)
 8002ecc:	f7fd fc96 	bl	80007fc <GPIO_Init>

  /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource0 , GPIO_AF_FMC);
 8002ed0:	220c      	movs	r2, #12
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	486f      	ldr	r0, [pc, #444]	; (8003094 <SDRAM_GPIOConfig+0x204>)
 8002ed6:	f7fd fd55 	bl	8000984 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;      
 8002eda:	2301      	movs	r3, #1
 8002edc:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8002ede:	463b      	mov	r3, r7
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	486c      	ldr	r0, [pc, #432]	; (8003094 <SDRAM_GPIOConfig+0x204>)
 8002ee4:	f7fd fc8a 	bl	80007fc <GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FMC);
 8002ee8:	220c      	movs	r2, #12
 8002eea:	2100      	movs	r1, #0
 8002eec:	486a      	ldr	r0, [pc, #424]	; (8003098 <SDRAM_GPIOConfig+0x208>)
 8002eee:	f7fd fd49 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_FMC);
 8002ef2:	220c      	movs	r2, #12
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	4868      	ldr	r0, [pc, #416]	; (8003098 <SDRAM_GPIOConfig+0x208>)
 8002ef8:	f7fd fd44 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_FMC);
 8002efc:	220c      	movs	r2, #12
 8002efe:	2108      	movs	r1, #8
 8002f00:	4865      	ldr	r0, [pc, #404]	; (8003098 <SDRAM_GPIOConfig+0x208>)
 8002f02:	f7fd fd3f 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FMC);
 8002f06:	220c      	movs	r2, #12
 8002f08:	2109      	movs	r1, #9
 8002f0a:	4863      	ldr	r0, [pc, #396]	; (8003098 <SDRAM_GPIOConfig+0x208>)
 8002f0c:	f7fd fd3a 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FMC);
 8002f10:	220c      	movs	r2, #12
 8002f12:	210a      	movs	r1, #10
 8002f14:	4860      	ldr	r0, [pc, #384]	; (8003098 <SDRAM_GPIOConfig+0x208>)
 8002f16:	f7fd fd35 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FMC);
 8002f1a:	220c      	movs	r2, #12
 8002f1c:	210e      	movs	r1, #14
 8002f1e:	485e      	ldr	r0, [pc, #376]	; (8003098 <SDRAM_GPIOConfig+0x208>)
 8002f20:	f7fd fd30 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FMC);
 8002f24:	220c      	movs	r2, #12
 8002f26:	210f      	movs	r1, #15
 8002f28:	485b      	ldr	r0, [pc, #364]	; (8003098 <SDRAM_GPIOConfig+0x208>)
 8002f2a:	f7fd fd2b 	bl	8000984 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1  | GPIO_Pin_8 |
 8002f2e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002f32:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_14 |
                                GPIO_Pin_15;

  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002f34:	463b      	mov	r3, r7
 8002f36:	4619      	mov	r1, r3
 8002f38:	4857      	ldr	r0, [pc, #348]	; (8003098 <SDRAM_GPIOConfig+0x208>)
 8002f3a:	f7fd fc5f 	bl	80007fc <GPIO_Init>

  /* GPIOE configuration */
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource0 , GPIO_AF_FMC);
 8002f3e:	220c      	movs	r2, #12
 8002f40:	2100      	movs	r1, #0
 8002f42:	4856      	ldr	r0, [pc, #344]	; (800309c <SDRAM_GPIOConfig+0x20c>)
 8002f44:	f7fd fd1e 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource1 , GPIO_AF_FMC);
 8002f48:	220c      	movs	r2, #12
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	4853      	ldr	r0, [pc, #332]	; (800309c <SDRAM_GPIOConfig+0x20c>)
 8002f4e:	f7fd fd19 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_FMC);
 8002f52:	220c      	movs	r2, #12
 8002f54:	2107      	movs	r1, #7
 8002f56:	4851      	ldr	r0, [pc, #324]	; (800309c <SDRAM_GPIOConfig+0x20c>)
 8002f58:	f7fd fd14 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_FMC);
 8002f5c:	220c      	movs	r2, #12
 8002f5e:	2108      	movs	r1, #8
 8002f60:	484e      	ldr	r0, [pc, #312]	; (800309c <SDRAM_GPIOConfig+0x20c>)
 8002f62:	f7fd fd0f 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_FMC);
 8002f66:	220c      	movs	r2, #12
 8002f68:	2109      	movs	r1, #9
 8002f6a:	484c      	ldr	r0, [pc, #304]	; (800309c <SDRAM_GPIOConfig+0x20c>)
 8002f6c:	f7fd fd0a 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_FMC);
 8002f70:	220c      	movs	r2, #12
 8002f72:	210a      	movs	r1, #10
 8002f74:	4849      	ldr	r0, [pc, #292]	; (800309c <SDRAM_GPIOConfig+0x20c>)
 8002f76:	f7fd fd05 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_FMC);
 8002f7a:	220c      	movs	r2, #12
 8002f7c:	210b      	movs	r1, #11
 8002f7e:	4847      	ldr	r0, [pc, #284]	; (800309c <SDRAM_GPIOConfig+0x20c>)
 8002f80:	f7fd fd00 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_FMC);
 8002f84:	220c      	movs	r2, #12
 8002f86:	210c      	movs	r1, #12
 8002f88:	4844      	ldr	r0, [pc, #272]	; (800309c <SDRAM_GPIOConfig+0x20c>)
 8002f8a:	f7fd fcfb 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_FMC);
 8002f8e:	220c      	movs	r2, #12
 8002f90:	210d      	movs	r1, #13
 8002f92:	4842      	ldr	r0, [pc, #264]	; (800309c <SDRAM_GPIOConfig+0x20c>)
 8002f94:	f7fd fcf6 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_FMC);
 8002f98:	220c      	movs	r2, #12
 8002f9a:	210e      	movs	r1, #14
 8002f9c:	483f      	ldr	r0, [pc, #252]	; (800309c <SDRAM_GPIOConfig+0x20c>)
 8002f9e:	f7fd fcf1 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_FMC);
 8002fa2:	220c      	movs	r2, #12
 8002fa4:	210f      	movs	r1, #15
 8002fa6:	483d      	ldr	r0, [pc, #244]	; (800309c <SDRAM_GPIOConfig+0x20c>)
 8002fa8:	f7fd fcec 	bl	8000984 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1  | GPIO_Pin_7 |
 8002fac:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002fb0:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_8  | GPIO_Pin_9  | GPIO_Pin_10 |
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |
                                GPIO_Pin_14 | GPIO_Pin_15;

  GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002fb2:	463b      	mov	r3, r7
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4839      	ldr	r0, [pc, #228]	; (800309c <SDRAM_GPIOConfig+0x20c>)
 8002fb8:	f7fd fc20 	bl	80007fc <GPIO_Init>

  /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource0 , GPIO_AF_FMC);
 8002fbc:	220c      	movs	r2, #12
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	4837      	ldr	r0, [pc, #220]	; (80030a0 <SDRAM_GPIOConfig+0x210>)
 8002fc2:	f7fd fcdf 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource1 , GPIO_AF_FMC);
 8002fc6:	220c      	movs	r2, #12
 8002fc8:	2101      	movs	r1, #1
 8002fca:	4835      	ldr	r0, [pc, #212]	; (80030a0 <SDRAM_GPIOConfig+0x210>)
 8002fcc:	f7fd fcda 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource2 , GPIO_AF_FMC);
 8002fd0:	220c      	movs	r2, #12
 8002fd2:	2102      	movs	r1, #2
 8002fd4:	4832      	ldr	r0, [pc, #200]	; (80030a0 <SDRAM_GPIOConfig+0x210>)
 8002fd6:	f7fd fcd5 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource3 , GPIO_AF_FMC);
 8002fda:	220c      	movs	r2, #12
 8002fdc:	2103      	movs	r1, #3
 8002fde:	4830      	ldr	r0, [pc, #192]	; (80030a0 <SDRAM_GPIOConfig+0x210>)
 8002fe0:	f7fd fcd0 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource4 , GPIO_AF_FMC);
 8002fe4:	220c      	movs	r2, #12
 8002fe6:	2104      	movs	r1, #4
 8002fe8:	482d      	ldr	r0, [pc, #180]	; (80030a0 <SDRAM_GPIOConfig+0x210>)
 8002fea:	f7fd fccb 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource5 , GPIO_AF_FMC);
 8002fee:	220c      	movs	r2, #12
 8002ff0:	2105      	movs	r1, #5
 8002ff2:	482b      	ldr	r0, [pc, #172]	; (80030a0 <SDRAM_GPIOConfig+0x210>)
 8002ff4:	f7fd fcc6 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource11 , GPIO_AF_FMC);
 8002ff8:	220c      	movs	r2, #12
 8002ffa:	210b      	movs	r1, #11
 8002ffc:	4828      	ldr	r0, [pc, #160]	; (80030a0 <SDRAM_GPIOConfig+0x210>)
 8002ffe:	f7fd fcc1 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource12 , GPIO_AF_FMC);
 8003002:	220c      	movs	r2, #12
 8003004:	210c      	movs	r1, #12
 8003006:	4826      	ldr	r0, [pc, #152]	; (80030a0 <SDRAM_GPIOConfig+0x210>)
 8003008:	f7fd fcbc 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource13 , GPIO_AF_FMC);
 800300c:	220c      	movs	r2, #12
 800300e:	210d      	movs	r1, #13
 8003010:	4823      	ldr	r0, [pc, #140]	; (80030a0 <SDRAM_GPIOConfig+0x210>)
 8003012:	f7fd fcb7 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource14 , GPIO_AF_FMC);
 8003016:	220c      	movs	r2, #12
 8003018:	210e      	movs	r1, #14
 800301a:	4821      	ldr	r0, [pc, #132]	; (80030a0 <SDRAM_GPIOConfig+0x210>)
 800301c:	f7fd fcb2 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource15 , GPIO_AF_FMC);
 8003020:	220c      	movs	r2, #12
 8003022:	210f      	movs	r1, #15
 8003024:	481e      	ldr	r0, [pc, #120]	; (80030a0 <SDRAM_GPIOConfig+0x210>)
 8003026:	f7fd fcad 	bl	8000984 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1 | GPIO_Pin_2 | 
 800302a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800302e:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_3  | GPIO_Pin_4 | GPIO_Pin_5 |
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |
                                GPIO_Pin_14 | GPIO_Pin_15;      

  GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003030:	463b      	mov	r3, r7
 8003032:	4619      	mov	r1, r3
 8003034:	481a      	ldr	r0, [pc, #104]	; (80030a0 <SDRAM_GPIOConfig+0x210>)
 8003036:	f7fd fbe1 	bl	80007fc <GPIO_Init>

  /* GPIOG configuration */
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource0 , GPIO_AF_FMC);
 800303a:	220c      	movs	r2, #12
 800303c:	2100      	movs	r1, #0
 800303e:	4819      	ldr	r0, [pc, #100]	; (80030a4 <SDRAM_GPIOConfig+0x214>)
 8003040:	f7fd fca0 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource1 , GPIO_AF_FMC);
 8003044:	220c      	movs	r2, #12
 8003046:	2101      	movs	r1, #1
 8003048:	4816      	ldr	r0, [pc, #88]	; (80030a4 <SDRAM_GPIOConfig+0x214>)
 800304a:	f7fd fc9b 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource4 , GPIO_AF_FMC);
 800304e:	220c      	movs	r2, #12
 8003050:	2104      	movs	r1, #4
 8003052:	4814      	ldr	r0, [pc, #80]	; (80030a4 <SDRAM_GPIOConfig+0x214>)
 8003054:	f7fd fc96 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource5 , GPIO_AF_FMC);
 8003058:	220c      	movs	r2, #12
 800305a:	2105      	movs	r1, #5
 800305c:	4811      	ldr	r0, [pc, #68]	; (80030a4 <SDRAM_GPIOConfig+0x214>)
 800305e:	f7fd fc91 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource8 , GPIO_AF_FMC);
 8003062:	220c      	movs	r2, #12
 8003064:	2108      	movs	r1, #8
 8003066:	480f      	ldr	r0, [pc, #60]	; (80030a4 <SDRAM_GPIOConfig+0x214>)
 8003068:	f7fd fc8c 	bl	8000984 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource15 , GPIO_AF_FMC);
 800306c:	220c      	movs	r2, #12
 800306e:	210f      	movs	r1, #15
 8003070:	480c      	ldr	r0, [pc, #48]	; (80030a4 <SDRAM_GPIOConfig+0x214>)
 8003072:	f7fd fc87 	bl	8000984 <GPIO_PinAFConfig>
  

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4 |
 8003076:	f248 1333 	movw	r3, #33075	; 0x8133
 800307a:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_5 | GPIO_Pin_8 | GPIO_Pin_15;

  GPIO_Init(GPIOG, &GPIO_InitStructure);    
 800307c:	463b      	mov	r3, r7
 800307e:	4619      	mov	r1, r3
 8003080:	4808      	ldr	r0, [pc, #32]	; (80030a4 <SDRAM_GPIOConfig+0x214>)
 8003082:	f7fd fbbb 	bl	80007fc <GPIO_Init>
}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40020400 	.word	0x40020400
 8003094:	40020800 	.word	0x40020800
 8003098:	40020c00 	.word	0x40020c00
 800309c:	40021000 	.word	0x40021000
 80030a0:	40021400 	.word	0x40021400
 80030a4:	40021800 	.word	0x40021800

080030a8 <SDRAM_InitSequence>:
  * @brief  Executes the SDRAM memory initialization sequence. 
  * @param  None. 
  * @retval None.
  */
void SDRAM_InitSequence(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
  FMC_SDRAMCommandTypeDef FMC_SDRAMCommandStructure;
  uint32_t tmpr = 0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	617b      	str	r3, [r7, #20]
  
/* Step 3 --------------------------------------------------------------------*/
  /* Configure a clock configuration enable command */
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_CLK_Enabled;
 80030b2:	2301      	movs	r3, #1
 80030b4:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 80030b6:	2308      	movs	r3, #8
 80030b8:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 80030ba:	2301      	movs	r3, #1
 80030bc:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 80030be:	2300      	movs	r3, #0
 80030c0:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 80030c2:	bf00      	nop
 80030c4:	2120      	movs	r1, #32
 80030c6:	2001      	movs	r0, #1
 80030c8:	f7fd fb5a 	bl	8000780 <FMC_GetFlagStatus>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f8      	bne.n	80030c4 <SDRAM_InitSequence+0x1c>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);  
 80030d2:	1d3b      	adds	r3, r7, #4
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fd fb1f 	bl	8000718 <FMC_SDRAMCmdConfig>
  
/* Step 4 --------------------------------------------------------------------*/
  /* Insert 100 ms delay */
  __Delay(10);
 80030da:	200a      	movs	r0, #10
 80030dc:	f000 f85c 	bl	8003198 <delay>
    
/* Step 5 --------------------------------------------------------------------*/
  /* Configure a PALL (precharge all) command */ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_PALL;
 80030e0:	2302      	movs	r3, #2
 80030e2:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 80030e4:	2308      	movs	r3, #8
 80030e6:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 80030e8:	2301      	movs	r3, #1
 80030ea:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 80030ec:	2300      	movs	r3, #0
 80030ee:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 80030f0:	bf00      	nop
 80030f2:	2120      	movs	r1, #32
 80030f4:	2001      	movs	r0, #1
 80030f6:	f7fd fb43 	bl	8000780 <FMC_GetFlagStatus>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1f8      	bne.n	80030f2 <SDRAM_InitSequence+0x4a>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8003100:	1d3b      	adds	r3, r7, #4
 8003102:	4618      	mov	r0, r3
 8003104:	f7fd fb08 	bl	8000718 <FMC_SDRAMCmdConfig>
  
/* Step 6 --------------------------------------------------------------------*/
  /* Configure a Auto-Refresh command */ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_AutoRefresh;
 8003108:	2303      	movs	r3, #3
 800310a:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 800310c:	2308      	movs	r3, #8
 800310e:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 4;
 8003110:	2304      	movs	r3, #4
 8003112:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 8003114:	2300      	movs	r3, #0
 8003116:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8003118:	bf00      	nop
 800311a:	2120      	movs	r1, #32
 800311c:	2001      	movs	r0, #1
 800311e:	f7fd fb2f 	bl	8000780 <FMC_GetFlagStatus>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1f8      	bne.n	800311a <SDRAM_InitSequence+0x72>
  {
  }
  /* Send the  first command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8003128:	1d3b      	adds	r3, r7, #4
 800312a:	4618      	mov	r0, r3
 800312c:	f7fd faf4 	bl	8000718 <FMC_SDRAMCmdConfig>
  
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8003130:	bf00      	nop
 8003132:	2120      	movs	r1, #32
 8003134:	2001      	movs	r0, #1
 8003136:	f7fd fb23 	bl	8000780 <FMC_GetFlagStatus>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1f8      	bne.n	8003132 <SDRAM_InitSequence+0x8a>
  {
  }
  /* Send the second command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8003140:	1d3b      	adds	r3, r7, #4
 8003142:	4618      	mov	r0, r3
 8003144:	f7fd fae8 	bl	8000718 <FMC_SDRAMCmdConfig>
  
/* Step 7 --------------------------------------------------------------------*/
  /* Program the external memory mode register */
  tmpr = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_2          |
 8003148:	f240 2331 	movw	r3, #561	; 0x231
 800314c:	617b      	str	r3, [r7, #20]
                   SDRAM_MODEREG_CAS_LATENCY_3           |
                   SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                   SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  /* Configure a load Mode register command*/ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_LoadMode;
 800314e:	2304      	movs	r3, #4
 8003150:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8003152:	2308      	movs	r3, #8
 8003154:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 8003156:	2301      	movs	r3, #1
 8003158:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = tmpr;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 800315e:	bf00      	nop
 8003160:	2120      	movs	r1, #32
 8003162:	2001      	movs	r0, #1
 8003164:	f7fd fb0c 	bl	8000780 <FMC_GetFlagStatus>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f8      	bne.n	8003160 <SDRAM_InitSequence+0xb8>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 800316e:	1d3b      	adds	r3, r7, #4
 8003170:	4618      	mov	r0, r3
 8003172:	f7fd fad1 	bl	8000718 <FMC_SDRAMCmdConfig>
/* Step 8 --------------------------------------------------------------------*/

  /* Set the refresh rate counter */
  /* (7.81 us x Freq) - 20 */
  /* Set the device refresh counter */
  FMC_SetRefreshCount(683);
 8003176:	f240 20ab 	movw	r0, #683	; 0x2ab
 800317a:	f7fd faed 	bl	8000758 <FMC_SetRefreshCount>
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 800317e:	bf00      	nop
 8003180:	2120      	movs	r1, #32
 8003182:	2001      	movs	r0, #1
 8003184:	f7fd fafc 	bl	8000780 <FMC_GetFlagStatus>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f8      	bne.n	8003180 <SDRAM_InitSequence+0xd8>
  {
  }
}
 800318e:	bf00      	nop
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 80031a0:	2300      	movs	r3, #0
 80031a2:	60fb      	str	r3, [r7, #12]
  for(index = (100000 * nCount); index != 0; index--)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a08      	ldr	r2, [pc, #32]	; (80031c8 <delay+0x30>)
 80031a8:	fb02 f303 	mul.w	r3, r2, r3
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	e002      	b.n	80031b6 <delay+0x1e>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1f9      	bne.n	80031b0 <delay+0x18>
  {
  }
}
 80031bc:	bf00      	nop
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	000186a0 	.word	0x000186a0

080031cc <Delayms>:
 * @param  Delays for specific amount of milliseconds
 * @param  millis: Time in milliseconds for delay
 * @retval None
 * @note   Declared as static inline
 */
static __INLINE void Delayms(uint32_t millis) {
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
	volatile uint32_t timer = TM_Time;
 80031d4:	4b11      	ldr	r3, [pc, #68]	; (800321c <Delayms+0x50>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031da:	f3ef 8305 	mrs	r3, IPSR
 80031de:	60fb      	str	r3, [r7, #12]
  return(result);
 80031e0:	68fb      	ldr	r3, [r7, #12]

	/* Called from thread */
	if (!__get_IPSR()) {
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d111      	bne.n	800320a <Delayms+0x3e>
		/* Wait for timer to count milliseconds */
		while ((TM_Time - timer) < millis) {
 80031e6:	bf00      	nop
 80031e8:	4b0c      	ldr	r3, [pc, #48]	; (800321c <Delayms+0x50>)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	1ad2      	subs	r2, r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d3f8      	bcc.n	80031e8 <Delayms+0x1c>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
				millis--;
			}
		}
	}
}
 80031f6:	e00b      	b.n	8003210 <Delayms+0x44>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 80031f8:	4b09      	ldr	r3, [pc, #36]	; (8003220 <Delayms+0x54>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d002      	beq.n	800320a <Delayms+0x3e>
				millis--;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3b01      	subs	r3, #1
 8003208:	607b      	str	r3, [r7, #4]
		while (millis) {
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1f3      	bne.n	80031f8 <Delayms+0x2c>
}
 8003210:	bf00      	nop
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	20000184 	.word	0x20000184
 8003220:	e000e010 	.word	0xe000e010

08003224 <main>:
  * @brief   Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8003224:	b5b0      	push	{r4, r5, r7, lr}
 8003226:	b090      	sub	sp, #64	; 0x40
 8003228:	af00      	add	r7, sp, #0
  uint8_t already = 0;              //!< Indicates whether or not the board's USER button is already pressed
 800322a:	2300      	movs	r3, #0
 800322c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint8_t touching = 0;             //!< Indicates whether or not the TouchScreen is being touched
 8003230:	2300      	movs	r3, #0
 8003232:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  uint8_t buttonsEnabled = 0;       //!< Indicates whether or not the graphical mouse button controls are enabled
 8003236:	2300      	movs	r3, #0
 8003238:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  uint32_t counter = 0;             //!< Counts how many times the disabled graphical mouse button has been "pressed"/touched
 800323c:	2300      	movs	r3, #0
 800323e:	63bb      	str	r3, [r7, #56]	; 0x38
  static TP_STATE* TP_State;        //!< Holds the TouchScreen state data
  TM_USB_HIDDEVICE_Mouse_t Mouse;   //!< Holds the HID device report data
  char hexString[7] = {0};          // 6 chars for 0x0000 and the last 0 to make it a NULL '\0' terminated string
 8003240:	f107 031c 	add.w	r3, r7, #28
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	f8c3 2003 	str.w	r2, [r3, #3]
  char tmpStr[25] = "Temp Str";     // Used for temporary string operations
 800324c:	4a7e      	ldr	r2, [pc, #504]	; (8003448 <main+0x224>)
 800324e:	463b      	mov	r3, r7
 8003250:	ca07      	ldmia	r2, {r0, r1, r2}
 8003252:	c303      	stmia	r3!, {r0, r1}
 8003254:	701a      	strb	r2, [r3, #0]
 8003256:	f107 0309 	add.w	r3, r7, #9
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	605a      	str	r2, [r3, #4]
 8003260:	609a      	str	r2, [r3, #8]
 8003262:	60da      	str	r2, [r3, #12]

  // Set up variables to keep track of the current and previous/last touch positions
  uint16_t currentX = 0, previousX = 0, currentY = 0, previousY = 0;
 8003264:	2300      	movs	r3, #0
 8003266:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003268:	2300      	movs	r3, #0
 800326a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800326c:	2300      	movs	r3, #0
 800326e:	867b      	strh	r3, [r7, #50]	; 0x32
 8003270:	2300      	movs	r3, #0
 8003272:	863b      	strh	r3, [r7, #48]	; 0x30
  uint16_t currentTouchDetected = 0, previousTouchDetected = 0;
 8003274:	2300      	movs	r3, #0
 8003276:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003278:	2300      	movs	r3, #0
 800327a:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* Initialize system */
  SystemInit();
 800327c:	f000 fe2c 	bl	8003ed8 <SystemInit>

  /* Initialize leds */
  TM_DISCO_LedInit();
 8003280:	f000 ffe2 	bl	8004248 <TM_DISCO_LedInit>

  /* Initialize button */
  TM_DISCO_ButtonInit();
 8003284:	f000 fff8 	bl	8004278 <TM_DISCO_ButtonInit>

  /* Initialize delay */
  TM_DELAY_Init();
 8003288:	f000 ffb6 	bl	80041f8 <TM_DELAY_Init>

  /* Initialize USB HID Device */
  TM_USB_HIDDEVICE_Init();
 800328c:	f001 f8d8 	bl	8004440 <TM_USB_HIDDEVICE_Init>

  /* Set default values for mouse struct */
  TM_USB_HIDDEVICE_MouseStructInit(&Mouse);
 8003290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003294:	4618      	mov	r0, r3
 8003296:	f001 f8fd 	bl	8004494 <TM_USB_HIDDEVICE_MouseStructInit>

  /* LCD initiatization */
  LCD_Init();
 800329a:	f7fe fff3 	bl	8002284 <LCD_Init>
  
  /* LCD Layer initiatization */
  LCD_LayerInit();
 800329e:	f7ff f863 	bl	8002368 <LCD_LayerInit>
    
  /* Enable the LTDC */
  LTDC_Cmd(ENABLE);
 80032a2:	2001      	movs	r0, #1
 80032a4:	f7fd fe7e 	bl	8000fa4 <LTDC_Cmd>
  
  /* Set LCD foreground layer */
  LCD_SetLayer(LCD_FOREGROUND_LAYER);
 80032a8:	2001      	movs	r0, #1
 80032aa:	f7ff f8d1 	bl	8002450 <LCD_SetLayer>
  
  /* Touch Panel configuration */
  TP_Config();
 80032ae:	f000 fd13 	bl	8003cd8 <TP_Config>

  LCD_SetFont(&Font8x8);
 80032b2:	4866      	ldr	r0, [pc, #408]	; (800344c <main+0x228>)
 80032b4:	f7ff f912 	bl	80024dc <LCD_SetFont>
  LCD_SetBackColor(LCD_COLOR_BLACK);
 80032b8:	2000      	movs	r0, #0
 80032ba:	f7ff f8fd 	bl	80024b8 <LCD_SetBackColor>
  LCD_SetTextColor(LCD_COLOR_WHITE);
 80032be:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80032c2:	f7ff f8e7 	bl	8002494 <LCD_SetTextColor>
  LCD_DisplayStringLine(LINE(1), (uint8_t*)"Touch Coordinates:");
 80032c6:	f7ff f919 	bl	80024fc <LCD_GetFont>
 80032ca:	4603      	mov	r3, r0
 80032cc:	88db      	ldrh	r3, [r3, #6]
 80032ce:	4960      	ldr	r1, [pc, #384]	; (8003450 <main+0x22c>)
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff f9f7 	bl	80026c4 <LCD_DisplayStringLine>

  while (1)
  {

    // Get the TouchScreen state
    TP_State = IOE_TP_GetState();
 80032d6:	f7fe fad7 	bl	8001888 <IOE_TP_GetState>
 80032da:	4602      	mov	r2, r0
 80032dc:	4b5d      	ldr	r3, [pc, #372]	; (8003454 <main+0x230>)
 80032de:	601a      	str	r2, [r3, #0]

    // Check if the TouchScreen was touched
    if ( TP_State->TouchDetected ) {
 80032e0:	4b5c      	ldr	r3, [pc, #368]	; (8003454 <main+0x230>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d037      	beq.n	800335a <main+0x136>
      // Save the touch coordinates of this first touch
      previousX = TP_State->X;
 80032ea:	4b5a      	ldr	r3, [pc, #360]	; (8003454 <main+0x230>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	885b      	ldrh	r3, [r3, #2]
 80032f0:	86bb      	strh	r3, [r7, #52]	; 0x34
      previousY = TP_State->Y;
 80032f2:	4b58      	ldr	r3, [pc, #352]	; (8003454 <main+0x230>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	889b      	ldrh	r3, [r3, #4]
 80032f8:	863b      	strh	r3, [r7, #48]	; 0x30
      previousTouchDetected = TP_State->TouchDetected;
 80032fa:	4b56      	ldr	r3, [pc, #344]	; (8003454 <main+0x230>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	85bb      	strh	r3, [r7, #44]	; 0x2c

      // Wait some time to verify that the touchscreen is still being touched (touch duration). It seems that two consecutive calls to IOE_TP_GetState() cannot be made
      Delayms(8);
 8003302:	2008      	movs	r0, #8
 8003304:	f7ff ff62 	bl	80031cc <Delayms>
      TP_State = IOE_TP_GetState();
 8003308:	f7fe fabe 	bl	8001888 <IOE_TP_GetState>
 800330c:	4602      	mov	r2, r0
 800330e:	4b51      	ldr	r3, [pc, #324]	; (8003454 <main+0x230>)
 8003310:	601a      	str	r2, [r3, #0]

      // Check if TouchScreen is still touched
      if ( (TP_State->TouchDetected == 0) ) {
 8003312:	4b50      	ldr	r3, [pc, #320]	; (8003454 <main+0x230>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d109      	bne.n	8003330 <main+0x10c>
        // The touchscreen is no longer being touched after detecting the 1st touch, waiting and checking again. This could be a "tap" / mouse click (depends on the touch duration)
        touching = 0;
 800331c:	2300      	movs	r3, #0
 800331e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        TM_DISCO_LedToggle(LED_RED);
 8003322:	4a4d      	ldr	r2, [pc, #308]	; (8003458 <main+0x234>)
 8003324:	4b4c      	ldr	r3, [pc, #304]	; (8003458 <main+0x234>)
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 800332c:	6153      	str	r3, [r2, #20]
 800332e:	e017      	b.n	8003360 <main+0x13c>
      }
      else {
        // TouchScreen is still being touched. Proceed to move mouse pointer
        touching = 1;
 8003330:	2301      	movs	r3, #1
 8003332:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

        if ( TP_State->X == 0xEF ) {
 8003336:	4b47      	ldr	r3, [pc, #284]	; (8003454 <main+0x230>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	885b      	ldrh	r3, [r3, #2]
 800333c:	2bef      	cmp	r3, #239	; 0xef
 800333e:	d00f      	beq.n	8003360 <main+0x13c>
          // 0xEF is the max display x resolution x = 240 = 0xF0,
        }
        else {
          // Save the latest touchscreen data as the current state
          currentX = TP_State->X;
 8003340:	4b44      	ldr	r3, [pc, #272]	; (8003454 <main+0x230>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	885b      	ldrh	r3, [r3, #2]
 8003346:	86fb      	strh	r3, [r7, #54]	; 0x36
          currentY = TP_State->Y;
 8003348:	4b42      	ldr	r3, [pc, #264]	; (8003454 <main+0x230>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	889b      	ldrh	r3, [r3, #4]
 800334e:	867b      	strh	r3, [r7, #50]	; 0x32
          currentTouchDetected = TP_State->TouchDetected;
 8003350:	4b40      	ldr	r3, [pc, #256]	; (8003454 <main+0x230>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003358:	e002      	b.n	8003360 <main+0x13c>
        }
      }
    }
    else {
      touching = 0;
 800335a:	2300      	movs	r3, #0
 800335c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    // Check if the USB device is connected
    if ( TM_USB_HIDDEVICE_GetStatus() == TM_USB_HIDDEVICE_Status_Connected ) {
 8003360:	f001 f88c 	bl	800447c <TM_USB_HIDDEVICE_GetStatus>
 8003364:	4603      	mov	r3, r0
 8003366:	2b01      	cmp	r3, #1
 8003368:	f040 8424 	bne.w	8003bb4 <main+0x990>
      // Turn ON the STM32F429I-DISC1 discovery board's GREEN LED
      TM_DISCO_LedOn(LED_GREEN);
 800336c:	4b3a      	ldr	r3, [pc, #232]	; (8003458 <main+0x234>)
 800336e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003372:	831a      	strh	r2, [r3, #24]

      if ( touching == 0 ) {
 8003374:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003378:	2b00      	cmp	r3, #0
 800337a:	d041      	beq.n	8003400 <main+0x1dc>
        // TouchScreen is NOT being touched. Do nothing?
      }
      else {
        // TouchScreen is being touched. Move mouse pointer
        // Only move the mouse pointer IF the TouchScreen graphical mouse button controls are NOT enabled
        if ( buttonsEnabled == 0 ) {
 800337c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003380:	2b00      	cmp	r3, #0
 8003382:	d13d      	bne.n	8003400 <main+0x1dc>
          // Move the mouse pointer if there is a significant difference between the last two consecutive TouchScreen states
          if ( abs(currentX - previousX) > 2 ) {
 8003384:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003386:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	bfb8      	it	lt
 800338e:	425b      	neglt	r3, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	dd12      	ble.n	80033ba <main+0x196>
            Mouse.XAxis = (currentX - previousX)%0xE0; // X screen resolution is 240 (from 0 to 239); in hex 0xF0 (from 0 to 0xEF)
 8003394:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003396:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003398:	1ad2      	subs	r2, r2, r3
 800339a:	4b30      	ldr	r3, [pc, #192]	; (800345c <main+0x238>)
 800339c:	fb83 1302 	smull	r1, r3, r3, r2
 80033a0:	4413      	add	r3, r2
 80033a2:	11d9      	asrs	r1, r3, #7
 80033a4:	17d3      	asrs	r3, r2, #31
 80033a6:	1ac9      	subs	r1, r1, r3
 80033a8:	460b      	mov	r3, r1
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	1a5b      	subs	r3, r3, r1
 80033ae:	015b      	lsls	r3, r3, #5
 80033b0:	1ad1      	subs	r1, r2, r3
 80033b2:	b24b      	sxtb	r3, r1
 80033b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80033b8:	e002      	b.n	80033c0 <main+0x19c>
          }
          else {
            Mouse.XAxis = 0;
 80033ba:	2300      	movs	r3, #0
 80033bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          }
          if ( abs(currentY - previousY) > 2 ) {
 80033c0:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80033c2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	bfb8      	it	lt
 80033ca:	425b      	neglt	r3, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	dd11      	ble.n	80033f4 <main+0x1d0>
            Mouse.YAxis = (currentY - previousY)%0x130; // Y screen resolution is 320 (from 0 to 319); in hex 0x140 (from 0 to 0x13F)
 80033d0:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80033d2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	4a22      	ldr	r2, [pc, #136]	; (8003460 <main+0x23c>)
 80033d8:	fb82 1203 	smull	r1, r2, r2, r3
 80033dc:	11d1      	asrs	r1, r2, #7
 80033de:	17da      	asrs	r2, r3, #31
 80033e0:	1a8a      	subs	r2, r1, r2
 80033e2:	f44f 7198 	mov.w	r1, #304	; 0x130
 80033e6:	fb01 f202 	mul.w	r2, r1, r2
 80033ea:	1a9a      	subs	r2, r3, r2
 80033ec:	b253      	sxtb	r3, r2
 80033ee:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80033f2:	e002      	b.n	80033fa <main+0x1d6>
          }
          else {
            Mouse.YAxis = 0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
          }
          Mouse.Wheel = 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
        }
      }
      // END of if...else TouchScreen beign touched

      // Check if the board's USER button is pressed
      if ( TM_DISCO_ButtonPressed() && already == 0 ) {
 8003400:	4b18      	ldr	r3, [pc, #96]	; (8003464 <main+0x240>)
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d02d      	beq.n	8003468 <main+0x244>
 800340c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003410:	2b00      	cmp	r3, #0
 8003412:	d129      	bne.n	8003468 <main+0x244>
        // The button is being pressed & was NOT already/previously pressed
        already = 1;
 8003414:	2301      	movs	r3, #1
 8003416:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

        // Turn ON the RED LED
        TM_DISCO_LedOn(LED_RED);
 800341a:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <main+0x234>)
 800341c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003420:	831a      	strh	r2, [r3, #24]

        // Send a mouse left button click/press. For some reason, 0 or TM_USB_HIDDEVICE_Button_Pressed DOES NOT WORK!!!
        Mouse.LeftButton = 0x9;
 8003422:	2309      	movs	r3, #9
 8003424:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

        // Do not send any mouse X or Y relative movement.
        Mouse.XAxis = 0;
 8003428:	2300      	movs	r3, #0
 800342a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        Mouse.YAxis = 0;
 800342e:	2300      	movs	r3, #0
 8003430:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

        // Send the USB HID device report
        TM_USB_HIDDEVICE_MouseSend(&Mouse);
 8003434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003438:	4618      	mov	r0, r3
 800343a:	f001 f84b 	bl	80044d4 <TM_USB_HIDDEVICE_MouseSend>

        // Wait to avoid sending HID reports too fast which causes erratic behaviour on the mouse (erratic movement and random clicks)
        Delayms(10);
 800343e:	200a      	movs	r0, #10
 8003440:	f7ff fec4 	bl	80031cc <Delayms>
 8003444:	e038      	b.n	80034b8 <main+0x294>
 8003446:	bf00      	nop
 8003448:	0800801c 	.word	0x0800801c
 800344c:	20000018 	.word	0x20000018
 8003450:	08007fa4 	.word	0x08007fa4
 8003454:	20000180 	.word	0x20000180
 8003458:	40021800 	.word	0x40021800
 800345c:	92492493 	.word	0x92492493
 8003460:	6bca1af3 	.word	0x6bca1af3
 8003464:	40020000 	.word	0x40020000

      }
      else if ( !TM_DISCO_ButtonPressed() && already == 1 ) {
 8003468:	4be0      	ldr	r3, [pc, #896]	; (80037ec <main+0x5c8>)
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b00      	cmp	r3, #0
 8003472:	d121      	bne.n	80034b8 <main+0x294>
 8003474:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003478:	2b01      	cmp	r3, #1
 800347a:	d11d      	bne.n	80034b8 <main+0x294>
        // The button is NOT being pressed & WAS already/previously pressed
        already = 0;
 800347c:	2300      	movs	r3, #0
 800347e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

        // Turn ON the RED LED
        TM_DISCO_LedOff(LED_RED);
 8003482:	4bdb      	ldr	r3, [pc, #876]	; (80037f0 <main+0x5cc>)
 8003484:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003488:	835a      	strh	r2, [r3, #26]

        // Send a mouse left, right & middle buttons release
        Mouse.LeftButton = TM_USB_HIDDEVICE_Button_Released;
 800348a:	2300      	movs	r3, #0
 800348c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        Mouse.RightButton = TM_USB_HIDDEVICE_Button_Released;
 8003490:	2300      	movs	r3, #0
 8003492:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        Mouse.MiddleButton = TM_USB_HIDDEVICE_Button_Released;
 8003496:	2300      	movs	r3, #0
 8003498:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        // Do not send any mouse X or Y relative movement.
        Mouse.XAxis = 0;
 800349c:	2300      	movs	r3, #0
 800349e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        Mouse.YAxis = 0;
 80034a2:	2300      	movs	r3, #0
 80034a4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

        // Send the USB HID device report
        TM_USB_HIDDEVICE_MouseSend(&Mouse);
 80034a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ac:	4618      	mov	r0, r3
 80034ae:	f001 f811 	bl	80044d4 <TM_USB_HIDDEVICE_MouseSend>

        // Wait to avoid sending HID reports too fast which causes erratic behaviour on the mouse (erratic movement and random clicks)
        Delayms(10);
 80034b2:	200a      	movs	r0, #10
 80034b4:	f7ff fe8a 	bl	80031cc <Delayms>
      }

      // Display data in the LCD
      strcpy( tmpStr, "X: " );
 80034b8:	463b      	mov	r3, r7
 80034ba:	4ace      	ldr	r2, [pc, #824]	; (80037f4 <main+0x5d0>)
 80034bc:	601a      	str	r2, [r3, #0]
      intToHexString( TP_State->X, hexString );
 80034be:	4bce      	ldr	r3, [pc, #824]	; (80037f8 <main+0x5d4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	885b      	ldrh	r3, [r3, #2]
 80034c4:	461a      	mov	r2, r3
 80034c6:	f107 031c 	add.w	r3, r7, #28
 80034ca:	4619      	mov	r1, r3
 80034cc:	4610      	mov	r0, r2
 80034ce:	f000 fb79 	bl	8003bc4 <intToHexString>
      strcat( tmpStr, hexString );
 80034d2:	f107 021c 	add.w	r2, r7, #28
 80034d6:	463b      	mov	r3, r7
 80034d8:	4611      	mov	r1, r2
 80034da:	4618      	mov	r0, r3
 80034dc:	f004 fd46 	bl	8007f6c <strcat>
      strcat( tmpStr, " Y: " );
 80034e0:	463b      	mov	r3, r7
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fc fe82 	bl	80001ec <strlen>
 80034e8:	4603      	mov	r3, r0
 80034ea:	461a      	mov	r2, r3
 80034ec:	463b      	mov	r3, r7
 80034ee:	4413      	add	r3, r2
 80034f0:	4ac2      	ldr	r2, [pc, #776]	; (80037fc <main+0x5d8>)
 80034f2:	6810      	ldr	r0, [r2, #0]
 80034f4:	6018      	str	r0, [r3, #0]
 80034f6:	7912      	ldrb	r2, [r2, #4]
 80034f8:	711a      	strb	r2, [r3, #4]
      intToHexString( TP_State->Y, hexString );
 80034fa:	4bbf      	ldr	r3, [pc, #764]	; (80037f8 <main+0x5d4>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	889b      	ldrh	r3, [r3, #4]
 8003500:	461a      	mov	r2, r3
 8003502:	f107 031c 	add.w	r3, r7, #28
 8003506:	4619      	mov	r1, r3
 8003508:	4610      	mov	r0, r2
 800350a:	f000 fb5b 	bl	8003bc4 <intToHexString>
      strcat( tmpStr, hexString );
 800350e:	f107 021c 	add.w	r2, r7, #28
 8003512:	463b      	mov	r3, r7
 8003514:	4611      	mov	r1, r2
 8003516:	4618      	mov	r0, r3
 8003518:	f004 fd28 	bl	8007f6c <strcat>
      strcat( tmpStr, " Z: " );
 800351c:	463b      	mov	r3, r7
 800351e:	4618      	mov	r0, r3
 8003520:	f7fc fe64 	bl	80001ec <strlen>
 8003524:	4603      	mov	r3, r0
 8003526:	461a      	mov	r2, r3
 8003528:	463b      	mov	r3, r7
 800352a:	4413      	add	r3, r2
 800352c:	4ab4      	ldr	r2, [pc, #720]	; (8003800 <main+0x5dc>)
 800352e:	6810      	ldr	r0, [r2, #0]
 8003530:	6018      	str	r0, [r3, #0]
 8003532:	7912      	ldrb	r2, [r2, #4]
 8003534:	711a      	strb	r2, [r3, #4]
      intToHexString( TP_State->Z, hexString );
 8003536:	4bb0      	ldr	r3, [pc, #704]	; (80037f8 <main+0x5d4>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	88db      	ldrh	r3, [r3, #6]
 800353c:	461a      	mov	r2, r3
 800353e:	f107 031c 	add.w	r3, r7, #28
 8003542:	4619      	mov	r1, r3
 8003544:	4610      	mov	r0, r2
 8003546:	f000 fb3d 	bl	8003bc4 <intToHexString>
      strcat( tmpStr, hexString );
 800354a:	f107 021c 	add.w	r2, r7, #28
 800354e:	463b      	mov	r3, r7
 8003550:	4611      	mov	r1, r2
 8003552:	4618      	mov	r0, r3
 8003554:	f004 fd0a 	bl	8007f6c <strcat>
      LCD_SetTextColor( LCD_COLOR_CYAN );
 8003558:	f647 70ff 	movw	r0, #32767	; 0x7fff
 800355c:	f7fe ff9a 	bl	8002494 <LCD_SetTextColor>
      LCD_DisplayStringLine( LINE(2), (uint8_t*)tmpStr );
 8003560:	f7fe ffcc 	bl	80024fc <LCD_GetFont>
 8003564:	4603      	mov	r3, r0
 8003566:	88db      	ldrh	r3, [r3, #6]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	b29b      	uxth	r3, r3
 800356c:	463a      	mov	r2, r7
 800356e:	4611      	mov	r1, r2
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff f8a7 	bl	80026c4 <LCD_DisplayStringLine>

      strcpy( tmpStr, "Mouse coordinates: " );
 8003576:	463b      	mov	r3, r7
 8003578:	4aa2      	ldr	r2, [pc, #648]	; (8003804 <main+0x5e0>)
 800357a:	461c      	mov	r4, r3
 800357c:	4615      	mov	r5, r2
 800357e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003582:	682b      	ldr	r3, [r5, #0]
 8003584:	6023      	str	r3, [r4, #0]
      LCD_SetTextColor( LCD_COLOR_WHITE );
 8003586:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800358a:	f7fe ff83 	bl	8002494 <LCD_SetTextColor>
      LCD_DisplayStringLine( LINE(4), (uint8_t*)tmpStr );
 800358e:	f7fe ffb5 	bl	80024fc <LCD_GetFont>
 8003592:	4603      	mov	r3, r0
 8003594:	88db      	ldrh	r3, [r3, #6]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	b29b      	uxth	r3, r3
 800359a:	463a      	mov	r2, r7
 800359c:	4611      	mov	r1, r2
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff f890 	bl	80026c4 <LCD_DisplayStringLine>

      strcpy( tmpStr, "X: " );
 80035a4:	463b      	mov	r3, r7
 80035a6:	4a93      	ldr	r2, [pc, #588]	; (80037f4 <main+0x5d0>)
 80035a8:	601a      	str	r2, [r3, #0]
      intToHexString( Mouse.XAxis, hexString );
 80035aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80035ae:	461a      	mov	r2, r3
 80035b0:	f107 031c 	add.w	r3, r7, #28
 80035b4:	4619      	mov	r1, r3
 80035b6:	4610      	mov	r0, r2
 80035b8:	f000 fb04 	bl	8003bc4 <intToHexString>
      strcat( tmpStr, hexString );
 80035bc:	f107 021c 	add.w	r2, r7, #28
 80035c0:	463b      	mov	r3, r7
 80035c2:	4611      	mov	r1, r2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f004 fcd1 	bl	8007f6c <strcat>
      strcat( tmpStr, " Y: " );
 80035ca:	463b      	mov	r3, r7
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7fc fe0d 	bl	80001ec <strlen>
 80035d2:	4603      	mov	r3, r0
 80035d4:	461a      	mov	r2, r3
 80035d6:	463b      	mov	r3, r7
 80035d8:	4413      	add	r3, r2
 80035da:	4a88      	ldr	r2, [pc, #544]	; (80037fc <main+0x5d8>)
 80035dc:	6810      	ldr	r0, [r2, #0]
 80035de:	6018      	str	r0, [r3, #0]
 80035e0:	7912      	ldrb	r2, [r2, #4]
 80035e2:	711a      	strb	r2, [r3, #4]
      intToHexString( Mouse.YAxis, hexString );
 80035e4:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 80035e8:	461a      	mov	r2, r3
 80035ea:	f107 031c 	add.w	r3, r7, #28
 80035ee:	4619      	mov	r1, r3
 80035f0:	4610      	mov	r0, r2
 80035f2:	f000 fae7 	bl	8003bc4 <intToHexString>
      strcat( tmpStr, hexString );
 80035f6:	f107 021c 	add.w	r2, r7, #28
 80035fa:	463b      	mov	r3, r7
 80035fc:	4611      	mov	r1, r2
 80035fe:	4618      	mov	r0, r3
 8003600:	f004 fcb4 	bl	8007f6c <strcat>
      strcat( tmpStr, " W: " );
 8003604:	463b      	mov	r3, r7
 8003606:	4618      	mov	r0, r3
 8003608:	f7fc fdf0 	bl	80001ec <strlen>
 800360c:	4603      	mov	r3, r0
 800360e:	461a      	mov	r2, r3
 8003610:	463b      	mov	r3, r7
 8003612:	4413      	add	r3, r2
 8003614:	4a7c      	ldr	r2, [pc, #496]	; (8003808 <main+0x5e4>)
 8003616:	6810      	ldr	r0, [r2, #0]
 8003618:	6018      	str	r0, [r3, #0]
 800361a:	7912      	ldrb	r2, [r2, #4]
 800361c:	711a      	strb	r2, [r3, #4]
      intToHexString( Mouse.Wheel, hexString );
 800361e:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8003622:	461a      	mov	r2, r3
 8003624:	f107 031c 	add.w	r3, r7, #28
 8003628:	4619      	mov	r1, r3
 800362a:	4610      	mov	r0, r2
 800362c:	f000 faca 	bl	8003bc4 <intToHexString>
      strcat( tmpStr, hexString );
 8003630:	f107 021c 	add.w	r2, r7, #28
 8003634:	463b      	mov	r3, r7
 8003636:	4611      	mov	r1, r2
 8003638:	4618      	mov	r0, r3
 800363a:	f004 fc97 	bl	8007f6c <strcat>
      LCD_SetTextColor( LCD_COLOR_CYAN );
 800363e:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8003642:	f7fe ff27 	bl	8002494 <LCD_SetTextColor>
      LCD_DisplayStringLine( LINE(5), (uint8_t*)tmpStr );
 8003646:	f7fe ff59 	bl	80024fc <LCD_GetFont>
 800364a:	4603      	mov	r3, r0
 800364c:	88db      	ldrh	r3, [r3, #6]
 800364e:	461a      	mov	r2, r3
 8003650:	0092      	lsls	r2, r2, #2
 8003652:	4413      	add	r3, r2
 8003654:	b29b      	uxth	r3, r3
 8003656:	463a      	mov	r2, r7
 8003658:	4611      	mov	r1, r2
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff f832 	bl	80026c4 <LCD_DisplayStringLine>

      strcpy( tmpStr, "L: " );
 8003660:	463b      	mov	r3, r7
 8003662:	4a6a      	ldr	r2, [pc, #424]	; (800380c <main+0x5e8>)
 8003664:	601a      	str	r2, [r3, #0]
      intToHexString( Mouse.LeftButton, hexString );
 8003666:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800366a:	461a      	mov	r2, r3
 800366c:	f107 031c 	add.w	r3, r7, #28
 8003670:	4619      	mov	r1, r3
 8003672:	4610      	mov	r0, r2
 8003674:	f000 faa6 	bl	8003bc4 <intToHexString>
      strcat( tmpStr, hexString );
 8003678:	f107 021c 	add.w	r2, r7, #28
 800367c:	463b      	mov	r3, r7
 800367e:	4611      	mov	r1, r2
 8003680:	4618      	mov	r0, r3
 8003682:	f004 fc73 	bl	8007f6c <strcat>
      strcat( tmpStr, " R: " );
 8003686:	463b      	mov	r3, r7
 8003688:	4618      	mov	r0, r3
 800368a:	f7fc fdaf 	bl	80001ec <strlen>
 800368e:	4603      	mov	r3, r0
 8003690:	461a      	mov	r2, r3
 8003692:	463b      	mov	r3, r7
 8003694:	4413      	add	r3, r2
 8003696:	4a5e      	ldr	r2, [pc, #376]	; (8003810 <main+0x5ec>)
 8003698:	6810      	ldr	r0, [r2, #0]
 800369a:	6018      	str	r0, [r3, #0]
 800369c:	7912      	ldrb	r2, [r2, #4]
 800369e:	711a      	strb	r2, [r3, #4]
      intToHexString( Mouse.RightButton, hexString );
 80036a0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80036a4:	461a      	mov	r2, r3
 80036a6:	f107 031c 	add.w	r3, r7, #28
 80036aa:	4619      	mov	r1, r3
 80036ac:	4610      	mov	r0, r2
 80036ae:	f000 fa89 	bl	8003bc4 <intToHexString>
      strcat( tmpStr, hexString );
 80036b2:	f107 021c 	add.w	r2, r7, #28
 80036b6:	463b      	mov	r3, r7
 80036b8:	4611      	mov	r1, r2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f004 fc56 	bl	8007f6c <strcat>
      strcat( tmpStr, " M: " );
 80036c0:	463b      	mov	r3, r7
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fc fd92 	bl	80001ec <strlen>
 80036c8:	4603      	mov	r3, r0
 80036ca:	461a      	mov	r2, r3
 80036cc:	463b      	mov	r3, r7
 80036ce:	4413      	add	r3, r2
 80036d0:	4a50      	ldr	r2, [pc, #320]	; (8003814 <main+0x5f0>)
 80036d2:	6810      	ldr	r0, [r2, #0]
 80036d4:	6018      	str	r0, [r3, #0]
 80036d6:	7912      	ldrb	r2, [r2, #4]
 80036d8:	711a      	strb	r2, [r3, #4]
      intToHexString( Mouse.MiddleButton, hexString );
 80036da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80036de:	461a      	mov	r2, r3
 80036e0:	f107 031c 	add.w	r3, r7, #28
 80036e4:	4619      	mov	r1, r3
 80036e6:	4610      	mov	r0, r2
 80036e8:	f000 fa6c 	bl	8003bc4 <intToHexString>
      strcat( tmpStr, hexString );
 80036ec:	f107 021c 	add.w	r2, r7, #28
 80036f0:	463b      	mov	r3, r7
 80036f2:	4611      	mov	r1, r2
 80036f4:	4618      	mov	r0, r3
 80036f6:	f004 fc39 	bl	8007f6c <strcat>
      LCD_SetTextColor( LCD_COLOR_CYAN );
 80036fa:	f647 70ff 	movw	r0, #32767	; 0x7fff
 80036fe:	f7fe fec9 	bl	8002494 <LCD_SetTextColor>
      LCD_DisplayStringLine( LINE(6), (uint8_t*)tmpStr );
 8003702:	f7fe fefb 	bl	80024fc <LCD_GetFont>
 8003706:	4603      	mov	r3, r0
 8003708:	88db      	ldrh	r3, [r3, #6]
 800370a:	461a      	mov	r2, r3
 800370c:	0052      	lsls	r2, r2, #1
 800370e:	4413      	add	r3, r2
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	b29b      	uxth	r3, r3
 8003714:	463a      	mov	r2, r7
 8003716:	4611      	mov	r1, r2
 8003718:	4618      	mov	r0, r3
 800371a:	f7fe ffd3 	bl	80026c4 <LCD_DisplayStringLine>

      strcpy( tmpStr, "currX: " );
 800371e:	463b      	mov	r3, r7
 8003720:	4a3d      	ldr	r2, [pc, #244]	; (8003818 <main+0x5f4>)
 8003722:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003726:	e883 0003 	stmia.w	r3, {r0, r1}
      intToHexString( currentX, hexString );
 800372a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800372c:	f107 021c 	add.w	r2, r7, #28
 8003730:	4611      	mov	r1, r2
 8003732:	4618      	mov	r0, r3
 8003734:	f000 fa46 	bl	8003bc4 <intToHexString>
      strcat( tmpStr, hexString );
 8003738:	f107 021c 	add.w	r2, r7, #28
 800373c:	463b      	mov	r3, r7
 800373e:	4611      	mov	r1, r2
 8003740:	4618      	mov	r0, r3
 8003742:	f004 fc13 	bl	8007f6c <strcat>
      strcat( tmpStr, " prevX: " );
 8003746:	463b      	mov	r3, r7
 8003748:	4618      	mov	r0, r3
 800374a:	f7fc fd4f 	bl	80001ec <strlen>
 800374e:	4603      	mov	r3, r0
 8003750:	461a      	mov	r2, r3
 8003752:	463b      	mov	r3, r7
 8003754:	4413      	add	r3, r2
 8003756:	4931      	ldr	r1, [pc, #196]	; (800381c <main+0x5f8>)
 8003758:	461a      	mov	r2, r3
 800375a:	460b      	mov	r3, r1
 800375c:	cb03      	ldmia	r3!, {r0, r1}
 800375e:	6010      	str	r0, [r2, #0]
 8003760:	6051      	str	r1, [r2, #4]
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	7213      	strb	r3, [r2, #8]
      intToHexString( previousX, hexString );
 8003766:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003768:	f107 021c 	add.w	r2, r7, #28
 800376c:	4611      	mov	r1, r2
 800376e:	4618      	mov	r0, r3
 8003770:	f000 fa28 	bl	8003bc4 <intToHexString>
      strcat( tmpStr, hexString );
 8003774:	f107 021c 	add.w	r2, r7, #28
 8003778:	463b      	mov	r3, r7
 800377a:	4611      	mov	r1, r2
 800377c:	4618      	mov	r0, r3
 800377e:	f004 fbf5 	bl	8007f6c <strcat>
      LCD_SetTextColor( LCD_COLOR_GREEN );
 8003782:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8003786:	f7fe fe85 	bl	8002494 <LCD_SetTextColor>
      LCD_DisplayStringLine( LINE(8), (uint8_t*)tmpStr );
 800378a:	f7fe feb7 	bl	80024fc <LCD_GetFont>
 800378e:	4603      	mov	r3, r0
 8003790:	88db      	ldrh	r3, [r3, #6]
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	b29b      	uxth	r3, r3
 8003796:	463a      	mov	r2, r7
 8003798:	4611      	mov	r1, r2
 800379a:	4618      	mov	r0, r3
 800379c:	f7fe ff92 	bl	80026c4 <LCD_DisplayStringLine>

      strcpy( tmpStr, "currY: " );
 80037a0:	463b      	mov	r3, r7
 80037a2:	4a1f      	ldr	r2, [pc, #124]	; (8003820 <main+0x5fc>)
 80037a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037a8:	e883 0003 	stmia.w	r3, {r0, r1}
      intToHexString( currentY, hexString );
 80037ac:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80037ae:	f107 021c 	add.w	r2, r7, #28
 80037b2:	4611      	mov	r1, r2
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 fa05 	bl	8003bc4 <intToHexString>
      strcat( tmpStr, hexString );
 80037ba:	f107 021c 	add.w	r2, r7, #28
 80037be:	463b      	mov	r3, r7
 80037c0:	4611      	mov	r1, r2
 80037c2:	4618      	mov	r0, r3
 80037c4:	f004 fbd2 	bl	8007f6c <strcat>
      strcat( tmpStr, " prevY: " );
 80037c8:	463b      	mov	r3, r7
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fc fd0e 	bl	80001ec <strlen>
 80037d0:	4603      	mov	r3, r0
 80037d2:	461a      	mov	r2, r3
 80037d4:	463b      	mov	r3, r7
 80037d6:	4413      	add	r3, r2
 80037d8:	4912      	ldr	r1, [pc, #72]	; (8003824 <main+0x600>)
 80037da:	461a      	mov	r2, r3
 80037dc:	460b      	mov	r3, r1
 80037de:	cb03      	ldmia	r3!, {r0, r1}
 80037e0:	6010      	str	r0, [r2, #0]
 80037e2:	6051      	str	r1, [r2, #4]
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	7213      	strb	r3, [r2, #8]
      intToHexString( previousY, hexString );
 80037e8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80037ea:	e01d      	b.n	8003828 <main+0x604>
 80037ec:	40020000 	.word	0x40020000
 80037f0:	40021800 	.word	0x40021800
 80037f4:	00203a58 	.word	0x00203a58
 80037f8:	20000180 	.word	0x20000180
 80037fc:	08007fb8 	.word	0x08007fb8
 8003800:	08007fc0 	.word	0x08007fc0
 8003804:	08007fc8 	.word	0x08007fc8
 8003808:	08007fdc 	.word	0x08007fdc
 800380c:	00203a4c 	.word	0x00203a4c
 8003810:	08007fe4 	.word	0x08007fe4
 8003814:	08007fec 	.word	0x08007fec
 8003818:	08007ff4 	.word	0x08007ff4
 800381c:	08007ffc 	.word	0x08007ffc
 8003820:	08008008 	.word	0x08008008
 8003824:	08008010 	.word	0x08008010
 8003828:	f107 021c 	add.w	r2, r7, #28
 800382c:	4611      	mov	r1, r2
 800382e:	4618      	mov	r0, r3
 8003830:	f000 f9c8 	bl	8003bc4 <intToHexString>
      strcat( tmpStr, hexString );
 8003834:	f107 021c 	add.w	r2, r7, #28
 8003838:	463b      	mov	r3, r7
 800383a:	4611      	mov	r1, r2
 800383c:	4618      	mov	r0, r3
 800383e:	f004 fb95 	bl	8007f6c <strcat>
      LCD_SetTextColor( LCD_COLOR_GREEN );
 8003842:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8003846:	f7fe fe25 	bl	8002494 <LCD_SetTextColor>
      LCD_DisplayStringLine( LINE(9), (uint8_t*)tmpStr );
 800384a:	f7fe fe57 	bl	80024fc <LCD_GetFont>
 800384e:	4603      	mov	r3, r0
 8003850:	88db      	ldrh	r3, [r3, #6]
 8003852:	461a      	mov	r2, r3
 8003854:	00d2      	lsls	r2, r2, #3
 8003856:	4413      	add	r3, r2
 8003858:	b29b      	uxth	r3, r3
 800385a:	463a      	mov	r2, r7
 800385c:	4611      	mov	r1, r2
 800385e:	4618      	mov	r0, r3
 8003860:	f7fe ff30 	bl	80026c4 <LCD_DisplayStringLine>

      // Check if the TouchScreen is being touched.
      if ( touching == 1 ) {
 8003864:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003868:	2b01      	cmp	r3, #1
 800386a:	f47f ad34 	bne.w	80032d6 <main+0xb2>

        // Check if the graphical buttons are enabled
        if (buttonsEnabled == 0) {
 800386e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003872:	2b00      	cmp	r3, #0
 8003874:	d107      	bne.n	8003886 <main+0x662>
          // Send the USB HID device report
          TM_USB_HIDDEVICE_MouseSend(&Mouse);
 8003876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800387a:	4618      	mov	r0, r3
 800387c:	f000 fe2a 	bl	80044d4 <TM_USB_HIDDEVICE_MouseSend>

          // Wait to avoid sending HID reports too fast which causes erratic behaviour on the mouse (erratic movement and random clicks)
          Delayms(10);
 8003880:	200a      	movs	r0, #10
 8003882:	f7ff fca3 	bl	80031cc <Delayms>
        }


        // Check if the graphical "Disable" button is being "pressed"
        if ( (TP_State->X >= 105) && (TP_State->X <= 135) && (TP_State->Y >= 215) && (TP_State->Y <= 245) ) {
 8003886:	4bc8      	ldr	r3, [pc, #800]	; (8003ba8 <main+0x984>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	885b      	ldrh	r3, [r3, #2]
 800388c:	2b68      	cmp	r3, #104	; 0x68
 800388e:	f240 810e 	bls.w	8003aae <main+0x88a>
 8003892:	4bc5      	ldr	r3, [pc, #788]	; (8003ba8 <main+0x984>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	885b      	ldrh	r3, [r3, #2]
 8003898:	2b87      	cmp	r3, #135	; 0x87
 800389a:	f200 8108 	bhi.w	8003aae <main+0x88a>
 800389e:	4bc2      	ldr	r3, [pc, #776]	; (8003ba8 <main+0x984>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	889b      	ldrh	r3, [r3, #4]
 80038a4:	2bd6      	cmp	r3, #214	; 0xd6
 80038a6:	f240 8102 	bls.w	8003aae <main+0x88a>
 80038aa:	4bbf      	ldr	r3, [pc, #764]	; (8003ba8 <main+0x984>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	889b      	ldrh	r3, [r3, #4]
 80038b0:	2bf5      	cmp	r3, #245	; 0xf5
 80038b2:	f200 80fc 	bhi.w	8003aae <main+0x88a>
          // Increase the number of times the "disable" graphical button has been "pressed"
          counter++;
 80038b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b8:	3301      	adds	r3, #1
 80038ba:	63bb      	str	r3, [r7, #56]	; 0x38

          // Check if the
          if (counter >= 100) {
 80038bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038be:	2b63      	cmp	r3, #99	; 0x63
 80038c0:	f240 80f5 	bls.w	8003aae <main+0x88a>

            // Check if the buttons are enabled
            if (buttonsEnabled == 1) {
 80038c4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d172      	bne.n	80039b2 <main+0x78e>
              // Disable the mouse's graphical buttons
              buttonsEnabled = 0;
 80038cc:	2300      	movs	r3, #0
 80038ce:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

              // Redraw the buttons with DISABLED color: RED
              LCD_SetTextColor(LCD_COLOR_RED);
 80038d2:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80038d6:	f7fe fddd 	bl	8002494 <LCD_SetTextColor>
              LCD_DrawFullRect(0, 200, 60, 60);       // Left
 80038da:	233c      	movs	r3, #60	; 0x3c
 80038dc:	223c      	movs	r2, #60	; 0x3c
 80038de:	21c8      	movs	r1, #200	; 0xc8
 80038e0:	2000      	movs	r0, #0
 80038e2:	f7fe ff2b 	bl	800273c <LCD_DrawFullRect>
              LCD_DrawFullRect(90, 140, 60, 60);      // Up
 80038e6:	233c      	movs	r3, #60	; 0x3c
 80038e8:	223c      	movs	r2, #60	; 0x3c
 80038ea:	218c      	movs	r1, #140	; 0x8c
 80038ec:	205a      	movs	r0, #90	; 0x5a
 80038ee:	f7fe ff25 	bl	800273c <LCD_DrawFullRect>
              LCD_DrawFullRect(180, 200, 60, 60); // Right
 80038f2:	233c      	movs	r3, #60	; 0x3c
 80038f4:	223c      	movs	r2, #60	; 0x3c
 80038f6:	21c8      	movs	r1, #200	; 0xc8
 80038f8:	20b4      	movs	r0, #180	; 0xb4
 80038fa:	f7fe ff1f 	bl	800273c <LCD_DrawFullRect>
              LCD_DrawFullRect(90, 260, 60, 60); // Down
 80038fe:	233c      	movs	r3, #60	; 0x3c
 8003900:	223c      	movs	r2, #60	; 0x3c
 8003902:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003906:	205a      	movs	r0, #90	; 0x5a
 8003908:	f7fe ff18 	bl	800273c <LCD_DrawFullRect>
              LCD_DrawFullRect(105, 215, 30, 30); // Disable
 800390c:	231e      	movs	r3, #30
 800390e:	221e      	movs	r2, #30
 8003910:	21d7      	movs	r1, #215	; 0xd7
 8003912:	2069      	movs	r0, #105	; 0x69
 8003914:	f7fe ff12 	bl	800273c <LCD_DrawFullRect>

              LCD_SetFont(&Font16x24);
 8003918:	48a4      	ldr	r0, [pc, #656]	; (8003bac <main+0x988>)
 800391a:	f7fe fddf 	bl	80024dc <LCD_SetFont>
              LCD_SetTextColor(LCD_COLOR_BLACK);
 800391e:	2000      	movs	r0, #0
 8003920:	f7fe fdb8 	bl	8002494 <LCD_SetTextColor>
              LCD_SetBackColor(LCD_COLOR_RED);
 8003924:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003928:	f7fe fdc6 	bl	80024b8 <LCD_SetBackColor>
              LCD_DisplayChar(LCD_LINE_9, 22, 0x3C);
 800392c:	f7fe fde6 	bl	80024fc <LCD_GetFont>
 8003930:	4603      	mov	r3, r0
 8003932:	88db      	ldrh	r3, [r3, #6]
 8003934:	461a      	mov	r2, r3
 8003936:	00d2      	lsls	r2, r2, #3
 8003938:	4413      	add	r3, r2
 800393a:	b29b      	uxth	r3, r3
 800393c:	223c      	movs	r2, #60	; 0x3c
 800393e:	2116      	movs	r1, #22
 8003940:	4618      	mov	r0, r3
 8003942:	f7fe fe9d 	bl	8002680 <LCD_DisplayChar>
              LCD_DisplayChar(LCD_LINE_7, 112, 0x5E);
 8003946:	f7fe fdd9 	bl	80024fc <LCD_GetFont>
 800394a:	4603      	mov	r3, r0
 800394c:	88db      	ldrh	r3, [r3, #6]
 800394e:	461a      	mov	r2, r3
 8003950:	00d2      	lsls	r2, r2, #3
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	b29b      	uxth	r3, r3
 8003956:	225e      	movs	r2, #94	; 0x5e
 8003958:	2170      	movs	r1, #112	; 0x70
 800395a:	4618      	mov	r0, r3
 800395c:	f7fe fe90 	bl	8002680 <LCD_DisplayChar>
              LCD_DisplayChar(LCD_LINE_9, 202, 0x3E);
 8003960:	f7fe fdcc 	bl	80024fc <LCD_GetFont>
 8003964:	4603      	mov	r3, r0
 8003966:	88db      	ldrh	r3, [r3, #6]
 8003968:	461a      	mov	r2, r3
 800396a:	00d2      	lsls	r2, r2, #3
 800396c:	4413      	add	r3, r2
 800396e:	b29b      	uxth	r3, r3
 8003970:	223e      	movs	r2, #62	; 0x3e
 8003972:	21ca      	movs	r1, #202	; 0xca
 8003974:	4618      	mov	r0, r3
 8003976:	f7fe fe83 	bl	8002680 <LCD_DisplayChar>
              LCD_DisplayChar(LCD_LINE_12, 112, 0x3D);
 800397a:	f7fe fdbf 	bl	80024fc <LCD_GetFont>
 800397e:	4603      	mov	r3, r0
 8003980:	88db      	ldrh	r3, [r3, #6]
 8003982:	461a      	mov	r2, r3
 8003984:	0052      	lsls	r2, r2, #1
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	b29b      	uxth	r3, r3
 800398c:	223d      	movs	r2, #61	; 0x3d
 800398e:	2170      	movs	r1, #112	; 0x70
 8003990:	4618      	mov	r0, r3
 8003992:	f7fe fe75 	bl	8002680 <LCD_DisplayChar>
              LCD_DisplayChar(LCD_LINE_9, 112, 0x58);
 8003996:	f7fe fdb1 	bl	80024fc <LCD_GetFont>
 800399a:	4603      	mov	r3, r0
 800399c:	88db      	ldrh	r3, [r3, #6]
 800399e:	461a      	mov	r2, r3
 80039a0:	00d2      	lsls	r2, r2, #3
 80039a2:	4413      	add	r3, r2
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2258      	movs	r2, #88	; 0x58
 80039a8:	2170      	movs	r1, #112	; 0x70
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fe fe68 	bl	8002680 <LCD_DisplayChar>
 80039b0:	e071      	b.n	8003a96 <main+0x872>
            }
            else {
              // Enable the mouse's graphical buttons
              buttonsEnabled = 1;
 80039b2:	2301      	movs	r3, #1
 80039b4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

              // Redraw the buttons with ENABLED color: GREEN
              LCD_SetTextColor(LCD_COLOR_GREEN);
 80039b8:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80039bc:	f7fe fd6a 	bl	8002494 <LCD_SetTextColor>
              LCD_DrawFullRect(0, 200, 60, 60);       // Left
 80039c0:	233c      	movs	r3, #60	; 0x3c
 80039c2:	223c      	movs	r2, #60	; 0x3c
 80039c4:	21c8      	movs	r1, #200	; 0xc8
 80039c6:	2000      	movs	r0, #0
 80039c8:	f7fe feb8 	bl	800273c <LCD_DrawFullRect>
              LCD_DrawFullRect(90, 140, 60, 60);      // Up
 80039cc:	233c      	movs	r3, #60	; 0x3c
 80039ce:	223c      	movs	r2, #60	; 0x3c
 80039d0:	218c      	movs	r1, #140	; 0x8c
 80039d2:	205a      	movs	r0, #90	; 0x5a
 80039d4:	f7fe feb2 	bl	800273c <LCD_DrawFullRect>
              LCD_DrawFullRect(180, 200, 60, 60); // Right
 80039d8:	233c      	movs	r3, #60	; 0x3c
 80039da:	223c      	movs	r2, #60	; 0x3c
 80039dc:	21c8      	movs	r1, #200	; 0xc8
 80039de:	20b4      	movs	r0, #180	; 0xb4
 80039e0:	f7fe feac 	bl	800273c <LCD_DrawFullRect>
              LCD_DrawFullRect(90, 260, 60, 60); // Down
 80039e4:	233c      	movs	r3, #60	; 0x3c
 80039e6:	223c      	movs	r2, #60	; 0x3c
 80039e8:	f44f 7182 	mov.w	r1, #260	; 0x104
 80039ec:	205a      	movs	r0, #90	; 0x5a
 80039ee:	f7fe fea5 	bl	800273c <LCD_DrawFullRect>
              LCD_DrawFullRect(105, 215, 30, 30); // Disable
 80039f2:	231e      	movs	r3, #30
 80039f4:	221e      	movs	r2, #30
 80039f6:	21d7      	movs	r1, #215	; 0xd7
 80039f8:	2069      	movs	r0, #105	; 0x69
 80039fa:	f7fe fe9f 	bl	800273c <LCD_DrawFullRect>

              LCD_SetFont(&Font16x24);
 80039fe:	486b      	ldr	r0, [pc, #428]	; (8003bac <main+0x988>)
 8003a00:	f7fe fd6c 	bl	80024dc <LCD_SetFont>
              LCD_SetTextColor(LCD_COLOR_BLACK);
 8003a04:	2000      	movs	r0, #0
 8003a06:	f7fe fd45 	bl	8002494 <LCD_SetTextColor>
              LCD_SetBackColor(LCD_COLOR_GREEN);
 8003a0a:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8003a0e:	f7fe fd53 	bl	80024b8 <LCD_SetBackColor>
              LCD_DisplayChar(LCD_LINE_9, 22, 0x3C);
 8003a12:	f7fe fd73 	bl	80024fc <LCD_GetFont>
 8003a16:	4603      	mov	r3, r0
 8003a18:	88db      	ldrh	r3, [r3, #6]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	00d2      	lsls	r2, r2, #3
 8003a1e:	4413      	add	r3, r2
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	223c      	movs	r2, #60	; 0x3c
 8003a24:	2116      	movs	r1, #22
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fe fe2a 	bl	8002680 <LCD_DisplayChar>
              LCD_DisplayChar(LCD_LINE_7, 112, 0x5E);
 8003a2c:	f7fe fd66 	bl	80024fc <LCD_GetFont>
 8003a30:	4603      	mov	r3, r0
 8003a32:	88db      	ldrh	r3, [r3, #6]
 8003a34:	461a      	mov	r2, r3
 8003a36:	00d2      	lsls	r2, r2, #3
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	225e      	movs	r2, #94	; 0x5e
 8003a3e:	2170      	movs	r1, #112	; 0x70
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fe fe1d 	bl	8002680 <LCD_DisplayChar>
              LCD_DisplayChar(LCD_LINE_9, 202, 0x3E);
 8003a46:	f7fe fd59 	bl	80024fc <LCD_GetFont>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	88db      	ldrh	r3, [r3, #6]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	00d2      	lsls	r2, r2, #3
 8003a52:	4413      	add	r3, r2
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	223e      	movs	r2, #62	; 0x3e
 8003a58:	21ca      	movs	r1, #202	; 0xca
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fe fe10 	bl	8002680 <LCD_DisplayChar>
              LCD_DisplayChar(LCD_LINE_12, 112, 0x3D);
 8003a60:	f7fe fd4c 	bl	80024fc <LCD_GetFont>
 8003a64:	4603      	mov	r3, r0
 8003a66:	88db      	ldrh	r3, [r3, #6]
 8003a68:	461a      	mov	r2, r3
 8003a6a:	0052      	lsls	r2, r2, #1
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	223d      	movs	r2, #61	; 0x3d
 8003a74:	2170      	movs	r1, #112	; 0x70
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fe fe02 	bl	8002680 <LCD_DisplayChar>
              LCD_DisplayChar(LCD_LINE_9, 112, 0x58);
 8003a7c:	f7fe fd3e 	bl	80024fc <LCD_GetFont>
 8003a80:	4603      	mov	r3, r0
 8003a82:	88db      	ldrh	r3, [r3, #6]
 8003a84:	461a      	mov	r2, r3
 8003a86:	00d2      	lsls	r2, r2, #3
 8003a88:	4413      	add	r3, r2
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2258      	movs	r2, #88	; 0x58
 8003a8e:	2170      	movs	r1, #112	; 0x70
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fe fdf5 	bl	8002680 <LCD_DisplayChar>
            }

            // Reset the "disabled" graphical button counter
            counter = 0;
 8003a96:	2300      	movs	r3, #0
 8003a98:	63bb      	str	r3, [r7, #56]	; 0x38

            // Reset the LCD settings to display data
            LCD_SetFont(&Font8x8);
 8003a9a:	4845      	ldr	r0, [pc, #276]	; (8003bb0 <main+0x98c>)
 8003a9c:	f7fe fd1e 	bl	80024dc <LCD_SetFont>
            LCD_SetTextColor(LCD_COLOR_WHITE);
 8003aa0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003aa4:	f7fe fcf6 	bl	8002494 <LCD_SetTextColor>
            LCD_SetBackColor(LCD_COLOR_BLACK);
 8003aa8:	2000      	movs	r0, #0
 8003aaa:	f7fe fd05 	bl	80024b8 <LCD_SetBackColor>
          }
        }

        // Check which mouse graphical button is being touched
        // Reset the mouse's X & Y relative movement
        Mouse.XAxis = 0;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        Mouse.YAxis = 0;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

        // Touching LEFT button
        if ( (TP_State->X >= 0) && (TP_State->X <= 60) && (TP_State->Y >= 200) && (TP_State->Y <= 260) ) {
 8003aba:	4b3b      	ldr	r3, [pc, #236]	; (8003ba8 <main+0x984>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	885b      	ldrh	r3, [r3, #2]
 8003ac0:	2b3c      	cmp	r3, #60	; 0x3c
 8003ac2:	d810      	bhi.n	8003ae6 <main+0x8c2>
 8003ac4:	4b38      	ldr	r3, [pc, #224]	; (8003ba8 <main+0x984>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	889b      	ldrh	r3, [r3, #4]
 8003aca:	2bc7      	cmp	r3, #199	; 0xc7
 8003acc:	d90b      	bls.n	8003ae6 <main+0x8c2>
 8003ace:	4b36      	ldr	r3, [pc, #216]	; (8003ba8 <main+0x984>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	889b      	ldrh	r3, [r3, #4]
 8003ad4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ad8:	d805      	bhi.n	8003ae6 <main+0x8c2>
          Mouse.XAxis = -10;
 8003ada:	23f6      	movs	r3, #246	; 0xf6
 8003adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          Mouse.YAxis = 0;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        }

        // Touching UP button
        if ( (TP_State->X >= 90) && (TP_State->X <= 150) && (TP_State->Y >= 140) && (TP_State->Y <= 200) ) {
 8003ae6:	4b30      	ldr	r3, [pc, #192]	; (8003ba8 <main+0x984>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	885b      	ldrh	r3, [r3, #2]
 8003aec:	2b59      	cmp	r3, #89	; 0x59
 8003aee:	d914      	bls.n	8003b1a <main+0x8f6>
 8003af0:	4b2d      	ldr	r3, [pc, #180]	; (8003ba8 <main+0x984>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	885b      	ldrh	r3, [r3, #2]
 8003af6:	2b96      	cmp	r3, #150	; 0x96
 8003af8:	d80f      	bhi.n	8003b1a <main+0x8f6>
 8003afa:	4b2b      	ldr	r3, [pc, #172]	; (8003ba8 <main+0x984>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	889b      	ldrh	r3, [r3, #4]
 8003b00:	2b8b      	cmp	r3, #139	; 0x8b
 8003b02:	d90a      	bls.n	8003b1a <main+0x8f6>
 8003b04:	4b28      	ldr	r3, [pc, #160]	; (8003ba8 <main+0x984>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	889b      	ldrh	r3, [r3, #4]
 8003b0a:	2bc8      	cmp	r3, #200	; 0xc8
 8003b0c:	d805      	bhi.n	8003b1a <main+0x8f6>
          Mouse.XAxis = 0;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          Mouse.YAxis = -10;
 8003b14:	23f6      	movs	r3, #246	; 0xf6
 8003b16:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        }

        // Touching RIGHT button
        if ( (TP_State->X >= 180) && (TP_State->X <= 240) && (TP_State->Y >= 200) && (TP_State->Y <= 260) ) {
 8003b1a:	4b23      	ldr	r3, [pc, #140]	; (8003ba8 <main+0x984>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	885b      	ldrh	r3, [r3, #2]
 8003b20:	2bb3      	cmp	r3, #179	; 0xb3
 8003b22:	d915      	bls.n	8003b50 <main+0x92c>
 8003b24:	4b20      	ldr	r3, [pc, #128]	; (8003ba8 <main+0x984>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	885b      	ldrh	r3, [r3, #2]
 8003b2a:	2bf0      	cmp	r3, #240	; 0xf0
 8003b2c:	d810      	bhi.n	8003b50 <main+0x92c>
 8003b2e:	4b1e      	ldr	r3, [pc, #120]	; (8003ba8 <main+0x984>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	889b      	ldrh	r3, [r3, #4]
 8003b34:	2bc7      	cmp	r3, #199	; 0xc7
 8003b36:	d90b      	bls.n	8003b50 <main+0x92c>
 8003b38:	4b1b      	ldr	r3, [pc, #108]	; (8003ba8 <main+0x984>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	889b      	ldrh	r3, [r3, #4]
 8003b3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b42:	d805      	bhi.n	8003b50 <main+0x92c>
          Mouse.XAxis = 10;
 8003b44:	230a      	movs	r3, #10
 8003b46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          Mouse.YAxis = 0;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        }

        // Touching DOWN button
        if ( (TP_State->X >= 90) && (TP_State->X <= 150) && (TP_State->Y >= 260) && (TP_State->Y <= 320) ) {
 8003b50:	4b15      	ldr	r3, [pc, #84]	; (8003ba8 <main+0x984>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	885b      	ldrh	r3, [r3, #2]
 8003b56:	2b59      	cmp	r3, #89	; 0x59
 8003b58:	d916      	bls.n	8003b88 <main+0x964>
 8003b5a:	4b13      	ldr	r3, [pc, #76]	; (8003ba8 <main+0x984>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	885b      	ldrh	r3, [r3, #2]
 8003b60:	2b96      	cmp	r3, #150	; 0x96
 8003b62:	d811      	bhi.n	8003b88 <main+0x964>
 8003b64:	4b10      	ldr	r3, [pc, #64]	; (8003ba8 <main+0x984>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	889b      	ldrh	r3, [r3, #4]
 8003b6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b6e:	d30b      	bcc.n	8003b88 <main+0x964>
 8003b70:	4b0d      	ldr	r3, [pc, #52]	; (8003ba8 <main+0x984>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	889b      	ldrh	r3, [r3, #4]
 8003b76:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003b7a:	d805      	bhi.n	8003b88 <main+0x964>
          Mouse.XAxis = 0;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          Mouse.YAxis = 10;
 8003b82:	230a      	movs	r3, #10
 8003b84:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        }

        // Check if the mouse's graphical buttons are enabled
        if ( buttonsEnabled == 1 ) {
 8003b88:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	f47f aba2 	bne.w	80032d6 <main+0xb2>
          TM_USB_HIDDEVICE_MouseSend(&Mouse);
 8003b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fc9c 	bl	80044d4 <TM_USB_HIDDEVICE_MouseSend>
          Delayms(10);
 8003b9c:	200a      	movs	r0, #10
 8003b9e:	f7ff fb15 	bl	80031cc <Delayms>
 8003ba2:	f7ff bb98 	b.w	80032d6 <main+0xb2>
 8003ba6:	bf00      	nop
 8003ba8:	20000180 	.word	0x20000180
 8003bac:	20000010 	.word	0x20000010
 8003bb0:	20000018 	.word	0x20000018

    }
    else {
      // USB HID device IS NOT connected
      // Turn OFF GREEN LED
      TM_DISCO_LedOff(LED_GREEN);
 8003bb4:	4b02      	ldr	r3, [pc, #8]	; (8003bc0 <main+0x99c>)
 8003bb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bba:	835a      	strh	r2, [r3, #26]
    TP_State = IOE_TP_GetState();
 8003bbc:	f7ff bb8b 	b.w	80032d6 <main+0xb2>
 8003bc0:	40021800 	.word	0x40021800

08003bc4 <intToHexString>:
 * @param   intToConvert:   The integer to convert into a HEX string
 * @param   *hexString:     Pointer to the char array/string which will contain the
 * resulting HEX string. This array MUST have a size of at least 7 chars.
 * @retval  None
 */
void intToHexString(int intToConvert, char *hexString) {
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint8_t intDigit = 0;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	73fb      	strb	r3, [r7, #15]
  char ascii = ' ';
 8003bd2:	2320      	movs	r3, #32
 8003bd4:	75fb      	strb	r3, [r7, #23]

  // Prepend "0x" to the 4 digit HEX string
  hexString[0] = '0';
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	2230      	movs	r2, #48	; 0x30
 8003bda:	701a      	strb	r2, [r3, #0]
  hexString[1] = 'x';
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	3301      	adds	r3, #1
 8003be0:	2278      	movs	r2, #120	; 0x78
 8003be2:	701a      	strb	r2, [r3, #0]

  for (int i = 0; i < 4; i++) {
 8003be4:	2300      	movs	r3, #0
 8003be6:	613b      	str	r3, [r7, #16]
 8003be8:	e06d      	b.n	8003cc6 <intToHexString+0x102>
    intDigit = (intToConvert >> (i * 4)) & 0xF;
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	fa42 f303 	asr.w	r3, r2, r3
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	73fb      	strb	r3, [r7, #15]

    switch(intDigit) {
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
 8003bfe:	2b0f      	cmp	r3, #15
 8003c00:	d852      	bhi.n	8003ca8 <intToHexString+0xe4>
 8003c02:	a201      	add	r2, pc, #4	; (adr r2, 8003c08 <intToHexString+0x44>)
 8003c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c08:	08003c49 	.word	0x08003c49
 8003c0c:	08003c4f 	.word	0x08003c4f
 8003c10:	08003c55 	.word	0x08003c55
 8003c14:	08003c5b 	.word	0x08003c5b
 8003c18:	08003c61 	.word	0x08003c61
 8003c1c:	08003c67 	.word	0x08003c67
 8003c20:	08003c6d 	.word	0x08003c6d
 8003c24:	08003c73 	.word	0x08003c73
 8003c28:	08003c79 	.word	0x08003c79
 8003c2c:	08003c7f 	.word	0x08003c7f
 8003c30:	08003c85 	.word	0x08003c85
 8003c34:	08003c8b 	.word	0x08003c8b
 8003c38:	08003c91 	.word	0x08003c91
 8003c3c:	08003c97 	.word	0x08003c97
 8003c40:	08003c9d 	.word	0x08003c9d
 8003c44:	08003ca3 	.word	0x08003ca3
      case 0x0:
        ascii = '0';
 8003c48:	2330      	movs	r3, #48	; 0x30
 8003c4a:	75fb      	strb	r3, [r7, #23]
        break;
 8003c4c:	e02c      	b.n	8003ca8 <intToHexString+0xe4>
      case 0x1:
        ascii = '1';
 8003c4e:	2331      	movs	r3, #49	; 0x31
 8003c50:	75fb      	strb	r3, [r7, #23]
        break;
 8003c52:	e029      	b.n	8003ca8 <intToHexString+0xe4>
      case 0x2:
        ascii = '2';
 8003c54:	2332      	movs	r3, #50	; 0x32
 8003c56:	75fb      	strb	r3, [r7, #23]
        break;
 8003c58:	e026      	b.n	8003ca8 <intToHexString+0xe4>
      case 0x3:
        ascii = '3';
 8003c5a:	2333      	movs	r3, #51	; 0x33
 8003c5c:	75fb      	strb	r3, [r7, #23]
        break;
 8003c5e:	e023      	b.n	8003ca8 <intToHexString+0xe4>
      case 0x4:
        ascii = '4';
 8003c60:	2334      	movs	r3, #52	; 0x34
 8003c62:	75fb      	strb	r3, [r7, #23]
        break;
 8003c64:	e020      	b.n	8003ca8 <intToHexString+0xe4>
      case 0x5:
        ascii = '5';
 8003c66:	2335      	movs	r3, #53	; 0x35
 8003c68:	75fb      	strb	r3, [r7, #23]
        break;
 8003c6a:	e01d      	b.n	8003ca8 <intToHexString+0xe4>
      case 0x6:
        ascii = '6';
 8003c6c:	2336      	movs	r3, #54	; 0x36
 8003c6e:	75fb      	strb	r3, [r7, #23]
        break;
 8003c70:	e01a      	b.n	8003ca8 <intToHexString+0xe4>
      case 0x7:
        ascii = '7';
 8003c72:	2337      	movs	r3, #55	; 0x37
 8003c74:	75fb      	strb	r3, [r7, #23]
        break;
 8003c76:	e017      	b.n	8003ca8 <intToHexString+0xe4>
      case 0x8:
        ascii = '8';
 8003c78:	2338      	movs	r3, #56	; 0x38
 8003c7a:	75fb      	strb	r3, [r7, #23]
        break;
 8003c7c:	e014      	b.n	8003ca8 <intToHexString+0xe4>
      case 0x9:
        ascii = '9';
 8003c7e:	2339      	movs	r3, #57	; 0x39
 8003c80:	75fb      	strb	r3, [r7, #23]
        break;
 8003c82:	e011      	b.n	8003ca8 <intToHexString+0xe4>
      case 0xA:
        ascii = 'A';
 8003c84:	2341      	movs	r3, #65	; 0x41
 8003c86:	75fb      	strb	r3, [r7, #23]
        break;
 8003c88:	e00e      	b.n	8003ca8 <intToHexString+0xe4>
      case 0xB:
        ascii = 'B';
 8003c8a:	2342      	movs	r3, #66	; 0x42
 8003c8c:	75fb      	strb	r3, [r7, #23]
        break;
 8003c8e:	e00b      	b.n	8003ca8 <intToHexString+0xe4>
      case 0xC:
        ascii = 'C';
 8003c90:	2343      	movs	r3, #67	; 0x43
 8003c92:	75fb      	strb	r3, [r7, #23]
        break;
 8003c94:	e008      	b.n	8003ca8 <intToHexString+0xe4>
      case 0xD:
        ascii = 'D';
 8003c96:	2344      	movs	r3, #68	; 0x44
 8003c98:	75fb      	strb	r3, [r7, #23]
        break;
 8003c9a:	e005      	b.n	8003ca8 <intToHexString+0xe4>
      case 0xE:
        ascii = 'E';
 8003c9c:	2345      	movs	r3, #69	; 0x45
 8003c9e:	75fb      	strb	r3, [r7, #23]
        break;
 8003ca0:	e002      	b.n	8003ca8 <intToHexString+0xe4>
      case 0xF:
        ascii = 'F';
 8003ca2:	2346      	movs	r3, #70	; 0x46
 8003ca4:	75fb      	strb	r3, [r7, #23]
        break;
 8003ca6:	bf00      	nop
    }

    hexString[5 - i] = ascii;
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f1c3 0305 	rsb	r3, r3, #5
 8003cae:	461a      	mov	r2, r3
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	7dfa      	ldrb	r2, [r7, #23]
 8003cb6:	701a      	strb	r2, [r3, #0]

    // Set the NULL '\0' character at the end of the string
    hexString[6] = 0;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	3306      	adds	r3, #6
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 4; i++) {
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	613b      	str	r3, [r7, #16]
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	2b03      	cmp	r3, #3
 8003cca:	dd8e      	ble.n	8003bea <intToHexString+0x26>
  }

}
 8003ccc:	bf00      	nop
 8003cce:	371c      	adds	r7, #28
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <TP_Config>:
* @brief  Configure the IO Expander and the Touch Panel.
* @param  None
* @retval None
*/
static void TP_Config(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* Clear the LCD */ 
//  LCD_Clear(LCD_COLOR_WHITE);
  LCD_Clear(LCD_COLOR_BLACK);
 8003cdc:	2000      	movs	r0, #0
 8003cde:	f7fe fc19 	bl	8002514 <LCD_Clear>
  LCD_SetBackColor(LCD_COLOR_BLACK);
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	f7fe fbe8 	bl	80024b8 <LCD_SetBackColor>
  
  /* Configure the IO Expander */
  if (IOE_Config() == IOE_OK)
 8003ce8:	f7fd fdb5 	bl	8001856 <IOE_Config>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d16f      	bne.n	8003dd2 <TP_Config+0xfa>
  {
    LCD_SetTextColor(LCD_COLOR_RED);
 8003cf2:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003cf6:	f7fe fbcd 	bl	8002494 <LCD_SetTextColor>
    LCD_DrawFullRect(0, 200, 60, 60);       // Left
 8003cfa:	233c      	movs	r3, #60	; 0x3c
 8003cfc:	223c      	movs	r2, #60	; 0x3c
 8003cfe:	21c8      	movs	r1, #200	; 0xc8
 8003d00:	2000      	movs	r0, #0
 8003d02:	f7fe fd1b 	bl	800273c <LCD_DrawFullRect>
    LCD_DrawFullRect(90, 140, 60, 60);      // Up
 8003d06:	233c      	movs	r3, #60	; 0x3c
 8003d08:	223c      	movs	r2, #60	; 0x3c
 8003d0a:	218c      	movs	r1, #140	; 0x8c
 8003d0c:	205a      	movs	r0, #90	; 0x5a
 8003d0e:	f7fe fd15 	bl	800273c <LCD_DrawFullRect>
    LCD_DrawFullRect(180, 200, 60, 60); // Right
 8003d12:	233c      	movs	r3, #60	; 0x3c
 8003d14:	223c      	movs	r2, #60	; 0x3c
 8003d16:	21c8      	movs	r1, #200	; 0xc8
 8003d18:	20b4      	movs	r0, #180	; 0xb4
 8003d1a:	f7fe fd0f 	bl	800273c <LCD_DrawFullRect>
    LCD_DrawFullRect(90, 260, 60, 60); // Down
 8003d1e:	233c      	movs	r3, #60	; 0x3c
 8003d20:	223c      	movs	r2, #60	; 0x3c
 8003d22:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003d26:	205a      	movs	r0, #90	; 0x5a
 8003d28:	f7fe fd08 	bl	800273c <LCD_DrawFullRect>
    LCD_DrawFullRect(105, 215, 30, 30); // Disable
 8003d2c:	231e      	movs	r3, #30
 8003d2e:	221e      	movs	r2, #30
 8003d30:	21d7      	movs	r1, #215	; 0xd7
 8003d32:	2069      	movs	r0, #105	; 0x69
 8003d34:	f7fe fd02 	bl	800273c <LCD_DrawFullRect>


    LCD_SetFont(&Font16x24);
 8003d38:	483c      	ldr	r0, [pc, #240]	; (8003e2c <TP_Config+0x154>)
 8003d3a:	f7fe fbcf 	bl	80024dc <LCD_SetFont>
    LCD_SetTextColor(LCD_COLOR_BLACK);
 8003d3e:	2000      	movs	r0, #0
 8003d40:	f7fe fba8 	bl	8002494 <LCD_SetTextColor>
    LCD_SetBackColor(LCD_COLOR_RED);
 8003d44:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003d48:	f7fe fbb6 	bl	80024b8 <LCD_SetBackColor>
    LCD_DisplayChar(LCD_LINE_9, 22, 0x3C);
 8003d4c:	f7fe fbd6 	bl	80024fc <LCD_GetFont>
 8003d50:	4603      	mov	r3, r0
 8003d52:	88db      	ldrh	r3, [r3, #6]
 8003d54:	461a      	mov	r2, r3
 8003d56:	00d2      	lsls	r2, r2, #3
 8003d58:	4413      	add	r3, r2
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	223c      	movs	r2, #60	; 0x3c
 8003d5e:	2116      	movs	r1, #22
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fe fc8d 	bl	8002680 <LCD_DisplayChar>
    LCD_DisplayChar(LCD_LINE_7, 112, 0x5E);
 8003d66:	f7fe fbc9 	bl	80024fc <LCD_GetFont>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	88db      	ldrh	r3, [r3, #6]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	00d2      	lsls	r2, r2, #3
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	225e      	movs	r2, #94	; 0x5e
 8003d78:	2170      	movs	r1, #112	; 0x70
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fe fc80 	bl	8002680 <LCD_DisplayChar>
    LCD_DisplayChar(LCD_LINE_9, 202, 0x3E);
 8003d80:	f7fe fbbc 	bl	80024fc <LCD_GetFont>
 8003d84:	4603      	mov	r3, r0
 8003d86:	88db      	ldrh	r3, [r3, #6]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	00d2      	lsls	r2, r2, #3
 8003d8c:	4413      	add	r3, r2
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	223e      	movs	r2, #62	; 0x3e
 8003d92:	21ca      	movs	r1, #202	; 0xca
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fe fc73 	bl	8002680 <LCD_DisplayChar>
    LCD_DisplayChar(LCD_LINE_12, 112, 0x3D);
 8003d9a:	f7fe fbaf 	bl	80024fc <LCD_GetFont>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	88db      	ldrh	r3, [r3, #6]
 8003da2:	461a      	mov	r2, r3
 8003da4:	0052      	lsls	r2, r2, #1
 8003da6:	4413      	add	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	223d      	movs	r2, #61	; 0x3d
 8003dae:	2170      	movs	r1, #112	; 0x70
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7fe fc65 	bl	8002680 <LCD_DisplayChar>
    LCD_DisplayChar(LCD_LINE_9, 112, 0x58);
 8003db6:	f7fe fba1 	bl	80024fc <LCD_GetFont>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	88db      	ldrh	r3, [r3, #6]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	00d2      	lsls	r2, r2, #3
 8003dc2:	4413      	add	r3, r2
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	2258      	movs	r2, #88	; 0x58
 8003dc8:	2170      	movs	r1, #112	; 0x70
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fe fc58 	bl	8002680 <LCD_DisplayChar>
    LCD_SetTextColor(LCD_COLOR_BLACK); 
    LCD_DisplayStringLine(LCD_LINE_6,(uint8_t*)"   IOE NOT OK      ");
    LCD_DisplayStringLine(LCD_LINE_7,(uint8_t*)"Reset the board   ");
    LCD_DisplayStringLine(LCD_LINE_8,(uint8_t*)"and try again     ");
  }
}
 8003dd0:	e029      	b.n	8003e26 <TP_Config+0x14e>
    LCD_Clear(LCD_COLOR_RED);
 8003dd2:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003dd6:	f7fe fb9d 	bl	8002514 <LCD_Clear>
    LCD_SetTextColor(LCD_COLOR_BLACK); 
 8003dda:	2000      	movs	r0, #0
 8003ddc:	f7fe fb5a 	bl	8002494 <LCD_SetTextColor>
    LCD_DisplayStringLine(LCD_LINE_6,(uint8_t*)"   IOE NOT OK      ");
 8003de0:	f7fe fb8c 	bl	80024fc <LCD_GetFont>
 8003de4:	4603      	mov	r3, r0
 8003de6:	88db      	ldrh	r3, [r3, #6]
 8003de8:	461a      	mov	r2, r3
 8003dea:	0052      	lsls	r2, r2, #1
 8003dec:	4413      	add	r3, r2
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	490f      	ldr	r1, [pc, #60]	; (8003e30 <TP_Config+0x158>)
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7fe fc65 	bl	80026c4 <LCD_DisplayStringLine>
    LCD_DisplayStringLine(LCD_LINE_7,(uint8_t*)"Reset the board   ");
 8003dfa:	f7fe fb7f 	bl	80024fc <LCD_GetFont>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	88db      	ldrh	r3, [r3, #6]
 8003e02:	461a      	mov	r2, r3
 8003e04:	00d2      	lsls	r2, r2, #3
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	490a      	ldr	r1, [pc, #40]	; (8003e34 <TP_Config+0x15c>)
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fe fc59 	bl	80026c4 <LCD_DisplayStringLine>
    LCD_DisplayStringLine(LCD_LINE_8,(uint8_t*)"and try again     ");
 8003e12:	f7fe fb73 	bl	80024fc <LCD_GetFont>
 8003e16:	4603      	mov	r3, r0
 8003e18:	88db      	ldrh	r3, [r3, #6]
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	4906      	ldr	r1, [pc, #24]	; (8003e38 <TP_Config+0x160>)
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7fe fc4f 	bl	80026c4 <LCD_DisplayStringLine>
}
 8003e26:	bf00      	nop
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	20000010 	.word	0x20000010
 8003e30:	08008038 	.word	0x08008038
 8003e34:	0800804c 	.word	0x0800804c
 8003e38:	08008060 	.word	0x08008060

08003e3c <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003e3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003e3e:	e003      	b.n	8003e48 <LoopCopyDataInit>

08003e40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003e40:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8003e42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003e44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003e46:	3104      	adds	r1, #4

08003e48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003e48:	480a      	ldr	r0, [pc, #40]	; (8003e74 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8003e4a:	4b0b      	ldr	r3, [pc, #44]	; (8003e78 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8003e4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003e4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003e50:	d3f6      	bcc.n	8003e40 <CopyDataInit>
  ldr  r2, =_sbss
 8003e52:	4a0a      	ldr	r2, [pc, #40]	; (8003e7c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8003e54:	e002      	b.n	8003e5c <LoopFillZerobss>

08003e56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003e56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003e58:	f842 3b04 	str.w	r3, [r2], #4

08003e5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003e5c:	4b08      	ldr	r3, [pc, #32]	; (8003e80 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8003e5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003e60:	d3f9      	bcc.n	8003e56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003e62:	f000 f839 	bl	8003ed8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e66:	f004 f85d 	bl	8007f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e6a:	f7ff f9db 	bl	8003224 <main>
  bx  lr    
 8003e6e:	4770      	bx	lr
  ldr  r3, =_sidata
 8003e70:	080098dc 	.word	0x080098dc
  ldr  r0, =_sdata
 8003e74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003e78:	20000150 	.word	0x20000150
  ldr  r2, =_sbss
 8003e7c:	20000150 	.word	0x20000150
  ldr  r3, = _ebss
 8003e80:	20000820 	.word	0x20000820

08003e84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e84:	e7fe      	b.n	8003e84 <ADC_IRQHandler>

08003e86 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8003e86:	b480      	push	{r7}
 8003e88:	af00      	add	r7, sp, #0
}
 8003e8a:	bf00      	nop
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8003e98:	e7fe      	b.n	8003e98 <HardFault_Handler+0x4>

08003e9a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8003e9e:	e7fe      	b.n	8003e9e <MemManage_Handler+0x4>

08003ea0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003ea4:	e7fe      	b.n	8003ea4 <BusFault_Handler+0x4>

08003ea6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8003eaa:	e7fe      	b.n	8003eaa <UsageFault_Handler+0x4>

08003eac <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
}
 8003eb0:	bf00      	nop
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	af00      	add	r7, sp, #0
}
 8003ebe:	bf00      	nop
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
}
 8003ecc:	bf00      	nop
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
	...

08003ed8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003edc:	4a16      	ldr	r2, [pc, #88]	; (8003f38 <SystemInit+0x60>)
 8003ede:	4b16      	ldr	r3, [pc, #88]	; (8003f38 <SystemInit+0x60>)
 8003ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ee8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003eec:	4a13      	ldr	r2, [pc, #76]	; (8003f3c <SystemInit+0x64>)
 8003eee:	4b13      	ldr	r3, [pc, #76]	; (8003f3c <SystemInit+0x64>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f043 0301 	orr.w	r3, r3, #1
 8003ef6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003ef8:	4b10      	ldr	r3, [pc, #64]	; (8003f3c <SystemInit+0x64>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003efe:	4a0f      	ldr	r2, [pc, #60]	; (8003f3c <SystemInit+0x64>)
 8003f00:	4b0e      	ldr	r3, [pc, #56]	; (8003f3c <SystemInit+0x64>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f0c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003f0e:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <SystemInit+0x64>)
 8003f10:	4a0b      	ldr	r2, [pc, #44]	; (8003f40 <SystemInit+0x68>)
 8003f12:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003f14:	4a09      	ldr	r2, [pc, #36]	; (8003f3c <SystemInit+0x64>)
 8003f16:	4b09      	ldr	r3, [pc, #36]	; (8003f3c <SystemInit+0x64>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003f20:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <SystemInit+0x64>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003f26:	f000 f80d 	bl	8003f44 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f2a:	4b03      	ldr	r3, [pc, #12]	; (8003f38 <SystemInit+0x60>)
 8003f2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f30:	609a      	str	r2, [r3, #8]
#endif
}
 8003f32:	bf00      	nop
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	e000ed00 	.word	0xe000ed00
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	24003010 	.word	0x24003010

08003f44 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	607b      	str	r3, [r7, #4]
 8003f4e:	2300      	movs	r3, #0
 8003f50:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003f52:	4a43      	ldr	r2, [pc, #268]	; (8004060 <SetSysClock+0x11c>)
 8003f54:	4b42      	ldr	r3, [pc, #264]	; (8004060 <SetSysClock+0x11c>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f5c:	6013      	str	r3, [r2, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003f5e:	4b40      	ldr	r3, [pc, #256]	; (8004060 <SetSysClock+0x11c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f66:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d103      	bne.n	8003f7c <SetSysClock+0x38>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003f7a:	d1f0      	bne.n	8003f5e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003f7c:	4b38      	ldr	r3, [pc, #224]	; (8004060 <SetSysClock+0x11c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	603b      	str	r3, [r7, #0]
 8003f8c:	e001      	b.n	8003f92 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d102      	bne.n	8003f9e <SetSysClock+0x5a>
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003f98:	4b31      	ldr	r3, [pc, #196]	; (8004060 <SetSysClock+0x11c>)
 8003f9a:	4a32      	ldr	r2, [pc, #200]	; (8004064 <SetSysClock+0x120>)
 8003f9c:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003f9e:	4a30      	ldr	r2, [pc, #192]	; (8004060 <SetSysClock+0x11c>)
 8003fa0:	4b2f      	ldr	r3, [pc, #188]	; (8004060 <SetSysClock+0x11c>)
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fa8:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8003faa:	4a2f      	ldr	r2, [pc, #188]	; (8004068 <SetSysClock+0x124>)
 8003fac:	4b2e      	ldr	r3, [pc, #184]	; (8004068 <SetSysClock+0x124>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fb4:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003fb6:	4a2a      	ldr	r2, [pc, #168]	; (8004060 <SetSysClock+0x11c>)
 8003fb8:	4b29      	ldr	r3, [pc, #164]	; (8004060 <SetSysClock+0x11c>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003fbe:	4a28      	ldr	r2, [pc, #160]	; (8004060 <SetSysClock+0x11c>)
 8003fc0:	4b27      	ldr	r3, [pc, #156]	; (8004060 <SetSysClock+0x11c>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fc8:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003fca:	4a25      	ldr	r2, [pc, #148]	; (8004060 <SetSysClock+0x11c>)
 8003fcc:	4b24      	ldr	r3, [pc, #144]	; (8004060 <SetSysClock+0x11c>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003fd4:	6093      	str	r3, [r2, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003fd6:	4a22      	ldr	r2, [pc, #136]	; (8004060 <SetSysClock+0x11c>)
 8003fd8:	4b21      	ldr	r3, [pc, #132]	; (8004060 <SetSysClock+0x11c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fe0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003fe2:	bf00      	nop
 8003fe4:	4b1e      	ldr	r3, [pc, #120]	; (8004060 <SetSysClock+0x11c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0f9      	beq.n	8003fe4 <SetSysClock+0xa0>
    {
    }

    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8003ff0:	4a1d      	ldr	r2, [pc, #116]	; (8004068 <SetSysClock+0x124>)
 8003ff2:	4b1d      	ldr	r3, [pc, #116]	; (8004068 <SetSysClock+0x124>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ffa:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 8003ffc:	bf00      	nop
 8003ffe:	4b1a      	ldr	r3, [pc, #104]	; (8004068 <SetSysClock+0x124>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0f9      	beq.n	8003ffe <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 800400a:	4a17      	ldr	r2, [pc, #92]	; (8004068 <SetSysClock+0x124>)
 800400c:	4b16      	ldr	r3, [pc, #88]	; (8004068 <SetSysClock+0x124>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004014:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 8004016:	bf00      	nop
 8004018:	4b13      	ldr	r3, [pc, #76]	; (8004068 <SetSysClock+0x124>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0f9      	beq.n	8004018 <SetSysClock+0xd4>
    {
    } 
     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8004024:	4b11      	ldr	r3, [pc, #68]	; (800406c <SetSysClock+0x128>)
 8004026:	f240 7205 	movw	r2, #1797	; 0x705
 800402a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800402c:	4a0c      	ldr	r2, [pc, #48]	; (8004060 <SetSysClock+0x11c>)
 800402e:	4b0c      	ldr	r3, [pc, #48]	; (8004060 <SetSysClock+0x11c>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f023 0303 	bic.w	r3, r3, #3
 8004036:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8004038:	4a09      	ldr	r2, [pc, #36]	; (8004060 <SetSysClock+0x11c>)
 800403a:	4b09      	ldr	r3, [pc, #36]	; (8004060 <SetSysClock+0x11c>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f043 0302 	orr.w	r3, r3, #2
 8004042:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8004044:	bf00      	nop
 8004046:	4b06      	ldr	r3, [pc, #24]	; (8004060 <SetSysClock+0x11c>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 030c 	and.w	r3, r3, #12
 800404e:	2b08      	cmp	r3, #8
 8004050:	d1f9      	bne.n	8004046 <SetSysClock+0x102>
    {
    }
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40023800 	.word	0x40023800
 8004064:	07405a08 	.word	0x07405a08
 8004068:	40007000 	.word	0x40007000
 800406c:	40023c00 	.word	0x40023c00

08004070 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	4603      	mov	r3, r0
 8004078:	6039      	str	r1, [r7, #0]
 800407a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800407c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004080:	2b00      	cmp	r3, #0
 8004082:	da0b      	bge.n	800409c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8004084:	490d      	ldr	r1, [pc, #52]	; (80040bc <NVIC_SetPriority+0x4c>)
 8004086:	79fb      	ldrb	r3, [r7, #7]
 8004088:	f003 030f 	and.w	r3, r3, #15
 800408c:	3b04      	subs	r3, #4
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	b2d2      	uxtb	r2, r2
 8004092:	0112      	lsls	r2, r2, #4
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	440b      	add	r3, r1
 8004098:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800409a:	e009      	b.n	80040b0 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800409c:	4908      	ldr	r1, [pc, #32]	; (80040c0 <NVIC_SetPriority+0x50>)
 800409e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	b2d2      	uxtb	r2, r2
 80040a6:	0112      	lsls	r2, r2, #4
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	440b      	add	r3, r1
 80040ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	e000ed00 	.word	0xe000ed00
 80040c0:	e000e100 	.word	0xe000e100

080040c4 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040d4:	d301      	bcc.n	80040da <SysTick_Config+0x16>
 80040d6:	2301      	movs	r3, #1
 80040d8:	e00f      	b.n	80040fa <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80040da:	4a0a      	ldr	r2, [pc, #40]	; (8004104 <SysTick_Config+0x40>)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3b01      	subs	r3, #1
 80040e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80040e2:	210f      	movs	r1, #15
 80040e4:	f04f 30ff 	mov.w	r0, #4294967295
 80040e8:	f7ff ffc2 	bl	8004070 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80040ec:	4b05      	ldr	r3, [pc, #20]	; (8004104 <SysTick_Config+0x40>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040f2:	4b04      	ldr	r3, [pc, #16]	; (8004104 <SysTick_Config+0x40>)
 80040f4:	2207      	movs	r2, #7
 80040f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	e000e010 	.word	0xe000e010

08004108 <SysTick_Handler>:
void TM_DELAY_TIM_IRQ_HANDLER(void) {
	TM_DELAY_TIM->SR = ~TIM_IT_Update;
#elif defined(KEIL_IDE)
void TimingDelay_Decrement(void) {
#else
void SysTick_Handler(void) {
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
#endif
	uint8_t i;
	
	TM_Time++;
 800410e:	4b37      	ldr	r3, [pc, #220]	; (80041ec <SysTick_Handler+0xe4>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3301      	adds	r3, #1
 8004114:	4a35      	ldr	r2, [pc, #212]	; (80041ec <SysTick_Handler+0xe4>)
 8004116:	6013      	str	r3, [r2, #0]
	if (TM_Time2 != 0x00) {
 8004118:	4b35      	ldr	r3, [pc, #212]	; (80041f0 <SysTick_Handler+0xe8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d004      	beq.n	800412a <SysTick_Handler+0x22>
		TM_Time2--;
 8004120:	4b33      	ldr	r3, [pc, #204]	; (80041f0 <SysTick_Handler+0xe8>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3b01      	subs	r3, #1
 8004126:	4a32      	ldr	r2, [pc, #200]	; (80041f0 <SysTick_Handler+0xe8>)
 8004128:	6013      	str	r3, [r2, #0]
	}
	
	/* Call user function */
	TM_DELAY_1msHandler();
 800412a:	f3af 8000 	nop.w
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 800412e:	2300      	movs	r3, #0
 8004130:	71fb      	strb	r3, [r7, #7]
 8004132:	e052      	b.n	80041da <SysTick_Handler+0xd2>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 8004134:	79fb      	ldrb	r3, [r7, #7]
 8004136:	4a2f      	ldr	r2, [pc, #188]	; (80041f4 <SysTick_Handler+0xec>)
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	685b      	ldr	r3, [r3, #4]
		if (
 800413e:	2b00      	cmp	r3, #0
 8004140:	d048      	beq.n	80041d4 <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 8004142:	79fb      	ldrb	r3, [r7, #7]
 8004144:	4a2b      	ldr	r2, [pc, #172]	; (80041f4 <SysTick_Handler+0xec>)
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	7b1b      	ldrb	r3, [r3, #12]
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 800414e:	2b00      	cmp	r3, #0
 8004150:	d040      	beq.n	80041d4 <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->CNT > 0    /*!< Counter is not NULL */
 8004152:	79fb      	ldrb	r3, [r7, #7]
 8004154:	4a27      	ldr	r2, [pc, #156]	; (80041f4 <SysTick_Handler+0xec>)
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 800415e:	2b00      	cmp	r3, #0
 8004160:	d038      	beq.n	80041d4 <SysTick_Handler+0xcc>
		) {
			/* Decrease counter */
			CustomTimers.Timers[i]->CNT--;
 8004162:	79fb      	ldrb	r3, [r7, #7]
 8004164:	4a23      	ldr	r2, [pc, #140]	; (80041f4 <SysTick_Handler+0xec>)
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	689a      	ldr	r2, [r3, #8]
 800416e:	3a01      	subs	r2, #1
 8004170:	609a      	str	r2, [r3, #8]
			
			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 8004172:	79fb      	ldrb	r3, [r7, #7]
 8004174:	4a1f      	ldr	r2, [pc, #124]	; (80041f4 <SysTick_Handler+0xec>)
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d128      	bne.n	80041d4 <SysTick_Handler+0xcc>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i]->UserParameters);
 8004182:	79fb      	ldrb	r3, [r7, #7]
 8004184:	4a1b      	ldr	r2, [pc, #108]	; (80041f4 <SysTick_Handler+0xec>)
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	79fb      	ldrb	r3, [r7, #7]
 8004190:	4918      	ldr	r1, [pc, #96]	; (80041f4 <SysTick_Handler+0xec>)
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	4618      	mov	r0, r3
 800419c:	4790      	blx	r2
				
				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 800419e:	79fb      	ldrb	r3, [r7, #7]
 80041a0:	4a14      	ldr	r2, [pc, #80]	; (80041f4 <SysTick_Handler+0xec>)
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	79fb      	ldrb	r3, [r7, #7]
 80041aa:	4912      	ldr	r1, [pc, #72]	; (80041f4 <SysTick_Handler+0xec>)
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	440b      	add	r3, r1
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6093      	str	r3, [r2, #8]
				
				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->AutoReload) {
 80041b6:	79fb      	ldrb	r3, [r7, #7]
 80041b8:	4a0e      	ldr	r2, [pc, #56]	; (80041f4 <SysTick_Handler+0xec>)
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4413      	add	r3, r2
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d106      	bne.n	80041d4 <SysTick_Handler+0xcc>
					/* Disable counter */
					CustomTimers.Timers[i]->Enabled = 0;
 80041c6:	79fb      	ldrb	r3, [r7, #7]
 80041c8:	4a0a      	ldr	r2, [pc, #40]	; (80041f4 <SysTick_Handler+0xec>)
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < CustomTimers.Count; i++) {
 80041d4:	79fb      	ldrb	r3, [r7, #7]
 80041d6:	3301      	adds	r3, #1
 80041d8:	71fb      	strb	r3, [r7, #7]
 80041da:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <SysTick_Handler+0xec>)
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	79fa      	ldrb	r2, [r7, #7]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d3a7      	bcc.n	8004134 <SysTick_Handler+0x2c>
				}
			}
		}
	}
}
 80041e4:	bf00      	nop
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	20000184 	.word	0x20000184
 80041f0:	20000188 	.word	0x20000188
 80041f4:	20000190 	.word	0x20000190

080041f8 <TM_DELAY_Init>:

void TM_DELAY_Init(void) {	
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
#if defined(TM_DELAY_TIM)
	TM_DELAY_INT_InitTIM();
#else
	/* Set Systick interrupt every 1ms */
	if (SysTick_Config(SystemCoreClock / 1000)) {
 80041fc:	4b0d      	ldr	r3, [pc, #52]	; (8004234 <TM_DELAY_Init+0x3c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a0d      	ldr	r2, [pc, #52]	; (8004238 <TM_DELAY_Init+0x40>)
 8004202:	fba2 2303 	umull	r2, r3, r2, r3
 8004206:	099b      	lsrs	r3, r3, #6
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff ff5b 	bl	80040c4 <SysTick_Config>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d000      	beq.n	8004216 <TM_DELAY_Init+0x1e>
		/* Capture error */
		while (1);
 8004214:	e7fe      	b.n	8004214 <TM_DELAY_Init+0x1c>
	}
	
	#ifdef __GNUC__
		/* Set multiplier for delay under 1us with pooling mode = not so accurate */
		mult = SystemCoreClock / 7000000;
 8004216:	4b07      	ldr	r3, [pc, #28]	; (8004234 <TM_DELAY_Init+0x3c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	099b      	lsrs	r3, r3, #6
 800421c:	4a07      	ldr	r2, [pc, #28]	; (800423c <TM_DELAY_Init+0x44>)
 800421e:	fba2 2303 	umull	r2, r3, r2, r3
 8004222:	0a9b      	lsrs	r3, r3, #10
 8004224:	4a06      	ldr	r2, [pc, #24]	; (8004240 <TM_DELAY_Init+0x48>)
 8004226:	6013      	str	r3, [r2, #0]
		mult = SystemCoreClock / 3000000;
	#endif
#endif
	
	/* Set initialized flag */
	TM_DELAY_Initialized = 1;
 8004228:	4b06      	ldr	r3, [pc, #24]	; (8004244 <TM_DELAY_Init+0x4c>)
 800422a:	2201      	movs	r2, #1
 800422c:	701a      	strb	r2, [r3, #0]
}
 800422e:	bf00      	nop
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	2000002c 	.word	0x2000002c
 8004238:	10624dd3 	.word	0x10624dd3
 800423c:	02659117 	.word	0x02659117
 8004240:	200001e4 	.word	0x200001e4
 8004244:	2000018c 	.word	0x2000018c

08004248 <TM_DISCO_LedInit>:
#include "tm_stm32f4_disco.h"

/* Button pressed status for onpressed/onreleased events */
static volatile uint8_t TM_INT_DISCO_ButtonPressed = 0;

void TM_DISCO_LedInit(void) {
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af02      	add	r7, sp, #8
	/* Set pins as output */
	TM_GPIO_Init(TM_DISCO_LED_PORT, LED_ALL, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High);
 800424e:	2303      	movs	r3, #3
 8004250:	9301      	str	r3, [sp, #4]
 8004252:	2300      	movs	r3, #0
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	2300      	movs	r3, #0
 8004258:	2201      	movs	r2, #1
 800425a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800425e:	4805      	ldr	r0, [pc, #20]	; (8004274 <TM_DISCO_LedInit+0x2c>)
 8004260:	f000 f81c 	bl	800429c <TM_GPIO_Init>
	
	/* Turn leds off */
	TM_DISCO_LedOff(LED_ALL);
 8004264:	4b03      	ldr	r3, [pc, #12]	; (8004274 <TM_DISCO_LedInit+0x2c>)
 8004266:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800426a:	835a      	strh	r2, [r3, #26]
}
 800426c:	bf00      	nop
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40021800 	.word	0x40021800

08004278 <TM_DISCO_ButtonInit>:

void TM_DISCO_ButtonInit(void) {
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af02      	add	r7, sp, #8
	/* Set pin as input */
	TM_GPIO_Init(TM_DISCO_BUTTON_PORT, TM_DISCO_BUTTON_PIN, TM_GPIO_Mode_IN, TM_GPIO_OType_PP, TM_DISCO_BUTTON_PULL, TM_GPIO_Speed_Low);
 800427e:	2300      	movs	r3, #0
 8004280:	9301      	str	r3, [sp, #4]
 8004282:	2302      	movs	r3, #2
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	2300      	movs	r3, #0
 8004288:	2200      	movs	r2, #0
 800428a:	2101      	movs	r1, #1
 800428c:	4802      	ldr	r0, [pc, #8]	; (8004298 <TM_DISCO_ButtonInit+0x20>)
 800428e:	f000 f805 	bl	800429c <TM_GPIO_Init>
}
 8004292:	bf00      	nop
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40020000 	.word	0x40020000

0800429c <TM_GPIO_Init>:
/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af02      	add	r7, sp, #8
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	4608      	mov	r0, r1
 80042a6:	4611      	mov	r1, r2
 80042a8:	461a      	mov	r2, r3
 80042aa:	4603      	mov	r3, r0
 80042ac:	807b      	strh	r3, [r7, #2]
 80042ae:	460b      	mov	r3, r1
 80042b0:	707b      	strb	r3, [r7, #1]
 80042b2:	4613      	mov	r3, r2
 80042b4:	703b      	strb	r3, [r7, #0]
	/* Check input */
	if (GPIO_Pin == 0x00) {
 80042b6:	887b      	ldrh	r3, [r7, #2]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00e      	beq.n	80042da <TM_GPIO_Init+0x3e>
		return;
	}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f821 	bl	8004304 <TM_GPIO_INT_EnableClock>
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 80042c2:	7838      	ldrb	r0, [r7, #0]
 80042c4:	787a      	ldrb	r2, [r7, #1]
 80042c6:	8879      	ldrh	r1, [r7, #2]
 80042c8:	7d3b      	ldrb	r3, [r7, #20]
 80042ca:	9301      	str	r3, [sp, #4]
 80042cc:	7c3b      	ldrb	r3, [r7, #16]
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	4603      	mov	r3, r0
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f82e 	bl	8004334 <TM_GPIO_INT_Init>
 80042d8:	e000      	b.n	80042dc <TM_GPIO_Init+0x40>
		return;
 80042da:	bf00      	nop
}
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 80042f0:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80042f4:	0a9b      	lsrs	r3, r3, #10
 80042f6:	b29b      	uxth	r3, r3
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f7ff ffe8 	bl	80042e2 <TM_GPIO_GetPortSource>
 8004312:	4603      	mov	r3, r0
 8004314:	461a      	mov	r2, r3
 8004316:	2301      	movs	r3, #1
 8004318:	fa03 f102 	lsl.w	r1, r3, r2
 800431c:	4a04      	ldr	r2, [pc, #16]	; (8004330 <TM_GPIO_INT_EnableClock+0x2c>)
 800431e:	4b04      	ldr	r3, [pc, #16]	; (8004330 <TM_GPIO_INT_EnableClock+0x2c>)
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	430b      	orrs	r3, r1
 8004324:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004326:	bf00      	nop
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	40023800 	.word	0x40023800

08004334 <TM_GPIO_INT_Init>:
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	4608      	mov	r0, r1
 800433e:	4611      	mov	r1, r2
 8004340:	461a      	mov	r2, r3
 8004342:	4603      	mov	r3, r0
 8004344:	807b      	strh	r3, [r7, #2]
 8004346:	460b      	mov	r3, r1
 8004348:	707b      	strb	r3, [r7, #1]
 800434a:	4613      	mov	r3, r2
 800434c:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7ff ffc7 	bl	80042e2 <TM_GPIO_GetPortSource>
 8004354:	4603      	mov	r3, r0
 8004356:	73bb      	strb	r3, [r7, #14]
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8004358:	2300      	movs	r3, #0
 800435a:	73fb      	strb	r3, [r7, #15]
 800435c:	e067      	b.n	800442e <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 800435e:	887a      	ldrh	r2, [r7, #2]
 8004360:	7bfb      	ldrb	r3, [r7, #15]
 8004362:	fa42 f303 	asr.w	r3, r2, r3
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d05b      	beq.n	8004426 <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 800436e:	7bbb      	ldrb	r3, [r7, #14]
 8004370:	7bba      	ldrb	r2, [r7, #14]
 8004372:	4932      	ldr	r1, [pc, #200]	; (800443c <TM_GPIO_INT_Init+0x108>)
 8004374:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004378:	b211      	sxth	r1, r2
 800437a:	7bfa      	ldrb	r2, [r7, #15]
 800437c:	2001      	movs	r0, #1
 800437e:	fa00 f202 	lsl.w	r2, r0, r2
 8004382:	b212      	sxth	r2, r2
 8004384:	430a      	orrs	r2, r1
 8004386:	b212      	sxth	r2, r2
 8004388:	b291      	uxth	r1, r2
 800438a:	4a2c      	ldr	r2, [pc, #176]	; (800443c <TM_GPIO_INT_Init+0x108>)
 800438c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	7bfa      	ldrb	r2, [r7, #15]
 8004396:	0052      	lsls	r2, r2, #1
 8004398:	2103      	movs	r1, #3
 800439a:	fa01 f202 	lsl.w	r2, r1, r2
 800439e:	43d2      	mvns	r2, r2
 80043a0:	4013      	ands	r3, r2
 80043a2:	7e39      	ldrb	r1, [r7, #24]
 80043a4:	7bfa      	ldrb	r2, [r7, #15]
 80043a6:	0052      	lsls	r2, r2, #1
 80043a8:	fa01 f202 	lsl.w	r2, r1, r2
 80043ac:	431a      	orrs	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	7bfb      	ldrb	r3, [r7, #15]
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	2103      	movs	r1, #3
 80043bc:	fa01 f303 	lsl.w	r3, r1, r3
 80043c0:	43db      	mvns	r3, r3
 80043c2:	4013      	ands	r3, r2
 80043c4:	7879      	ldrb	r1, [r7, #1]
 80043c6:	7bfa      	ldrb	r2, [r7, #15]
 80043c8:	0052      	lsls	r2, r2, #1
 80043ca:	fa01 f202 	lsl.w	r2, r1, r2
 80043ce:	431a      	orrs	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 80043d4:	787b      	ldrb	r3, [r7, #1]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d002      	beq.n	80043e0 <TM_GPIO_INT_Init+0xac>
 80043da:	787b      	ldrb	r3, [r7, #1]
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d123      	bne.n	8004428 <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	7bfa      	ldrb	r2, [r7, #15]
 80043e6:	2101      	movs	r1, #1
 80043e8:	fa01 f202 	lsl.w	r2, r1, r2
 80043ec:	b292      	uxth	r2, r2
 80043ee:	43d2      	mvns	r2, r2
 80043f0:	4013      	ands	r3, r2
 80043f2:	7839      	ldrb	r1, [r7, #0]
 80043f4:	7bfa      	ldrb	r2, [r7, #15]
 80043f6:	fa01 f202 	lsl.w	r2, r1, r2
 80043fa:	b292      	uxth	r2, r2
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	7bfb      	ldrb	r3, [r7, #15]
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	2103      	movs	r1, #3
 800440c:	fa01 f303 	lsl.w	r3, r1, r3
 8004410:	43db      	mvns	r3, r3
 8004412:	4013      	ands	r3, r2
 8004414:	7f39      	ldrb	r1, [r7, #28]
 8004416:	7bfa      	ldrb	r2, [r7, #15]
 8004418:	0052      	lsls	r2, r2, #1
 800441a:	fa01 f202 	lsl.w	r2, r1, r2
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	609a      	str	r2, [r3, #8]
 8004424:	e000      	b.n	8004428 <TM_GPIO_INT_Init+0xf4>
			continue;
 8004426:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8004428:	7bfb      	ldrb	r3, [r7, #15]
 800442a:	3301      	adds	r3, #1
 800442c:	73fb      	strb	r3, [r7, #15]
 800442e:	7bfb      	ldrb	r3, [r7, #15]
 8004430:	2b0f      	cmp	r3, #15
 8004432:	d994      	bls.n	800435e <TM_GPIO_INT_Init+0x2a>
		}
	}
}
 8004434:	bf00      	nop
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	200001a8 	.word	0x200001a8

08004440 <TM_USB_HIDDEVICE_Init>:
#include "tm_stm32f4_usb_hid_device.h"

extern USB_OTG_CORE_HANDLE USB_OTG_dev;
extern TM_USB_HIDDEVICE_Status_t TM_USB_HIDDEVICE_INT_Status;

TM_USB_HIDDEVICE_Status_t TM_USB_HIDDEVICE_Init(void) {
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af02      	add	r7, sp, #8
	/* Initialize HID device */
	USBD_Init(&USB_OTG_dev,
 8004446:	4b08      	ldr	r3, [pc, #32]	; (8004468 <TM_USB_HIDDEVICE_Init+0x28>)
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	4b08      	ldr	r3, [pc, #32]	; (800446c <TM_USB_HIDDEVICE_Init+0x2c>)
 800444c:	4a08      	ldr	r2, [pc, #32]	; (8004470 <TM_USB_HIDDEVICE_Init+0x30>)
 800444e:	2100      	movs	r1, #0
 8004450:	4808      	ldr	r0, [pc, #32]	; (8004474 <TM_USB_HIDDEVICE_Init+0x34>)
 8004452:	f002 fbc1 	bl	8006bd8 <USBD_Init>
			&USR_desc, 
			&USBD_HID_cb, 
			&USR_cb);
	
	/* Set not connected */
	TM_USB_HIDDEVICE_INT_Status = TM_USB_HIDDEVICE_Status_Disconnected;
 8004456:	4b08      	ldr	r3, [pc, #32]	; (8004478 <TM_USB_HIDDEVICE_Init+0x38>)
 8004458:	2202      	movs	r2, #2
 800445a:	701a      	strb	r2, [r3, #0]
	
	/* Device not connected */
	return TM_USB_HIDDEVICE_INT_Status;
 800445c:	4b06      	ldr	r3, [pc, #24]	; (8004478 <TM_USB_HIDDEVICE_Init+0x38>)
 800445e:	781b      	ldrb	r3, [r3, #0]
}
 8004460:	4618      	mov	r0, r3
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	20000134 	.word	0x20000134
 800446c:	200000a0 	.word	0x200000a0
 8004470:	20000060 	.word	0x20000060
 8004474:	2000022c 	.word	0x2000022c
 8004478:	200001d9 	.word	0x200001d9

0800447c <TM_USB_HIDDEVICE_GetStatus>:

TM_USB_HIDDEVICE_Status_t TM_USB_HIDDEVICE_GetStatus(void) {
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
	/* Return status */
	return TM_USB_HIDDEVICE_INT_Status;
 8004480:	4b03      	ldr	r3, [pc, #12]	; (8004490 <TM_USB_HIDDEVICE_GetStatus+0x14>)
 8004482:	781b      	ldrb	r3, [r3, #0]
}
 8004484:	4618      	mov	r0, r3
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	200001d9 	.word	0x200001d9

08004494 <TM_USB_HIDDEVICE_MouseStructInit>:

/* Mouse */
TM_USB_HIDDEVICE_Status_t TM_USB_HIDDEVICE_MouseStructInit(TM_USB_HIDDEVICE_Mouse_t* Mouse_Data) {
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
	/* Set defaults */
	Mouse_Data->LeftButton = TM_USB_HIDDEVICE_Button_Released;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	701a      	strb	r2, [r3, #0]
	Mouse_Data->RightButton = TM_USB_HIDDEVICE_Button_Released;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	705a      	strb	r2, [r3, #1]
	Mouse_Data->MiddleButton = TM_USB_HIDDEVICE_Button_Released;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	709a      	strb	r2, [r3, #2]
	Mouse_Data->XAxis = 0;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	70da      	strb	r2, [r3, #3]
	Mouse_Data->YAxis = 0;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	711a      	strb	r2, [r3, #4]
	Mouse_Data->Wheel = 0;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	715a      	strb	r2, [r3, #5]
	
	/* Return currect status */
	return TM_USB_HIDDEVICE_INT_Status;
 80044c0:	4b03      	ldr	r3, [pc, #12]	; (80044d0 <TM_USB_HIDDEVICE_MouseStructInit+0x3c>)
 80044c2:	781b      	ldrb	r3, [r3, #0]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	200001d9 	.word	0x200001d9

080044d4 <TM_USB_HIDDEVICE_MouseSend>:

TM_USB_HIDDEVICE_Status_t TM_USB_HIDDEVICE_MouseSend(TM_USB_HIDDEVICE_Mouse_t* Mouse_Data) {
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
//	uint8_t buff[5]; /* 5 bytes long report */
//	uint8_t buff[4]; /* 4 bytes long report */
	uint8_t buff[3]; /* 3 bytes long report */
	
	/* Check status */
	if (TM_USB_HIDDEVICE_INT_Status != TM_USB_HIDDEVICE_Status_Connected) {
 80044dc:	4b1b      	ldr	r3, [pc, #108]	; (800454c <TM_USB_HIDDEVICE_MouseSend+0x78>)
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d001      	beq.n	80044e8 <TM_USB_HIDDEVICE_MouseSend+0x14>
		return TM_USB_HIDDEVICE_Status_Disconnected;
 80044e4:	2302      	movs	r3, #2
 80044e6:	e02d      	b.n	8004544 <TM_USB_HIDDEVICE_MouseSend+0x70>
//
//	/* Set wheel */
//	buff[4] = Mouse_Data->Wheel;

	/* Set buttons */
	buff[0] = 0; //0xF8; //0;
 80044e8:	2300      	movs	r3, #0
 80044ea:	733b      	strb	r3, [r7, #12]
	buff[0] |= Mouse_Data->LeftButton << 0;		/* Bit 0 */
 80044ec:	7b3a      	ldrb	r2, [r7, #12]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	733b      	strb	r3, [r7, #12]
	buff[0] |= Mouse_Data->RightButton << 1;	/* Bit 1 */
 80044f8:	7b3b      	ldrb	r3, [r7, #12]
 80044fa:	b25a      	sxtb	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	785b      	ldrb	r3, [r3, #1]
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	b25b      	sxtb	r3, r3
 8004504:	4313      	orrs	r3, r2
 8004506:	b25b      	sxtb	r3, r3
 8004508:	b2db      	uxtb	r3, r3
 800450a:	733b      	strb	r3, [r7, #12]
	buff[0] |= Mouse_Data->MiddleButton << 2;	/* Bit 2 */
 800450c:	7b3b      	ldrb	r3, [r7, #12]
 800450e:	b25a      	sxtb	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	789b      	ldrb	r3, [r3, #2]
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	b25b      	sxtb	r3, r3
 8004518:	4313      	orrs	r3, r2
 800451a:	b25b      	sxtb	r3, r3
 800451c:	b2db      	uxtb	r3, r3
 800451e:	733b      	strb	r3, [r7, #12]

	/* Set X and Y offset */
	buff[1] = Mouse_Data->XAxis;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8004526:	b2db      	uxtb	r3, r3
 8004528:	737b      	strb	r3, [r7, #13]
	buff[2] = Mouse_Data->YAxis;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8004530:	b2db      	uxtb	r3, r3
 8004532:	73bb      	strb	r3, [r7, #14]
//	buff[4] = 0;

	/* Send to USB */
//	USBD_HID_SendReport(&USB_OTG_dev, buff, 5);
//	USBD_HID_SendReport(&USB_OTG_dev, buff, 4);
	USBD_HID_SendReport(&USB_OTG_dev, buff, 3);
 8004534:	f107 030c 	add.w	r3, r7, #12
 8004538:	2203      	movs	r2, #3
 800453a:	4619      	mov	r1, r3
 800453c:	4804      	ldr	r0, [pc, #16]	; (8004550 <TM_USB_HIDDEVICE_MouseSend+0x7c>)
 800453e:	f002 ff0f 	bl	8007360 <USBD_HID_SendReport>
	
	/* Return connected */
	return TM_USB_HIDDEVICE_Status_Connected;
 8004542:	2301      	movs	r3, #1
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	200001d9 	.word	0x200001d9
 8004550:	2000022c 	.word	0x2000022c

08004554 <USB_OTG_BSP_Init>:
*         Initilizes BSP configurations
* @param  None
* @retval None
*/

void USB_OTG_BSP_Init(USB_OTG_CORE_HANDLE *pdev) {
 8004554:	b580      	push	{r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
#endif

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
	RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_OTG_FS, ENABLE); 
#else // USE_USB_OTG_HS 
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB , ENABLE);
 800455c:	2101      	movs	r1, #1
 800455e:	2002      	movs	r0, #2
 8004560:	f7fc ff62 	bl	8001428 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = 	GPIO_Pin_14 | 
 8004564:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004568:	61bb      	str	r3, [r7, #24]
									GPIO_Pin_15;

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800456a:	2303      	movs	r3, #3
 800456c:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800456e:	2302      	movs	r3, #2
 8004570:	773b      	strb	r3, [r7, #28]
	GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8004572:	f107 0318 	add.w	r3, r7, #24
 8004576:	4619      	mov	r1, r3
 8004578:	4833      	ldr	r0, [pc, #204]	; (8004648 <USB_OTG_BSP_Init+0xf4>)
 800457a:	f7fc f93f 	bl	80007fc <GPIO_Init>

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource14, GPIO_AF_OTG2_FS); 
 800457e:	220c      	movs	r2, #12
 8004580:	210e      	movs	r1, #14
 8004582:	4831      	ldr	r0, [pc, #196]	; (8004648 <USB_OTG_BSP_Init+0xf4>)
 8004584:	f7fc f9fe 	bl	8000984 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource15, GPIO_AF_OTG2_FS);
 8004588:	220c      	movs	r2, #12
 800458a:	210f      	movs	r1, #15
 800458c:	482e      	ldr	r0, [pc, #184]	; (8004648 <USB_OTG_BSP_Init+0xf4>)
 800458e:	f7fc f9f9 	bl	8000984 <GPIO_PinAFConfig>

#ifndef USB_HID_DEVICE_DISABLE_VBUS
	/* Configure  VBUS Pin */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8004592:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004596:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8004598:	2303      	movs	r3, #3
 800459a:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800459c:	2300      	movs	r3, #0
 800459e:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80045a0:	2301      	movs	r3, #1
 80045a2:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80045a4:	2300      	movs	r3, #0
 80045a6:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOB, &GPIO_InitStructure);    
 80045a8:	f107 0318 	add.w	r3, r7, #24
 80045ac:	4619      	mov	r1, r3
 80045ae:	4826      	ldr	r0, [pc, #152]	; (8004648 <USB_OTG_BSP_Init+0xf4>)
 80045b0:	f7fc f924 	bl	80007fc <GPIO_Init>
#endif

#ifndef USB_HID_DEVICE_DISABLE_ID
	/* Configure ID pin */
	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
 80045b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045b8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80045ba:	2301      	movs	r3, #1
 80045bc:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;  
 80045be:	2301      	movs	r3, #1
 80045c0:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80045c2:	2303      	movs	r3, #3
 80045c4:	777b      	strb	r3, [r7, #29]
	GPIO_Init(GPIOA, &GPIO_InitStructure);  
 80045c6:	f107 0318 	add.w	r3, r7, #24
 80045ca:	4619      	mov	r1, r3
 80045cc:	481f      	ldr	r0, [pc, #124]	; (800464c <USB_OTG_BSP_Init+0xf8>)
 80045ce:	f7fc f915 	bl	80007fc <GPIO_Init>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource12, GPIO_AF_OTG2_FS);   
 80045d2:	220c      	movs	r2, #12
 80045d4:	210c      	movs	r1, #12
 80045d6:	481c      	ldr	r0, [pc, #112]	; (8004648 <USB_OTG_BSP_Init+0xf4>)
 80045d8:	f7fc f9d4 	bl	8000984 <GPIO_PinAFConfig>
#endif


	RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_OTG_HS, ENABLE) ;   
 80045dc:	2101      	movs	r1, #1
 80045de:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80045e2:	f7fc ff21 	bl	8001428 <RCC_AHB1PeriphClockCmd>
#endif //USB_OTG_HS

  /* enable the PWR clock */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);   
 80045e6:	2101      	movs	r1, #1
 80045e8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80045ec:	f7fc ffbc 	bl	8001568 <RCC_APB1PeriphResetCmd>

	EXTI_ClearITPendingBit(EXTI_Line18);    
#endif 
  
#ifdef USB_OTG_HS_LOW_PWR_MGMT_SUPPORT
	EXTI_ClearITPendingBit(EXTI_Line20);
 80045f0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80045f4:	f7fb ffd2 	bl	800059c <EXTI_ClearITPendingBit>

	EXTI_InitStructure.EXTI_Line = EXTI_Line20; 
 80045f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80045fc:	613b      	str	r3, [r7, #16]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 80045fe:	2300      	movs	r3, #0
 8004600:	753b      	strb	r3, [r7, #20]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8004602:	2308      	movs	r3, #8
 8004604:	757b      	strb	r3, [r7, #21]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8004606:	2301      	movs	r3, #1
 8004608:	75bb      	strb	r3, [r7, #22]
	EXTI_Init(&EXTI_InitStructure);
 800460a:	f107 0310 	add.w	r3, r7, #16
 800460e:	4618      	mov	r0, r3
 8004610:	f7fb ff52 	bl	80004b8 <EXTI_Init>

	EXTI_ClearITPendingBit(EXTI_Line20);   
 8004614:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004618:	f7fb ffc0 	bl	800059c <EXTI_ClearITPendingBit>

	NVIC_InitStructure.NVIC_IRQChannel = OTG_HS_WKUP_IRQn;
 800461c:	234c      	movs	r3, #76	; 0x4c
 800461e:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = USB_HIDDEVICE_NVIC_PRIORITY;
 8004620:	2301      	movs	r3, #1
 8004622:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = USB_HIDDEVICE_NVIC_SUBPRIORITY + 3;
 8004624:	2304      	movs	r3, #4
 8004626:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004628:	2301      	movs	r3, #1
 800462a:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&NVIC_InitStructure);
 800462c:	f107 030c 	add.w	r3, r7, #12
 8004630:	4618      	mov	r0, r3
 8004632:	f7fb fdf7 	bl	8000224 <NVIC_Init>

	EXTI_ClearITPendingBit(EXTI_Line20);    
 8004636:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800463a:	f7fb ffaf 	bl	800059c <EXTI_ClearITPendingBit>
#endif
}
 800463e:	bf00      	nop
 8004640:	3720      	adds	r7, #32
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	40020400 	.word	0x40020400
 800464c:	40020000 	.word	0x40020000

08004650 <USB_OTG_BSP_EnableInterrupt>:
*         Enabele USB Global interrupt
* @param  None
* @retval None
*/
void USB_OTG_BSP_EnableInterrupt(USB_OTG_CORE_HANDLE *pdev)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  NVIC_InitTypeDef NVIC_InitStructure; 
  
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 8004658:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800465c:	f7fb fdce 	bl	80001fc <NVIC_PriorityGroupConfig>
#ifdef USE_USB_OTG_HS   
  NVIC_InitStructure.NVIC_IRQChannel = OTG_HS_IRQn;
 8004660:	234d      	movs	r3, #77	; 0x4d
 8004662:	733b      	strb	r3, [r7, #12]
#else
  NVIC_InitStructure.NVIC_IRQChannel = OTG_FS_IRQn;  
#endif
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = USB_HIDDEVICE_NVIC_PRIORITY;
 8004664:	2301      	movs	r3, #1
 8004666:	737b      	strb	r3, [r7, #13]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = USB_HIDDEVICE_NVIC_SUBPRIORITY + 2;
 8004668:	2303      	movs	r3, #3
 800466a:	73bb      	strb	r3, [r7, #14]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800466c:	2301      	movs	r3, #1
 800466e:	73fb      	strb	r3, [r7, #15]
  NVIC_Init(&NVIC_InitStructure);  
 8004670:	f107 030c 	add.w	r3, r7, #12
 8004674:	4618      	mov	r0, r3
 8004676:	f7fb fdd5 	bl	8000224 <NVIC_Init>
#ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 800467a:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800467e:	f7fb fdbd 	bl	80001fc <NVIC_PriorityGroupConfig>
  NVIC_InitStructure.NVIC_IRQChannel = OTG_HS_EP1_OUT_IRQn;
 8004682:	234a      	movs	r3, #74	; 0x4a
 8004684:	733b      	strb	r3, [r7, #12]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = USB_HIDDEVICE_NVIC_PRIORITY;
 8004686:	2301      	movs	r3, #1
 8004688:	737b      	strb	r3, [r7, #13]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = USB_HIDDEVICE_NVIC_SUBPRIORITY + 1;
 800468a:	2302      	movs	r3, #2
 800468c:	73bb      	strb	r3, [r7, #14]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800468e:	2301      	movs	r3, #1
 8004690:	73fb      	strb	r3, [r7, #15]
  NVIC_Init(&NVIC_InitStructure);  
 8004692:	f107 030c 	add.w	r3, r7, #12
 8004696:	4618      	mov	r0, r3
 8004698:	f7fb fdc4 	bl	8000224 <NVIC_Init>
  
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 800469c:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80046a0:	f7fb fdac 	bl	80001fc <NVIC_PriorityGroupConfig>
  NVIC_InitStructure.NVIC_IRQChannel = OTG_HS_EP1_IN_IRQn;
 80046a4:	234b      	movs	r3, #75	; 0x4b
 80046a6:	733b      	strb	r3, [r7, #12]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = USB_HIDDEVICE_NVIC_PRIORITY;
 80046a8:	2301      	movs	r3, #1
 80046aa:	737b      	strb	r3, [r7, #13]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = USB_HIDDEVICE_NVIC_SUBPRIORITY;
 80046ac:	2301      	movs	r3, #1
 80046ae:	73bb      	strb	r3, [r7, #14]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80046b0:	2301      	movs	r3, #1
 80046b2:	73fb      	strb	r3, [r7, #15]
  NVIC_Init(&NVIC_InitStructure);   
 80046b4:	f107 030c 	add.w	r3, r7, #12
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fb fdb3 	bl	8000224 <NVIC_Init>
#endif
}
 80046be:	bf00      	nop
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
	...

080046c8 <USB_OTG_BSP_uDelay>:
*         This function provides delay time in micro sec
* @param  usec : Value of delay required in micro sec
* @retval None
*/
void USB_OTG_BSP_uDelay (const uint32_t usec)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80046d0:	2300      	movs	r3, #0
 80046d2:	60fb      	str	r3, [r7, #12]
  const uint32_t utime = (120 * usec / 7);
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	4613      	mov	r3, r2
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	1a9b      	subs	r3, r3, r2
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	461a      	mov	r2, r3
 80046e0:	4b0a      	ldr	r3, [pc, #40]	; (800470c <USB_OTG_BSP_uDelay+0x44>)
 80046e2:	fba3 1302 	umull	r1, r3, r3, r2
 80046e6:	1ad2      	subs	r2, r2, r3
 80046e8:	0852      	lsrs	r2, r2, #1
 80046ea:	4413      	add	r3, r2
 80046ec:	089b      	lsrs	r3, r3, #2
 80046ee:	60bb      	str	r3, [r7, #8]
  do
  {
    if ( ++count > utime )
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	3301      	adds	r3, #1
 80046f4:	60fb      	str	r3, [r7, #12]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d800      	bhi.n	8004700 <USB_OTG_BSP_uDelay+0x38>
 80046fe:	e7f7      	b.n	80046f0 <USB_OTG_BSP_uDelay+0x28>
    {
      return ;
 8004700:	bf00      	nop
    }
  }
  while (1);
}
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	24924925 	.word	0x24924925

08004710 <USB_OTG_BSP_mDelay>:
* @brief  USB_OTG_BSP_mDelay
*          This function provides delay time in milli sec
* @param  msec : Value of delay required in milli sec
* @retval None
*/
void USB_OTG_BSP_mDelay (const uint32_t msec) {
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
	USB_OTG_BSP_uDelay(msec * 1000);   
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800471e:	fb02 f303 	mul.w	r3, r2, r3
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff ffd0 	bl	80046c8 <USB_OTG_BSP_uDelay>
}
 8004728:	bf00      	nop
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <OTG_HS_WKUP_IRQHandler>:
* @brief  This function handles EXTI15_10_IRQ Handler.
* @param  None
* @retval None
*/
#ifdef USE_USB_OTG_HS  
void OTG_HS_WKUP_IRQHandler(void) {
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
	if (USB_OTG_dev.cfg.low_power) {
 8004734:	4b17      	ldr	r3, [pc, #92]	; (8004794 <OTG_HS_WKUP_IRQHandler+0x64>)
 8004736:	7a9b      	ldrb	r3, [r3, #10]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d025      	beq.n	8004788 <OTG_HS_WKUP_IRQHandler+0x58>
		/* Reset SLEEPDEEP and SLEEPONEXIT bits */
		SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800473c:	4a16      	ldr	r2, [pc, #88]	; (8004798 <OTG_HS_WKUP_IRQHandler+0x68>)
 800473e:	4b16      	ldr	r3, [pc, #88]	; (8004798 <OTG_HS_WKUP_IRQHandler+0x68>)
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	f023 0306 	bic.w	r3, r3, #6
 8004746:	6113      	str	r3, [r2, #16]

		/* After wake-up from sleep mode, reconfigure the system clock */
		RCC_HSEConfig(RCC_HSE_ON);
 8004748:	2001      	movs	r0, #1
 800474a:	f7fc fd2d 	bl	80011a8 <RCC_HSEConfig>

		/* Wait till HSE is ready */
		while (RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET);
 800474e:	bf00      	nop
 8004750:	2031      	movs	r0, #49	; 0x31
 8004752:	f7fc ff49 	bl	80015e8 <RCC_GetFlagStatus>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0f9      	beq.n	8004750 <OTG_HS_WKUP_IRQHandler+0x20>

		/* Enable PLL */
		RCC_PLLCmd(ENABLE);
 800475c:	2001      	movs	r0, #1
 800475e:	f7fc fd37 	bl	80011d0 <RCC_PLLCmd>

		/* Wait till PLL is ready */
		while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
 8004762:	bf00      	nop
 8004764:	2039      	movs	r0, #57	; 0x39
 8004766:	f7fc ff3f 	bl	80015e8 <RCC_GetFlagStatus>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0f9      	beq.n	8004764 <OTG_HS_WKUP_IRQHandler+0x34>

		/* Select PLL as system clock source */
		RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 8004770:	2002      	movs	r0, #2
 8004772:	f7fc fd67 	bl	8001244 <RCC_SYSCLKConfig>

		/* Wait till PLL is used as system clock source */
		while (RCC_GetSYSCLKSource() != 0x08);
 8004776:	bf00      	nop
 8004778:	f7fc fd80 	bl	800127c <RCC_GetSYSCLKSource>
 800477c:	4603      	mov	r3, r0
 800477e:	2b08      	cmp	r3, #8
 8004780:	d1fa      	bne.n	8004778 <OTG_HS_WKUP_IRQHandler+0x48>

		USB_OTG_UngateClock(&USB_OTG_dev);
 8004782:	4804      	ldr	r0, [pc, #16]	; (8004794 <OTG_HS_WKUP_IRQHandler+0x64>)
 8004784:	f001 f980 	bl	8005a88 <USB_OTG_UngateClock>
	}
	EXTI_ClearITPendingBit(EXTI_Line20);
 8004788:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800478c:	f7fb ff06 	bl	800059c <EXTI_ClearITPendingBit>
}
 8004790:	bf00      	nop
 8004792:	bd80      	pop	{r7, pc}
 8004794:	2000022c 	.word	0x2000022c
 8004798:	e000ed00 	.word	0xe000ed00

0800479c <OTG_HS_IRQHandler>:
#ifdef USE_USB_OTG_HS  
void OTG_HS_IRQHandler(void)
#else
void OTG_FS_IRQHandler(void)
#endif
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
	USBD_OTG_ISR_Handler(&USB_OTG_dev);
 80047a0:	4802      	ldr	r0, [pc, #8]	; (80047ac <OTG_HS_IRQHandler+0x10>)
 80047a2:	f001 fcc7 	bl	8006134 <USBD_OTG_ISR_Handler>
}
 80047a6:	bf00      	nop
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	2000022c 	.word	0x2000022c

080047b0 <OTG_HS_EP1_IN_IRQHandler>:
/**
* @brief  This function handles EP1_IN Handler.
* @param  None
* @retval None
*/
void OTG_HS_EP1_IN_IRQHandler(void) {
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
	USBD_OTG_EP1IN_ISR_Handler (&USB_OTG_dev);
 80047b4:	4802      	ldr	r0, [pc, #8]	; (80047c0 <OTG_HS_EP1_IN_IRQHandler+0x10>)
 80047b6:	f001 fc27 	bl	8006008 <USBD_OTG_EP1IN_ISR_Handler>
}
 80047ba:	bf00      	nop
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	2000022c 	.word	0x2000022c

080047c4 <OTG_HS_EP1_OUT_IRQHandler>:
* @brief  This function handles EP1_OUT Handler.
* @param  None
* @retval None
*/
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
  USBD_OTG_EP1OUT_ISR_Handler (&USB_OTG_dev);
 80047c8:	4802      	ldr	r0, [pc, #8]	; (80047d4 <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 80047ca:	f001 fbcf 	bl	8005f6c <USBD_OTG_EP1OUT_ISR_Handler>
}
 80047ce:	bf00      	nop
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	2000022c 	.word	0x2000022c

080047d8 <USB_OTG_EnableCommonInt>:
*         Initializes the commmon interrupts, used in both device and modes
* @param  pdev : Selected device
* @retval None
*/
static void USB_OTG_EnableCommonInt(USB_OTG_CORE_HANDLE *pdev)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef  int_mask;
  
  int_mask.d32 = 0;
 80047e0:	2300      	movs	r3, #0
 80047e2:	60fb      	str	r3, [r7, #12]
  /* Clear any pending USB_OTG Interrupts */
#ifndef USE_OTG_MODE
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GOTGINT, 0xFFFFFFFF);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f04f 32ff 	mov.w	r2, #4294967295
 80047ec:	605a      	str	r2, [r3, #4]
#endif
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80047f6:	615a      	str	r2, [r3, #20]
  /* Enable the interrupts in the INTMSK */
  int_mask.b.wkupintr = 1;
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
 80047fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047fe:	73fb      	strb	r3, [r7, #15]
  int_mask.b.usbsuspend = 1; 
 8004800:	7b7b      	ldrb	r3, [r7, #13]
 8004802:	f043 0308 	orr.w	r3, r3, #8
 8004806:	737b      	strb	r3, [r7, #13]
#ifdef USE_OTG_MODE
  int_mask.b.otgintr = 1;
  int_mask.b.sessreqintr = 1;
  int_mask.b.conidstschng = 1;
#endif
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	619a      	str	r2, [r3, #24]
}
 8004810:	bf00      	nop
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <USB_OTG_CoreReset>:
* @brief  USB_OTG_CoreReset : Soft reset of the core
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
static USB_OTG_STS USB_OTG_CoreReset(USB_OTG_CORE_HANDLE *pdev)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8004824:	2300      	movs	r3, #0
 8004826:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
 8004828:	2300      	movs	r3, #0
 800482a:	617b      	str	r3, [r7, #20]
  
  greset.d32 = 0;
 800482c:	2300      	movs	r3, #0
 800482e:	60fb      	str	r3, [r7, #12]
  /* Wait for AHB master IDLE state. */
  do
  {
    USB_OTG_BSP_uDelay(3);
 8004830:	2003      	movs	r0, #3
 8004832:	f7ff ff49 	bl	80046c8 <USB_OTG_BSP_uDelay>
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	3301      	adds	r3, #1
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	4a18      	ldr	r2, [pc, #96]	; (80048a8 <USB_OTG_CoreReset+0x8c>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d901      	bls.n	8004850 <USB_OTG_CoreReset+0x34>
    {
      return USB_OTG_OK;
 800484c:	2300      	movs	r3, #0
 800484e:	e026      	b.n	800489e <USB_OTG_CoreReset+0x82>
    }
  }
  while (greset.b.ahbidle == 0);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0e9      	beq.n	8004830 <USB_OTG_CoreReset+0x14>
  /* Core Soft Reset */
  count = 0;
 800485c:	2300      	movs	r3, #0
 800485e:	617b      	str	r3, [r7, #20]
  greset.b.csftrst = 1;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f043 0301 	orr.w	r3, r3, #1
 8004866:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	3301      	adds	r3, #1
 800487c:	617b      	str	r3, [r7, #20]
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	4a09      	ldr	r2, [pc, #36]	; (80048a8 <USB_OTG_CoreReset+0x8c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d806      	bhi.n	8004894 <USB_OTG_CoreReset+0x78>
    {
      break;
    }
  }
  while (greset.b.csftrst == 1);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b01      	cmp	r3, #1
 8004890:	d0ee      	beq.n	8004870 <USB_OTG_CoreReset+0x54>
 8004892:	e000      	b.n	8004896 <USB_OTG_CoreReset+0x7a>
      break;
 8004894:	bf00      	nop
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 8004896:	2003      	movs	r0, #3
 8004898:	f7ff ff16 	bl	80046c8 <USB_OTG_BSP_uDelay>
  return status;
 800489c:	7cfb      	ldrb	r3, [r7, #19]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3718      	adds	r7, #24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	00030d40 	.word	0x00030d40

080048ac <USB_OTG_WritePacket>:
*/
USB_OTG_STS USB_OTG_WritePacket(USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t             *src, 
                                uint8_t             ch_ep_num, 
                                uint16_t            len)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b089      	sub	sp, #36	; 0x24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	4611      	mov	r1, r2
 80048b8:	461a      	mov	r2, r3
 80048ba:	460b      	mov	r3, r1
 80048bc:	71fb      	strb	r3, [r7, #7]
 80048be:	4613      	mov	r3, r2
 80048c0:	80bb      	strh	r3, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	76fb      	strb	r3, [r7, #27]
  if (pdev->cfg.dma_enable == 0)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	78db      	ldrb	r3, [r3, #3]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d122      	bne.n	8004914 <USB_OTG_WritePacket+0x68>
  {
    uint32_t count32b= 0 , i= 0;
 80048ce:	2300      	movs	r3, #0
 80048d0:	617b      	str	r3, [r7, #20]
 80048d2:	2300      	movs	r3, #0
 80048d4:	61fb      	str	r3, [r7, #28]
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
 80048d6:	88bb      	ldrh	r3, [r7, #4]
 80048d8:	3303      	adds	r3, #3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	da00      	bge.n	80048e0 <USB_OTG_WritePacket+0x34>
 80048de:	3303      	adds	r3, #3
 80048e0:	109b      	asrs	r3, r3, #2
 80048e2:	617b      	str	r3, [r7, #20]
    fifo = pdev->regs.DFIFO[ch_ep_num];
 80048e4:	79fb      	ldrb	r3, [r7, #7]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	3332      	adds	r3, #50	; 0x32
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	613b      	str	r3, [r7, #16]
    for (i = 0; i < count32b; i++, src+=4)
 80048f2:	2300      	movs	r3, #0
 80048f4:	61fb      	str	r3, [r7, #28]
 80048f6:	e009      	b.n	800490c <USB_OTG_WritePacket+0x60>
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	601a      	str	r2, [r3, #0]
    for (i = 0; i < count32b; i++, src+=4)
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	3301      	adds	r3, #1
 8004904:	61fb      	str	r3, [r7, #28]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	3304      	adds	r3, #4
 800490a:	60bb      	str	r3, [r7, #8]
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	429a      	cmp	r2, r3
 8004912:	d3f1      	bcc.n	80048f8 <USB_OTG_WritePacket+0x4c>
    }
  }
  return status;
 8004914:	7efb      	ldrb	r3, [r7, #27]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3724      	adds	r7, #36	; 0x24
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <USB_OTG_ReadPacket>:
* @retval None
*/
void *USB_OTG_ReadPacket(USB_OTG_CORE_HANDLE *pdev, 
                         uint8_t *dest, 
                         uint16_t len)
{
 8004922:	b480      	push	{r7}
 8004924:	b089      	sub	sp, #36	; 0x24
 8004926:	af00      	add	r7, sp, #0
 8004928:	60f8      	str	r0, [r7, #12]
 800492a:	60b9      	str	r1, [r7, #8]
 800492c:	4613      	mov	r3, r2
 800492e:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0;
 8004930:	2300      	movs	r3, #0
 8004932:	61fb      	str	r3, [r7, #28]
  uint32_t count32b = (len + 3) / 4;
 8004934:	88fb      	ldrh	r3, [r7, #6]
 8004936:	3303      	adds	r3, #3
 8004938:	2b00      	cmp	r3, #0
 800493a:	da00      	bge.n	800493e <USB_OTG_ReadPacket+0x1c>
 800493c:	3303      	adds	r3, #3
 800493e:	109b      	asrs	r3, r3, #2
 8004940:	61bb      	str	r3, [r7, #24]
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004948:	617b      	str	r3, [r7, #20]
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 800494a:	2300      	movs	r3, #0
 800494c:	61fb      	str	r3, [r7, #28]
 800494e:	e009      	b.n	8004964 <USB_OTG_ReadPacket+0x42>
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	601a      	str	r2, [r3, #0]
  for ( i = 0; i < count32b; i++, dest += 4 )
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	3301      	adds	r3, #1
 800495c:	61fb      	str	r3, [r7, #28]
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	3304      	adds	r3, #4
 8004962:	60bb      	str	r3, [r7, #8]
 8004964:	69fa      	ldr	r2, [r7, #28]
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	429a      	cmp	r2, r3
 800496a:	d3f1      	bcc.n	8004950 <USB_OTG_ReadPacket+0x2e>
    
  }
  return ((void *)dest);
 800496c:	68bb      	ldr	r3, [r7, #8]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3724      	adds	r7, #36	; 0x24
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
	...

0800497c <USB_OTG_SelectCore>:
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
                               USB_OTG_CORE_ID_TypeDef coreID)
{
 800497c:	b480      	push	{r7}
 800497e:	b087      	sub	sp, #28
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	460b      	mov	r3, r1
 8004986:	70fb      	strb	r3, [r7, #3]
  uint32_t i , baseAddress = 0;
 8004988:	2300      	movs	r3, #0
 800498a:	613b      	str	r3, [r7, #16]
  USB_OTG_STS status = USB_OTG_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	73fb      	strb	r3, [r7, #15]
  
  pdev->cfg.dma_enable       = 0;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	70da      	strb	r2, [r3, #3]
  
  /* at startup the core is in FS mode */
  pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	709a      	strb	r2, [r3, #2]
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2240      	movs	r2, #64	; 0x40
 80049a0:	809a      	strh	r2, [r3, #4]
  
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
 80049a2:	78fb      	ldrb	r3, [r7, #3]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d113      	bne.n	80049d0 <USB_OTG_SelectCore+0x54>
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
 80049a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80049ac:	613b      	str	r3, [r7, #16]
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	72da      	strb	r2, [r3, #11]
    pdev->cfg.host_channels    = 8 ;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2208      	movs	r2, #8
 80049b8:	701a      	strb	r2, [r3, #0]
    pdev->cfg.dev_endpoints    = 4 ;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2204      	movs	r2, #4
 80049be:	705a      	strb	r2, [r3, #1]
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80049c6:	80da      	strh	r2, [r3, #6]
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;     
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	721a      	strb	r2, [r3, #8]
 80049ce:	e01a      	b.n	8004a06 <USB_OTG_SelectCore+0x8a>
    
#ifdef USB_OTG_FS_LOW_PWR_MGMT_SUPPORT    
    pdev->cfg.low_power        = 1;    
#endif     
  }
  else if (coreID == USB_OTG_HS_CORE_ID)
 80049d0:	78fb      	ldrb	r3, [r7, #3]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d117      	bne.n	8004a06 <USB_OTG_SelectCore+0x8a>
  {
    baseAddress                = USB_OTG_HS_BASE_ADDR;
 80049d6:	4b4a      	ldr	r3, [pc, #296]	; (8004b00 <USB_OTG_SelectCore+0x184>)
 80049d8:	613b      	str	r3, [r7, #16]
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	72da      	strb	r2, [r3, #11]
    pdev->cfg.host_channels    = 12 ;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	220c      	movs	r2, #12
 80049e4:	701a      	strb	r2, [r3, #0]
    pdev->cfg.dev_endpoints    = 6 ;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2206      	movs	r2, #6
 80049ea:	705a      	strb	r2, [r3, #1]
    pdev->cfg.TotalFifoSize    = 1280;/* in 32-bits */
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80049f2:	80da      	strh	r2, [r3, #6]
    
#ifdef USB_OTG_ULPI_PHY_ENABLED
    pdev->cfg.phy_itface       = USB_OTG_ULPI_PHY;
#else    
#ifdef USB_OTG_EMBEDDED_PHY_ENABLED
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	721a      	strb	r2, [r3, #8]
#endif  
#endif      
    
#ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED    
    pdev->cfg.dma_enable       = 1;    
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	70da      	strb	r2, [r3, #3]
#ifdef USB_OTG_HS_SOF_OUTPUT_ENABLED    
    pdev->cfg.Sof_output       = 1;    
#endif 
    
#ifdef USB_OTG_HS_LOW_PWR_MGMT_SUPPORT    
    pdev->cfg.low_power        = 1;    
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	729a      	strb	r2, [r3, #10]
#endif 
    
  }
  
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	60da      	str	r2, [r3, #12]
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a12:	461a      	mov	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	611a      	str	r2, [r3, #16]
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004a18:	2300      	movs	r3, #0
 8004a1a:	617b      	str	r3, [r7, #20]
 8004a1c:	e01c      	b.n	8004a58 <USB_OTG_SelectCore+0xdc>
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	015a      	lsls	r2, r3, #5
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	3304      	adds	r3, #4
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	6099      	str	r1, [r3, #8]
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	015a      	lsls	r2, r3, #5
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 8004a44:	4619      	mov	r1, r3
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	3314      	adds	r3, #20
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	6059      	str	r1, [r3, #4]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	3301      	adds	r3, #1
 8004a56:	617b      	str	r3, [r7, #20]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	785b      	ldrb	r3, [r3, #1]
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d8dc      	bhi.n	8004a1e <USB_OTG_SelectCore+0xa2>
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	615a      	str	r2, [r3, #20]
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a76:	461a      	mov	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8004a7e:	2300      	movs	r3, #0
 8004a80:	617b      	str	r3, [r7, #20]
 8004a82:	e00f      	b.n	8004aa4 <USB_OTG_SelectCore+0x128>
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	015a      	lsls	r2, r3, #5
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 8004a90:	4619      	mov	r1, r3
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	3322      	adds	r3, #34	; 0x22
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	6099      	str	r1, [r3, #8]
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	617b      	str	r3, [r7, #20]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d8e9      	bhi.n	8004a84 <USB_OTG_SelectCore+0x108>
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	617b      	str	r3, [r7, #20]
 8004ab4:	e00f      	b.n	8004ad6 <USB_OTG_SelectCore+0x15a>
  {
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
      (i * USB_OTG_DATA_FIFO_SIZE));
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	031a      	lsls	r2, r3, #12
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	3332      	adds	r3, #50	; 0x32
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	6099      	str	r1, [r3, #8]
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	617b      	str	r3, [r7, #20]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	461a      	mov	r2, r3
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d8e9      	bhi.n	8004ab6 <USB_OTG_SelectCore+0x13a>
  }
  pdev->regs.PCGCCTL = (uint32_t *)(baseAddress + USB_OTG_PCGCCTL_OFFSET);
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ae8:	461a      	mov	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  
  return status;
 8004af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	371c      	adds	r7, #28
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	40040000 	.word	0x40040000

08004b04 <USB_OTG_CoreInit>:
*         device mode or host mode operation.
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInit(USB_OTG_CORE_HANDLE *pdev)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	75fb      	strb	r3, [r7, #23]
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  USB_OTG_GCCFG_TypeDef    gccfg;
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  usbcfg.d32 = 0;
 8004b10:	2300      	movs	r3, #0
 8004b12:	613b      	str	r3, [r7, #16]
  gccfg.d32 = 0;
 8004b14:	2300      	movs	r3, #0
 8004b16:	60fb      	str	r3, [r7, #12]
  ahbcfg.d32 = 0;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60bb      	str	r3, [r7, #8]
  
  
  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	7a1b      	ldrb	r3, [r3, #8]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d142      	bne.n	8004baa <USB_OTG_CoreInit+0xa6>
  {
    gccfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GCCFG);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2a:	60fb      	str	r3, [r7, #12]
    gccfg.b.pwdn = 0;
 8004b2c:	7bbb      	ldrb	r3, [r7, #14]
 8004b2e:	f36f 0300 	bfc	r3, #0, #1
 8004b32:	73bb      	strb	r3, [r7, #14]
    
    if (pdev->cfg.Sof_output)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	7a5b      	ldrb	r3, [r3, #9]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <USB_OTG_CoreInit+0x40>
    {
      gccfg.b.sofouten = 1;   
 8004b3c:	7bbb      	ldrb	r3, [r7, #14]
 8004b3e:	f043 0310 	orr.w	r3, r3, #16
 8004b42:	73bb      	strb	r3, [r7, #14]
    }
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Init The ULPI Interface */
    usbcfg.d32 = 0;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	613b      	str	r3, [r7, #16]
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	613b      	str	r3, [r7, #16]
    
    usbcfg.b.physel            = 0; /* HS Interface */
 8004b58:	7c3b      	ldrb	r3, [r7, #16]
 8004b5a:	f36f 1386 	bfc	r3, #6, #1
 8004b5e:	743b      	strb	r3, [r7, #16]
#else
#ifdef USB_OTG_EXTERNAL_VBUS_ENABLED    
    usbcfg.b.ulpi_ext_vbus_drv = 1; /* Use external VBUS */
#endif
#endif 
    usbcfg.b.term_sel_dl_pulse = 0; /* Data line pulsing using utmi_txvalid */    
 8004b60:	7cbb      	ldrb	r3, [r7, #18]
 8004b62:	f36f 1386 	bfc	r3, #6, #1
 8004b66:	74bb      	strb	r3, [r7, #18]
    
    usbcfg.b.ulpi_fsls = 0;
 8004b68:	7cbb      	ldrb	r3, [r7, #18]
 8004b6a:	f36f 0341 	bfc	r3, #1, #1
 8004b6e:	74bb      	strb	r3, [r7, #18]
    usbcfg.b.ulpi_clk_sus_m = 0;
 8004b70:	7cbb      	ldrb	r3, [r7, #18]
 8004b72:	f36f 03c3 	bfc	r3, #3, #1
 8004b76:	74bb      	strb	r3, [r7, #18]
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select  */
    USB_OTG_CoreReset(pdev);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7ff fe4b 	bl	800481c <USB_OTG_CoreReset>
    
    if(pdev->cfg.dma_enable == 1)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	78db      	ldrb	r3, [r3, #3]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d139      	bne.n	8004c02 <USB_OTG_CoreInit+0xfe>
    {
      
      ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 8004b8e:	7a3b      	ldrb	r3, [r7, #8]
 8004b90:	2205      	movs	r2, #5
 8004b92:	f362 0344 	bfi	r3, r2, #1, #4
 8004b96:	723b      	strb	r3, [r7, #8]
      ahbcfg.b.dmaenable = 1;
 8004b98:	7a3b      	ldrb	r3, [r7, #8]
 8004b9a:	f043 0320 	orr.w	r3, r3, #32
 8004b9e:	723b      	strb	r3, [r7, #8]
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	609a      	str	r2, [r3, #8]
 8004ba8:	e02b      	b.n	8004c02 <USB_OTG_CoreInit+0xfe>
    }    
  }
  else /* FS interface (embedded Phy) */
  {
    
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	613b      	str	r3, [r7, #16]
    usbcfg.b.physel  = 1; /* FS Interface */
 8004bb2:	7c3b      	ldrb	r3, [r7, #16]
 8004bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bb8:	743b      	strb	r3, [r7, #16]
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	60da      	str	r2, [r3, #12]
    /* Reset after a PHY select and set Host mode */
    USB_OTG_CoreReset(pdev);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7ff fe2a 	bl	800481c <USB_OTG_CoreReset>
    /* Deactivate the power down*/
    gccfg.d32 = 0;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	60fb      	str	r3, [r7, #12]
    gccfg.b.pwdn = 1;
 8004bcc:	7bbb      	ldrb	r3, [r7, #14]
 8004bce:	f043 0301 	orr.w	r3, r3, #1
 8004bd2:	73bb      	strb	r3, [r7, #14]
    
    gccfg.b.vbussensingA = 1 ;
 8004bd4:	7bbb      	ldrb	r3, [r7, #14]
 8004bd6:	f043 0304 	orr.w	r3, r3, #4
 8004bda:	73bb      	strb	r3, [r7, #14]
    gccfg.b.vbussensingB = 1 ;     
 8004bdc:	7bbb      	ldrb	r3, [r7, #14]
 8004bde:	f043 0308 	orr.w	r3, r3, #8
 8004be2:	73bb      	strb	r3, [r7, #14]
#ifndef VBUS_SENSING_ENABLED
    gccfg.b.disablevbussensing = 1; 
#endif    
    
    if(pdev->cfg.Sof_output)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	7a5b      	ldrb	r3, [r3, #9]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <USB_OTG_CoreInit+0xf0>
    {
      gccfg.b.sofouten = 1;  
 8004bec:	7bbb      	ldrb	r3, [r7, #14]
 8004bee:	f043 0310 	orr.w	r3, r3, #16
 8004bf2:	73bb      	strb	r3, [r7, #14]
    }
    
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	639a      	str	r2, [r3, #56]	; 0x38
    USB_OTG_BSP_mDelay(20);
 8004bfc:	2014      	movs	r0, #20
 8004bfe:	f7ff fd87 	bl	8004710 <USB_OTG_BSP_mDelay>
  }
  /* case the HS core is working in FS mode */
  if(pdev->cfg.dma_enable == 1)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	78db      	ldrb	r3, [r3, #3]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d110      	bne.n	8004c2c <USB_OTG_CoreInit+0x128>
  {
    
    ahbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GAHBCFG);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	60bb      	str	r3, [r7, #8]
    ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 8004c12:	7a3b      	ldrb	r3, [r7, #8]
 8004c14:	2205      	movs	r2, #5
 8004c16:	f362 0344 	bfi	r3, r2, #1, #4
 8004c1a:	723b      	strb	r3, [r7, #8]
    ahbcfg.b.dmaenable = 1;
 8004c1c:	7a3b      	ldrb	r3, [r7, #8]
 8004c1e:	f043 0320 	orr.w	r3, r3, #32
 8004c22:	723b      	strb	r3, [r7, #8]
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	609a      	str	r2, [r3, #8]
  usbcfg.b.hnpcap = 1;
  usbcfg.b.srpcap = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
  USB_OTG_EnableCommonInt(pdev);
#endif
  return status;
 8004c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3718      	adds	r7, #24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <USB_OTG_EnableGlobalInt>:
*         Enables the controller's Global Int in the AHB Config reg
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableGlobalInt(USB_OTG_CORE_HANDLE *pdev)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b085      	sub	sp, #20
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  ahbcfg.d32 = 0;
 8004c42:	2300      	movs	r3, #0
 8004c44:	60bb      	str	r3, [r7, #8]
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
 8004c46:	7a3b      	ldrb	r3, [r7, #8]
 8004c48:	f043 0301 	orr.w	r3, r3, #1
 8004c4c:	723b      	strb	r3, [r7, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, 0, ahbcfg.d32);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	68d2      	ldr	r2, [r2, #12]
 8004c56:	6891      	ldr	r1, [r2, #8]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	609a      	str	r2, [r3, #8]
  return status;
 8004c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <USB_OTG_DisableGlobalInt>:
*         Enables the controller's Global Int in the AHB Config reg
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_DisableGlobalInt(USB_OTG_CORE_HANDLE *pdev)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8004c74:	2300      	movs	r3, #0
 8004c76:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  ahbcfg.d32 = 0;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60bb      	str	r3, [r7, #8]
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
 8004c7c:	7a3b      	ldrb	r3, [r7, #8]
 8004c7e:	f043 0301 	orr.w	r3, r3, #1
 8004c82:	723b      	strb	r3, [r7, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32, 0);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	68d2      	ldr	r2, [r2, #12]
 8004c8c:	6891      	ldr	r1, [r2, #8]
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	43d2      	mvns	r2, r2
 8004c92:	400a      	ands	r2, r1
 8004c94:	609a      	str	r2, [r3, #8]
  return status;
 8004c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <USB_OTG_FlushTxFifo>:
* @param  pdev : Selected device
* @param  num : FO num
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushTxFifo (USB_OTG_CORE_HANDLE *pdev , uint32_t num )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  
  uint32_t count = 0;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	617b      	str	r3, [r7, #20]
  greset.d32 = 0;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	60fb      	str	r3, [r7, #12]
  greset.b.txfflsh = 1;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f043 0320 	orr.w	r3, r3, #32
 8004cc0:	60fb      	str	r3, [r7, #12]
  greset.b.txfnum  = num;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	f003 031f 	and.w	r3, r3, #31
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f362 138a 	bfi	r3, r2, #6, #5
 8004cd2:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	617b      	str	r3, [r7, #20]
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	4a09      	ldr	r2, [pc, #36]	; (8004d14 <USB_OTG_FlushTxFifo+0x70>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d806      	bhi.n	8004d00 <USB_OTG_FlushTxFifo+0x5c>
    {
      break;
    }
  }
  while (greset.b.txfflsh == 1);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d0ee      	beq.n	8004cdc <USB_OTG_FlushTxFifo+0x38>
 8004cfe:	e000      	b.n	8004d02 <USB_OTG_FlushTxFifo+0x5e>
      break;
 8004d00:	bf00      	nop
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 8004d02:	2003      	movs	r0, #3
 8004d04:	f7ff fce0 	bl	80046c8 <USB_OTG_BSP_uDelay>
  return status;
 8004d08:	7cfb      	ldrb	r3, [r7, #19]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	00030d40 	.word	0x00030d40

08004d18 <USB_OTG_FlushRxFifo>:
* @brief  USB_OTG_FlushRxFifo : Flush a Rx FIFO
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushRxFifo( USB_OTG_CORE_HANDLE *pdev )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8004d20:	2300      	movs	r3, #0
 8004d22:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
 8004d24:	2300      	movs	r3, #0
 8004d26:	617b      	str	r3, [r7, #20]
  
  greset.d32 = 0;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	60fb      	str	r3, [r7, #12]
  greset.b.rxfflsh = 1;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f043 0310 	orr.w	r3, r3, #16
 8004d32:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	3301      	adds	r3, #1
 8004d48:	617b      	str	r3, [r7, #20]
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	4a09      	ldr	r2, [pc, #36]	; (8004d74 <USB_OTG_FlushRxFifo+0x5c>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d806      	bhi.n	8004d60 <USB_OTG_FlushRxFifo+0x48>
    {
      break;
    }
  }
  while (greset.b.rxfflsh == 1);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d0ee      	beq.n	8004d3c <USB_OTG_FlushRxFifo+0x24>
 8004d5e:	e000      	b.n	8004d62 <USB_OTG_FlushRxFifo+0x4a>
      break;
 8004d60:	bf00      	nop
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 8004d62:	2003      	movs	r0, #3
 8004d64:	f7ff fcb0 	bl	80046c8 <USB_OTG_BSP_uDelay>
  return status;
 8004d68:	7cfb      	ldrb	r3, [r7, #19]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	00030d40 	.word	0x00030d40

08004d78 <USB_OTG_SetCurrentMode>:
* @param  pdev : Selected device
* @param  mode :  (Host/device)
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SetCurrentMode(USB_OTG_CORE_HANDLE *pdev , uint8_t mode)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	460b      	mov	r3, r1
 8004d82:	70fb      	strb	r3, [r7, #3]
  USB_OTG_STS status = USB_OTG_OK;
 8004d84:	2300      	movs	r3, #0
 8004d86:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	60bb      	str	r3, [r7, #8]
  
  usbcfg.b.force_host = 0;
 8004d90:	7afb      	ldrb	r3, [r7, #11]
 8004d92:	f36f 1345 	bfc	r3, #5, #1
 8004d96:	72fb      	strb	r3, [r7, #11]
  usbcfg.b.force_dev = 0;
 8004d98:	7afb      	ldrb	r3, [r7, #11]
 8004d9a:	f36f 1386 	bfc	r3, #6, #1
 8004d9e:	72fb      	strb	r3, [r7, #11]
  
  if ( mode == HOST_MODE)
 8004da0:	78fb      	ldrb	r3, [r7, #3]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d104      	bne.n	8004db0 <USB_OTG_SetCurrentMode+0x38>
  {
    usbcfg.b.force_host = 1;
 8004da6:	7afb      	ldrb	r3, [r7, #11]
 8004da8:	f043 0320 	orr.w	r3, r3, #32
 8004dac:	72fb      	strb	r3, [r7, #11]
 8004dae:	e006      	b.n	8004dbe <USB_OTG_SetCurrentMode+0x46>
  }
  else if ( mode == DEVICE_MODE)
 8004db0:	78fb      	ldrb	r3, [r7, #3]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d103      	bne.n	8004dbe <USB_OTG_SetCurrentMode+0x46>
  {
    usbcfg.b.force_dev = 1;
 8004db6:	7afb      	ldrb	r3, [r7, #11]
 8004db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dbc:	72fb      	strb	r3, [r7, #11]
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	60da      	str	r2, [r3, #12]
  USB_OTG_BSP_mDelay(50);
 8004dc6:	2032      	movs	r0, #50	; 0x32
 8004dc8:	f7ff fca2 	bl	8004710 <USB_OTG_BSP_mDelay>
  return status;
 8004dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <USB_OTG_GetMode>:
* @brief  USB_OTG_GetMode : Get current mode
* @param  pdev : Selected device
* @retval current mode
*/
uint32_t USB_OTG_GetMode(USB_OTG_CORE_HANDLE *pdev)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b083      	sub	sp, #12
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  return (USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS ) & 0x1);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	f003 0301 	and.w	r3, r3, #1
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <USB_OTG_IsDeviceMode>:
* @brief  USB_OTG_IsDeviceMode : Check if it is device mode
* @param  pdev : Selected device
* @retval num_in_ep
*/
uint8_t USB_OTG_IsDeviceMode(USB_OTG_CORE_HANDLE *pdev)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  return (USB_OTG_GetMode(pdev) != HOST_MODE);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7ff ffea 	bl	8004dd6 <USB_OTG_GetMode>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	bf14      	ite	ne
 8004e08:	2301      	movne	r3, #1
 8004e0a:	2300      	moveq	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <USB_OTG_ReadCoreItr>:
* @brief  USB_OTG_ReadCoreItr : returns the Core Interrupt register
* @param  pdev : Selected device
* @retval Status
*/
uint32_t USB_OTG_ReadCoreItr(USB_OTG_CORE_HANDLE *pdev)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b085      	sub	sp, #20
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  uint32_t v = 0;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60fb      	str	r3, [r7, #12]
  v = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTMSK);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	4013      	ands	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]
  return v;
 8004e36:	68fb      	ldr	r3, [r7, #12]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <USB_OTG_InitDevSpeed>:
*         depending the PHY type and the enumeration speed of the device.
* @param  pdev : Selected device
* @retval : None
*/
void USB_OTG_InitDevSpeed(USB_OTG_CORE_HANDLE *pdev , uint8_t speed)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_DCFG_TypeDef   dcfg;
  
  dcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCFG);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	60fb      	str	r3, [r7, #12]
  dcfg.b.devspd = speed;
 8004e58:	78fb      	ldrb	r3, [r7, #3]
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	b2da      	uxtb	r2, r3
 8004e60:	7b3b      	ldrb	r3, [r7, #12]
 8004e62:	f362 0301 	bfi	r3, r2, #0, #2
 8004e66:	733b      	strb	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCFG, dcfg.d32);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	601a      	str	r2, [r3, #0]
}
 8004e70:	bf00      	nop
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <USB_OTG_CoreInitDev>:
*         for device mode
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInitDev (USB_OTG_CORE_HANDLE *pdev)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b08c      	sub	sp, #48	; 0x30
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  USB_OTG_STS             status       = USB_OTG_OK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  USB_OTG_FSIZ_TypeDef    nptxfifosize;
  USB_OTG_FSIZ_TypeDef    txfifosize;
  USB_OTG_DIEPMSK_TypeDef msk;
  USB_OTG_DTHRCTL_TypeDef dthrctl;  
  
  depctl.d32 = 0;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
  dcfg.d32 = 0;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	623b      	str	r3, [r7, #32]
  nptxfifosize.d32 = 0;
 8004e92:	2300      	movs	r3, #0
 8004e94:	61fb      	str	r3, [r7, #28]
  txfifosize.d32 = 0;
 8004e96:	2300      	movs	r3, #0
 8004e98:	61bb      	str	r3, [r7, #24]
  msk.d32 = 0;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	617b      	str	r3, [r7, #20]
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	601a      	str	r2, [r3, #0]
  /* Device configuration register */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	623b      	str	r3, [r7, #32]
  dcfg.b.perfrint = DCFG_FRAME_INTERVAL_80;
 8004eb0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004eb4:	f36f 03c4 	bfc	r3, #3, #2
 8004eb8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32 );
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	6a3a      	ldr	r2, [r7, #32]
 8004ec2:	601a      	str	r2, [r3, #0]
    txfifosize.b.depth = TX3_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[2], txfifosize.d32 );
  }
#endif
#ifdef USB_OTG_HS_CORE
  if(pdev->cfg.coreID == USB_OTG_HS_CORE_ID  )
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	7adb      	ldrb	r3, [r3, #11]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d157      	bne.n	8004f7c <USB_OTG_CoreInitDev+0x100>
  {
    
    /* Set High speed phy */
    
    if(pdev->cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	7a1b      	ldrb	r3, [r3, #8]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d104      	bne.n	8004ede <USB_OTG_CoreInitDev+0x62>
    {
      USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_HIGH);
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f7ff ffb4 	bl	8004e44 <USB_OTG_InitDevSpeed>
 8004edc:	e003      	b.n	8004ee6 <USB_OTG_CoreInitDev+0x6a>
    }
    else /* set High speed phy in Full speed mode */
    {
      USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_HIGH_IN_FULL);
 8004ede:	2101      	movs	r1, #1
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7ff ffaf 	bl	8004e44 <USB_OTG_InitDevSpeed>
    }
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_HS_SIZE);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004eee:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* EP0 TX*/
    nptxfifosize.b.depth     = TX0_FIFO_HS_SIZE;
 8004ef0:	2380      	movs	r3, #128	; 0x80
 8004ef2:	83fb      	strh	r3, [r7, #30]
    nptxfifosize.b.startaddr = RX_FIFO_HS_SIZE;
 8004ef4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ef8:	83bb      	strh	r3, [r7, #28]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	69fa      	ldr	r2, [r7, #28]
 8004f00:	629a      	str	r2, [r3, #40]	; 0x28
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
 8004f02:	8bba      	ldrh	r2, [r7, #28]
 8004f04:	8bfb      	ldrh	r3, [r7, #30]
 8004f06:	4413      	add	r3, r2
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	833b      	strh	r3, [r7, #24]
    txfifosize.b.depth = TX1_FIFO_HS_SIZE;
 8004f0c:	f44f 73ba 	mov.w	r3, #372	; 0x174
 8004f10:	837b      	strh	r3, [r7, #26]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[0], txfifosize.d32 );
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    
    
    /* EP2 TX*/
    txfifosize.b.startaddr += txfifosize.b.depth;
 8004f1c:	8b3a      	ldrh	r2, [r7, #24]
 8004f1e:	8b7b      	ldrh	r3, [r7, #26]
 8004f20:	4413      	add	r3, r2
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	833b      	strh	r3, [r7, #24]
    txfifosize.b.depth = TX2_FIFO_HS_SIZE;
 8004f26:	2300      	movs	r3, #0
 8004f28:	837b      	strh	r3, [r7, #26]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[1], txfifosize.d32 );
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    
    
    /* EP3 TX*/  
    txfifosize.b.startaddr += txfifosize.b.depth;
 8004f34:	8b3a      	ldrh	r2, [r7, #24]
 8004f36:	8b7b      	ldrh	r3, [r7, #26]
 8004f38:	4413      	add	r3, r2
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	833b      	strh	r3, [r7, #24]
    txfifosize.b.depth = TX3_FIFO_HS_SIZE;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	837b      	strh	r3, [r7, #26]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[2], txfifosize.d32 );
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    
    /* EP4 TX*/
    txfifosize.b.startaddr += txfifosize.b.depth;
 8004f4c:	8b3a      	ldrh	r2, [r7, #24]
 8004f4e:	8b7b      	ldrh	r3, [r7, #26]
 8004f50:	4413      	add	r3, r2
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	833b      	strh	r3, [r7, #24]
    txfifosize.b.depth = TX4_FIFO_HS_SIZE;
 8004f56:	2300      	movs	r3, #0
 8004f58:	837b      	strh	r3, [r7, #26]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[3], txfifosize.d32 );
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    
    
    /* EP5 TX*/  
    txfifosize.b.startaddr += txfifosize.b.depth;
 8004f64:	8b3a      	ldrh	r2, [r7, #24]
 8004f66:	8b7b      	ldrh	r3, [r7, #26]
 8004f68:	4413      	add	r3, r2
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	833b      	strh	r3, [r7, #24]
    txfifosize.b.depth = TX5_FIFO_HS_SIZE;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	837b      	strh	r3, [r7, #26]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[4], txfifosize.d32 );
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  }
#endif  
  /* Flush the FIFOs */
  USB_OTG_FlushTxFifo(pdev , 0x10); /* all Tx FIFOs */
 8004f7c:	2110      	movs	r1, #16
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff fe90 	bl	8004ca4 <USB_OTG_FlushTxFifo>
  USB_OTG_FlushRxFifo(pdev);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7ff fec7 	bl	8004d18 <USB_OTG_FlushRxFifo>
  /* Clear all pending Device Interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	611a      	str	r2, [r3, #16]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	2200      	movs	r2, #0
 8004f98:	615a      	str	r2, [r3, #20]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa2:	619a      	str	r2, [r3, #24]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	61da      	str	r2, [r3, #28]
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004fac:	2300      	movs	r3, #0
 8004fae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fb0:	e03a      	b.n	8005028 <USB_OTG_CoreInitDev+0x1ac>
  {
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	627b      	str	r3, [r7, #36]	; 0x24
    if (depctl.b.epena)
 8004fc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fc6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00e      	beq.n	8004fee <USB_OTG_CoreInitDev+0x172>
    {
      depctl.d32 = 0;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	627b      	str	r3, [r7, #36]	; 0x24
      depctl.b.epdis = 1;
 8004fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      depctl.b.snak = 1;
 8004fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fe4:	f043 0308 	orr.w	r3, r3, #8
 8004fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004fec:	e001      	b.n	8004ff2 <USB_OTG_CoreInitDev+0x176>
    }
    else
    {
      depctl.d32 = 0;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff6:	3304      	adds	r3, #4
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005000:	601a      	str	r2, [r3, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005006:	3304      	adds	r3, #4
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	2200      	movs	r2, #0
 8005010:	611a      	str	r2, [r3, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005016:	3304      	adds	r3, #4
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	22ff      	movs	r2, #255	; 0xff
 8005020:	609a      	str	r2, [r3, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8005022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005024:	3301      	adds	r3, #1
 8005026:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	785b      	ldrb	r3, [r3, #1]
 800502c:	461a      	mov	r2, r3
 800502e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005030:	429a      	cmp	r2, r3
 8005032:	d8be      	bhi.n	8004fb2 <USB_OTG_CoreInitDev+0x136>
  }
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8005034:	2300      	movs	r3, #0
 8005036:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005038:	e035      	b.n	80050a6 <USB_OTG_CoreInitDev+0x22a>
  {
    USB_OTG_DEPCTL_TypeDef  depctl;
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503e:	3314      	adds	r3, #20
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	60fb      	str	r3, [r7, #12]
    if (depctl.b.epena)
 800504a:	7bfb      	ldrb	r3, [r7, #15]
 800504c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <USB_OTG_CoreInitDev+0x1f0>
    {
      depctl.d32 = 0;
 8005056:	2300      	movs	r3, #0
 8005058:	60fb      	str	r3, [r7, #12]
      depctl.b.epdis = 1;
 800505a:	7bfb      	ldrb	r3, [r7, #15]
 800505c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005060:	73fb      	strb	r3, [r7, #15]
      depctl.b.snak = 1;
 8005062:	7bfb      	ldrb	r3, [r7, #15]
 8005064:	f043 0308 	orr.w	r3, r3, #8
 8005068:	73fb      	strb	r3, [r7, #15]
 800506a:	e001      	b.n	8005070 <USB_OTG_CoreInitDev+0x1f4>
    }
    else
    {
      depctl.d32 = 0;
 800506c:	2300      	movs	r3, #0
 800506e:	60fb      	str	r3, [r7, #12]
    }
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005074:	3314      	adds	r3, #20
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	601a      	str	r2, [r3, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005084:	3314      	adds	r3, #20
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	611a      	str	r2, [r3, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005094:	3314      	adds	r3, #20
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	22ff      	movs	r2, #255	; 0xff
 800509e:	609a      	str	r2, [r3, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 80050a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a2:	3301      	adds	r3, #1
 80050a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	785b      	ldrb	r3, [r3, #1]
 80050aa:	461a      	mov	r2, r3
 80050ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d8c3      	bhi.n	800503a <USB_OTG_CoreInitDev+0x1be>
  }
  msk.d32 = 0;
 80050b2:	2300      	movs	r3, #0
 80050b4:	617b      	str	r3, [r7, #20]
  msk.b.txfifoundrn = 1;
 80050b6:	7d7b      	ldrb	r3, [r7, #21]
 80050b8:	f043 0301 	orr.w	r3, r3, #1
 80050bc:	757b      	strb	r3, [r7, #21]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPMSK, msk.d32, msk.d32);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	6912      	ldr	r2, [r2, #16]
 80050c6:	6911      	ldr	r1, [r2, #16]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	43d2      	mvns	r2, r2
 80050cc:	4011      	ands	r1, r2
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	430a      	orrs	r2, r1
 80050d2:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	78db      	ldrb	r3, [r3, #3]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d11b      	bne.n	8005114 <USB_OTG_CoreInitDev+0x298>
  {
    dthrctl.d32 = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	613b      	str	r3, [r7, #16]
    dthrctl.b.non_iso_thr_en = 1;
 80050e0:	7c3b      	ldrb	r3, [r7, #16]
 80050e2:	f043 0301 	orr.w	r3, r3, #1
 80050e6:	743b      	strb	r3, [r7, #16]
    dthrctl.b.iso_thr_en = 1;
 80050e8:	7c3b      	ldrb	r3, [r7, #16]
 80050ea:	f043 0302 	orr.w	r3, r3, #2
 80050ee:	743b      	strb	r3, [r7, #16]
    dthrctl.b.tx_thr_len = 64;
 80050f0:	8a3b      	ldrh	r3, [r7, #16]
 80050f2:	2240      	movs	r2, #64	; 0x40
 80050f4:	f362 038a 	bfi	r3, r2, #2, #9
 80050f8:	823b      	strh	r3, [r7, #16]
    dthrctl.b.rx_thr_en = 1;
 80050fa:	7cbb      	ldrb	r3, [r7, #18]
 80050fc:	f043 0301 	orr.w	r3, r3, #1
 8005100:	74bb      	strb	r3, [r7, #18]
    dthrctl.b.rx_thr_len = 64;
 8005102:	8a7b      	ldrh	r3, [r7, #18]
 8005104:	2240      	movs	r2, #64	; 0x40
 8005106:	f362 0349 	bfi	r3, r2, #1, #9
 800510a:	827b      	strh	r3, [r7, #18]
    USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DTHRCTL, dthrctl.d32);  
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	631a      	str	r2, [r3, #48]	; 0x30
  }
  USB_OTG_EnableDevInt(pdev);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 f806 	bl	8005126 <USB_OTG_EnableDevInt>
  return status;
 800511a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800511e:	4618      	mov	r0, r3
 8005120:	3730      	adds	r7, #48	; 0x30
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <USB_OTG_EnableDevInt>:
* @brief  USB_OTG_EnableDevInt : Enables the Device mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableDevInt(USB_OTG_CORE_HANDLE *pdev)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b084      	sub	sp, #16
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 800512e:	2300      	movs	r3, #0
 8005130:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GINTMSK_TypeDef  intmsk;
  
  intmsk.d32 = 0;
 8005132:	2300      	movs	r3, #0
 8005134:	60bb      	str	r3, [r7, #8]
  
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	619a      	str	r2, [r3, #24]
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005146:	615a      	str	r2, [r3, #20]
  /* Enable the common interrupts */
  USB_OTG_EnableCommonInt(pdev);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f7ff fb45 	bl	80047d8 <USB_OTG_EnableCommonInt>
  
  if (pdev->cfg.dma_enable == 0)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	78db      	ldrb	r3, [r3, #3]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d103      	bne.n	800515e <USB_OTG_EnableDevInt+0x38>
  {
    intmsk.b.rxstsqlvl = 1;
 8005156:	7a3b      	ldrb	r3, [r7, #8]
 8005158:	f043 0310 	orr.w	r3, r3, #16
 800515c:	723b      	strb	r3, [r7, #8]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  intmsk.b.usbsuspend = 1;
 800515e:	7a7b      	ldrb	r3, [r7, #9]
 8005160:	f043 0308 	orr.w	r3, r3, #8
 8005164:	727b      	strb	r3, [r7, #9]
  intmsk.b.usbreset   = 1;
 8005166:	7a7b      	ldrb	r3, [r7, #9]
 8005168:	f043 0310 	orr.w	r3, r3, #16
 800516c:	727b      	strb	r3, [r7, #9]
  intmsk.b.enumdone   = 1;
 800516e:	7a7b      	ldrb	r3, [r7, #9]
 8005170:	f043 0320 	orr.w	r3, r3, #32
 8005174:	727b      	strb	r3, [r7, #9]
  intmsk.b.inepintr   = 1;
 8005176:	7abb      	ldrb	r3, [r7, #10]
 8005178:	f043 0304 	orr.w	r3, r3, #4
 800517c:	72bb      	strb	r3, [r7, #10]
  intmsk.b.outepintr  = 1;
 800517e:	7abb      	ldrb	r3, [r7, #10]
 8005180:	f043 0308 	orr.w	r3, r3, #8
 8005184:	72bb      	strb	r3, [r7, #10]
  intmsk.b.sofintr    = 1; 
 8005186:	7a3b      	ldrb	r3, [r7, #8]
 8005188:	f043 0308 	orr.w	r3, r3, #8
 800518c:	723b      	strb	r3, [r7, #8]
  
  intmsk.b.incomplisoin    = 1; 
 800518e:	7abb      	ldrb	r3, [r7, #10]
 8005190:	f043 0310 	orr.w	r3, r3, #16
 8005194:	72bb      	strb	r3, [r7, #10]
  intmsk.b.incomplisoout    = 1;   
 8005196:	7abb      	ldrb	r3, [r7, #10]
 8005198:	f043 0320 	orr.w	r3, r3, #32
 800519c:	72bb      	strb	r3, [r7, #10]
#ifdef VBUS_SENSING_ENABLED
  intmsk.b.sessreqintr    = 1; 
 800519e:	7afb      	ldrb	r3, [r7, #11]
 80051a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051a4:	72fb      	strb	r3, [r7, #11]
  intmsk.b.otgintr    = 1;    
 80051a6:	7a3b      	ldrb	r3, [r7, #8]
 80051a8:	f043 0304 	orr.w	r3, r3, #4
 80051ac:	723b      	strb	r3, [r7, #8]
#endif  
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	68d2      	ldr	r2, [r2, #12]
 80051b6:	6991      	ldr	r1, [r2, #24]
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	43d2      	mvns	r2, r2
 80051bc:	4011      	ands	r1, r2
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	430a      	orrs	r2, r1
 80051c2:	619a      	str	r2, [r3, #24]
  return status;
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <USB_OTG_GetDeviceSpeed>:
*         Get the device speed from the device status register
* @param  None
* @retval status
*/
enum USB_OTG_SPEED USB_OTG_GetDeviceSpeed (USB_OTG_CORE_HANDLE *pdev)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b085      	sub	sp, #20
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  USB_OTG_DSTS_TypeDef  dsts;
  enum USB_OTG_SPEED speed = USB_SPEED_UNKNOWN;
 80051d6:	2300      	movs	r3, #0
 80051d8:	73fb      	strb	r3, [r7, #15]
  
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	60bb      	str	r3, [r7, #8]
  
  switch (dsts.b.enumspd)
 80051e2:	7a3b      	ldrb	r3, [r7, #8]
 80051e4:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d009      	beq.n	8005202 <USB_OTG_GetDeviceSpeed+0x34>
 80051ee:	2b03      	cmp	r3, #3
 80051f0:	d004      	beq.n	80051fc <USB_OTG_GetDeviceSpeed+0x2e>
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d002      	beq.n	80051fc <USB_OTG_GetDeviceSpeed+0x2e>
  {
  case DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ:
    speed = USB_SPEED_HIGH;
 80051f6:	2303      	movs	r3, #3
 80051f8:	73fb      	strb	r3, [r7, #15]
    break;
 80051fa:	e005      	b.n	8005208 <USB_OTG_GetDeviceSpeed+0x3a>
  case DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_48MHZ:
    speed = USB_SPEED_FULL;
 80051fc:	2302      	movs	r3, #2
 80051fe:	73fb      	strb	r3, [r7, #15]
    break;
 8005200:	e002      	b.n	8005208 <USB_OTG_GetDeviceSpeed+0x3a>
    
  case DSTS_ENUMSPD_LS_PHY_6MHZ:
    speed = USB_SPEED_LOW;
 8005202:	2301      	movs	r3, #1
 8005204:	73fb      	strb	r3, [r7, #15]
    break;
 8005206:	bf00      	nop
  }
  
  return speed;
 8005208:	7bfb      	ldrb	r3, [r7, #15]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <USB_OTG_EP0Activate>:
*   for transmitting packets
* @param  None
* @retval USB_OTG_STS : status
*/
USB_OTG_STS  USB_OTG_EP0Activate(USB_OTG_CORE_HANDLE *pdev)
{
 8005216:	b480      	push	{r7}
 8005218:	b087      	sub	sp, #28
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  USB_OTG_STS             status = USB_OTG_OK;
 800521e:	2300      	movs	r3, #0
 8005220:	75fb      	strb	r3, [r7, #23]
  USB_OTG_DSTS_TypeDef    dsts;
  USB_OTG_DEPCTL_TypeDef  diepctl;
  USB_OTG_DCTL_TypeDef    dctl;
  
  dctl.d32 = 0;
 8005222:	2300      	movs	r3, #0
 8005224:	60bb      	str	r3, [r7, #8]
  /* Read the Device Status and Endpoint 0 Control registers */
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	613b      	str	r3, [r7, #16]
  diepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	60fb      	str	r3, [r7, #12]
  /* Set the MPS of the IN EP based on the enumeration speed */
  switch (dsts.b.enumspd)
 8005236:	7c3b      	ldrb	r3, [r7, #16]
 8005238:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b02      	cmp	r3, #2
 8005240:	d004      	beq.n	800524c <USB_OTG_EP0Activate+0x36>
  {
  case DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_48MHZ:
    diepctl.b.mps = DEP0CTL_MPS_64;
 8005242:	89bb      	ldrh	r3, [r7, #12]
 8005244:	f36f 030a 	bfc	r3, #0, #11
 8005248:	81bb      	strh	r3, [r7, #12]
    break;
 800524a:	e005      	b.n	8005258 <USB_OTG_EP0Activate+0x42>
  case DSTS_ENUMSPD_LS_PHY_6MHZ:
    diepctl.b.mps = DEP0CTL_MPS_8;
 800524c:	89bb      	ldrh	r3, [r7, #12]
 800524e:	2203      	movs	r2, #3
 8005250:	f362 030a 	bfi	r3, r2, #0, #11
 8005254:	81bb      	strh	r3, [r7, #12]
    break;
 8005256:	bf00      	nop
  }
  USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL, diepctl.d32);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	601a      	str	r2, [r3, #0]
  dctl.b.cgnpinnak = 1;
 8005260:	7a7b      	ldrb	r3, [r7, #9]
 8005262:	f043 0301 	orr.w	r3, r3, #1
 8005266:	727b      	strb	r3, [r7, #9]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, dctl.d32);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	6912      	ldr	r2, [r2, #16]
 8005270:	6851      	ldr	r1, [r2, #4]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	43d2      	mvns	r2, r2
 8005276:	4011      	ands	r1, r2
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	430a      	orrs	r2, r1
 800527c:	605a      	str	r2, [r3, #4]
  return status;
 800527e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005280:	4618      	mov	r0, r3
 8005282:	371c      	adds	r7, #28
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <USB_OTG_EPActivate>:
* @brief  USB_OTG_EPActivate : Activates an EP
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPActivate(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 800528c:	b480      	push	{r7}
 800528e:	b087      	sub	sp, #28
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	74fb      	strb	r3, [r7, #19]
  USB_OTG_DEPCTL_TypeDef  depctl;
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  
  depctl.d32 = 0;
 800529a:	2300      	movs	r3, #0
 800529c:	60fb      	str	r3, [r7, #12]
  daintmsk.d32 = 0;
 800529e:	2300      	movs	r3, #0
 80052a0:	60bb      	str	r3, [r7, #8]
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	785b      	ldrb	r3, [r3, #1]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d10f      	bne.n	80052ca <USB_OTG_EPActivate+0x3e>
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	3304      	adds	r3, #4
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	617b      	str	r3, [r7, #20]
    daintmsk.ep.in = 1 << ep->num;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	461a      	mov	r2, r3
 80052c0:	2301      	movs	r3, #1
 80052c2:	4093      	lsls	r3, r2
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	813b      	strh	r3, [r7, #8]
 80052c8:	e00e      	b.n	80052e8 <USB_OTG_EPActivate+0x5c>
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	3314      	adds	r3, #20
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	617b      	str	r3, [r7, #20]
    daintmsk.ep.out = 1 << ep->num;
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	461a      	mov	r2, r3
 80052e0:	2301      	movs	r3, #1
 80052e2:	4093      	lsls	r3, r2
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	817b      	strh	r3, [r7, #10]
  }
  /* If the EP is already active don't change the EP Control
  * register. */
  depctl.d32 = USB_OTG_READ_REG32(addr);
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	60fb      	str	r3, [r7, #12]
  if (!depctl.b.usbactep)
 80052ee:	7b7b      	ldrb	r3, [r7, #13]
 80052f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d127      	bne.n	800534a <USB_OTG_EPActivate+0xbe>
  {
    depctl.b.mps    = ep->maxpacket;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	b29b      	uxth	r3, r3
 8005300:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005304:	b29a      	uxth	r2, r3
 8005306:	89bb      	ldrh	r3, [r7, #12]
 8005308:	f362 030a 	bfi	r3, r2, #0, #11
 800530c:	81bb      	strh	r3, [r7, #12]
    depctl.b.eptype = ep->type;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	78db      	ldrb	r3, [r3, #3]
 8005312:	f003 0303 	and.w	r3, r3, #3
 8005316:	b2da      	uxtb	r2, r3
 8005318:	7bbb      	ldrb	r3, [r7, #14]
 800531a:	f362 0383 	bfi	r3, r2, #2, #2
 800531e:	73bb      	strb	r3, [r7, #14]
    depctl.b.txfnum = ep->tx_fifo_num;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	88db      	ldrh	r3, [r3, #6]
 8005324:	b2db      	uxtb	r3, r3
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	b2da      	uxtb	r2, r3
 800532c:	89fb      	ldrh	r3, [r7, #14]
 800532e:	f362 1389 	bfi	r3, r2, #6, #4
 8005332:	81fb      	strh	r3, [r7, #14]
    depctl.b.setd0pid = 1;
 8005334:	7bfb      	ldrb	r3, [r7, #15]
 8005336:	f043 0310 	orr.w	r3, r3, #16
 800533a:	73fb      	strb	r3, [r7, #15]
    depctl.b.usbactep = 1;
 800533c:	7b7b      	ldrb	r3, [r7, #13]
 800533e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005342:	737b      	strb	r3, [r7, #13]
    USB_OTG_WRITE_REG32(addr, depctl.d32);
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	601a      	str	r2, [r3, #0]
  }
  /* Enable the Interrupt for this EP */
#ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED
  if((ep->num == 1)&&(pdev->cfg.coreID == USB_OTG_HS_CORE_ID))
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d10c      	bne.n	800536c <USB_OTG_EPActivate+0xe0>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	7adb      	ldrb	r3, [r3, #11]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d108      	bne.n	800536c <USB_OTG_EPActivate+0xe0>
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, 0, daintmsk.d32);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	6912      	ldr	r2, [r2, #16]
 8005362:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	430a      	orrs	r2, r1
 8005368:	63da      	str	r2, [r3, #60]	; 0x3c
 800536a:	e007      	b.n	800537c <USB_OTG_EPActivate+0xf0>
  }
  else
#endif   
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, 0, daintmsk.d32);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6912      	ldr	r2, [r2, #16]
 8005374:	69d1      	ldr	r1, [r2, #28]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	430a      	orrs	r2, r1
 800537a:	61da      	str	r2, [r3, #28]
  return status;
 800537c:	7cfb      	ldrb	r3, [r7, #19]
}
 800537e:	4618      	mov	r0, r3
 8005380:	371c      	adds	r7, #28
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <USB_OTG_EPDeactivate>:
* @brief  USB_OTG_EPDeactivate : Deactivates an EP
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPDeactivate(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 800538a:	b480      	push	{r7}
 800538c:	b087      	sub	sp, #28
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
 8005392:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8005394:	2300      	movs	r3, #0
 8005396:	74fb      	strb	r3, [r7, #19]
  USB_OTG_DEPCTL_TypeDef  depctl;
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
 8005398:	2300      	movs	r3, #0
 800539a:	60fb      	str	r3, [r7, #12]
  daintmsk.d32 = 0;  
 800539c:	2300      	movs	r3, #0
 800539e:	60bb      	str	r3, [r7, #8]
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	785b      	ldrb	r3, [r3, #1]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d10f      	bne.n	80053c8 <USB_OTG_EPDeactivate+0x3e>
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	3304      	adds	r3, #4
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	617b      	str	r3, [r7, #20]
    daintmsk.ep.in = 1 << ep->num;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	461a      	mov	r2, r3
 80053be:	2301      	movs	r3, #1
 80053c0:	4093      	lsls	r3, r2
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	813b      	strh	r3, [r7, #8]
 80053c6:	e00e      	b.n	80053e6 <USB_OTG_EPDeactivate+0x5c>
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	3314      	adds	r3, #20
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	617b      	str	r3, [r7, #20]
    daintmsk.ep.out = 1 << ep->num;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	461a      	mov	r2, r3
 80053de:	2301      	movs	r3, #1
 80053e0:	4093      	lsls	r3, r2
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	817b      	strh	r3, [r7, #10]
  }
  depctl.b.usbactep = 0;
 80053e6:	7b7b      	ldrb	r3, [r7, #13]
 80053e8:	f36f 13c7 	bfc	r3, #7, #1
 80053ec:	737b      	strb	r3, [r7, #13]
  USB_OTG_WRITE_REG32(addr, depctl.d32);
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	601a      	str	r2, [r3, #0]
  /* Disable the Interrupt for this EP */
  
#ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED
  if((ep->num == 1)&&(pdev->cfg.coreID == USB_OTG_HS_CORE_ID))
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d10d      	bne.n	8005418 <USB_OTG_EPDeactivate+0x8e>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	7adb      	ldrb	r3, [r3, #11]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d109      	bne.n	8005418 <USB_OTG_EPDeactivate+0x8e>
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, daintmsk.d32, 0);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6912      	ldr	r2, [r2, #16]
 800540c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	43d2      	mvns	r2, r2
 8005412:	400a      	ands	r2, r1
 8005414:	63da      	str	r2, [r3, #60]	; 0x3c
 8005416:	e008      	b.n	800542a <USB_OTG_EPDeactivate+0xa0>
  }
  else
#endif    
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, daintmsk.d32, 0);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	6912      	ldr	r2, [r2, #16]
 8005420:	69d1      	ldr	r1, [r2, #28]
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	43d2      	mvns	r2, r2
 8005426:	400a      	ands	r2, r1
 8005428:	61da      	str	r2, [r3, #28]
  return status;
 800542a:	7cfb      	ldrb	r3, [r7, #19]
}
 800542c:	4618      	mov	r0, r3
 800542e:	371c      	adds	r7, #28
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <USB_OTG_EPStartXfer>:
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPStartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b088      	sub	sp, #32
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	77fb      	strb	r3, [r7, #31]
  USB_OTG_DEPCTL_TypeDef     depctl;
  USB_OTG_DEPXFRSIZ_TypeDef  deptsiz;
  USB_OTG_DSTS_TypeDef       dsts;    
  uint32_t fifoemptymsk = 0;  
 8005446:	2300      	movs	r3, #0
 8005448:	61bb      	str	r3, [r7, #24]
  
  depctl.d32 = 0;
 800544a:	2300      	movs	r3, #0
 800544c:	617b      	str	r3, [r7, #20]
  deptsiz.d32 = 0;
 800544e:	2300      	movs	r3, #0
 8005450:	613b      	str	r3, [r7, #16]
  /* IN endpoint */
  if (ep->is_in == 1)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	785b      	ldrb	r3, [r3, #1]
 8005456:	2b01      	cmp	r3, #1
 8005458:	f040 80ab 	bne.w	80055b2 <USB_OTG_EPStartXfer+0x17a>
  {
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	3304      	adds	r3, #4
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	617b      	str	r3, [r7, #20]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ));
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	3304      	adds	r3, #4
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	613b      	str	r3, [r7, #16]
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d109      	bne.n	800549c <USB_OTG_EPStartXfer+0x64>
    {
      deptsiz.b.xfersize = 0;
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	f36f 0312 	bfc	r3, #0, #19
 800548e:	613b      	str	r3, [r7, #16]
      deptsiz.b.pktcnt = 1;
 8005490:	8a7b      	ldrh	r3, [r7, #18]
 8005492:	2201      	movs	r2, #1
 8005494:	f362 03cc 	bfi	r3, r2, #3, #10
 8005498:	827b      	strh	r3, [r7, #18]
 800549a:	e022      	b.n	80054e2 <USB_OTG_EPStartXfer+0xaa>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      deptsiz.b.xfersize = ep->xfer_len;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	f3c3 0212 	ubfx	r2, r3, #0, #19
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	f362 0312 	bfi	r3, r2, #0, #19
 80054aa:	613b      	str	r3, [r7, #16]
      deptsiz.b.pktcnt = (ep->xfer_len - 1 + ep->maxpacket) / ep->maxpacket;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	695a      	ldr	r2, [r3, #20]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	4413      	add	r3, r2
 80054b6:	1e5a      	subs	r2, r3, #1
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	8a7b      	ldrh	r3, [r7, #18]
 80054ca:	f362 03cc 	bfi	r3, r2, #3, #10
 80054ce:	827b      	strh	r3, [r7, #18]
      
      if (ep->type == EP_TYPE_ISOC)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	78db      	ldrb	r3, [r3, #3]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d104      	bne.n	80054e2 <USB_OTG_EPStartXfer+0xaa>
      {
        deptsiz.b.mc = 1;
 80054d8:	7cfb      	ldrb	r3, [r7, #19]
 80054da:	2201      	movs	r2, #1
 80054dc:	f362 1346 	bfi	r3, r2, #5, #2
 80054e0:	74fb      	strb	r3, [r7, #19]
      }       
    }
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ, deptsiz.d32);
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	3304      	adds	r3, #4
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	611a      	str	r2, [r3, #16]
    
    if (pdev->cfg.dma_enable == 1)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	78db      	ldrb	r3, [r3, #3]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d10a      	bne.n	8005512 <USB_OTG_EPStartXfer+0xda>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	3304      	adds	r3, #4
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4413      	add	r3, r2
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	6912      	ldr	r2, [r2, #16]
 800550e:	615a      	str	r2, [r3, #20]
 8005510:	e015      	b.n	800553e <USB_OTG_EPStartXfer+0x106>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	78db      	ldrb	r3, [r3, #3]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d011      	beq.n	800553e <USB_OTG_EPStartXfer+0x106>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00d      	beq.n	800553e <USB_OTG_EPStartXfer+0x106>
        {
          fifoemptymsk = 1 << ep->num;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	461a      	mov	r2, r3
 8005528:	2301      	movs	r3, #1
 800552a:	4093      	lsls	r3, r2
 800552c:	61bb      	str	r3, [r7, #24]
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	6912      	ldr	r2, [r2, #16]
 8005536:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	430a      	orrs	r2, r1
 800553c:	635a      	str	r2, [r3, #52]	; 0x34
        }
      }
    }
    
    
    if (ep->type == EP_TYPE_ISOC)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	78db      	ldrb	r3, [r3, #3]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d114      	bne.n	8005570 <USB_OTG_EPStartXfer+0x138>
    {
      dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	60fb      	str	r3, [r7, #12]
      
      if (((dsts.b.soffn)&0x1) == 0)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8005554:	b29b      	uxth	r3, r3
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d104      	bne.n	8005568 <USB_OTG_EPStartXfer+0x130>
      {
        depctl.b.setd1pid = 1;
 800555e:	7dfb      	ldrb	r3, [r7, #23]
 8005560:	f043 0320 	orr.w	r3, r3, #32
 8005564:	75fb      	strb	r3, [r7, #23]
 8005566:	e003      	b.n	8005570 <USB_OTG_EPStartXfer+0x138>
      }
      else
      {
        depctl.b.setd0pid = 1;
 8005568:	7dfb      	ldrb	r3, [r7, #23]
 800556a:	f043 0310 	orr.w	r3, r3, #16
 800556e:	75fb      	strb	r3, [r7, #23]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
 8005570:	7dfb      	ldrb	r3, [r7, #23]
 8005572:	f043 0304 	orr.w	r3, r3, #4
 8005576:	75fb      	strb	r3, [r7, #23]
    depctl.b.epena = 1;
 8005578:	7dfb      	ldrb	r3, [r7, #23]
 800557a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800557e:	75fb      	strb	r3, [r7, #23]
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPCTL, depctl.d32);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	3304      	adds	r3, #4
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4413      	add	r3, r2
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	601a      	str	r2, [r3, #0]
    
    if (ep->type == EP_TYPE_ISOC)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	78db      	ldrb	r3, [r3, #3]
 8005596:	2b01      	cmp	r3, #1
 8005598:	f040 8089 	bne.w	80056ae <USB_OTG_EPStartXfer+0x276>
    {
      USB_OTG_WritePacket(pdev, ep->xfer_buff, ep->num, ep->xfer_len);   
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	68d9      	ldr	r1, [r3, #12]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	781a      	ldrb	r2, [r3, #0]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7ff f97e 	bl	80048ac <USB_OTG_WritePacket>
 80055b0:	e07d      	b.n	80056ae <USB_OTG_EPStartXfer+0x276>
    }    
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL));
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	3314      	adds	r3, #20
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	617b      	str	r3, [r7, #20]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ));
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	3314      	adds	r3, #20
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4413      	add	r3, r2
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	613b      	str	r3, [r7, #16]
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    if (ep->xfer_len == 0)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10d      	bne.n	80055fa <USB_OTG_EPStartXfer+0x1c2>
    {
      deptsiz.b.xfersize = ep->maxpacket;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f3c3 0212 	ubfx	r2, r3, #0, #19
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	f362 0312 	bfi	r3, r2, #0, #19
 80055ec:	613b      	str	r3, [r7, #16]
      deptsiz.b.pktcnt = 1;
 80055ee:	8a7b      	ldrh	r3, [r7, #18]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f362 03cc 	bfi	r3, r2, #3, #10
 80055f6:	827b      	strh	r3, [r7, #18]
 80055f8:	e020      	b.n	800563c <USB_OTG_EPStartXfer+0x204>
    }
    else
    {
      deptsiz.b.pktcnt = (ep->xfer_len + (ep->maxpacket - 1)) / ep->maxpacket;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	695a      	ldr	r2, [r3, #20]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	4413      	add	r3, r2
 8005604:	1e5a      	subs	r2, r3, #1
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	fbb2 f3f3 	udiv	r3, r2, r3
 800560e:	b29b      	uxth	r3, r3
 8005610:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005614:	b29a      	uxth	r2, r3
 8005616:	8a7b      	ldrh	r3, [r7, #18]
 8005618:	f362 03cc 	bfi	r3, r2, #3, #10
 800561c:	827b      	strh	r3, [r7, #18]
      deptsiz.b.xfersize = deptsiz.b.pktcnt * ep->maxpacket;
 800561e:	8a7b      	ldrh	r3, [r7, #18]
 8005620:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8005624:	b29b      	uxth	r3, r3
 8005626:	461a      	mov	r2, r3
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	fb03 f302 	mul.w	r3, r3, r2
 8005630:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f362 0312 	bfi	r3, r2, #0, #19
 800563a:	613b      	str	r3, [r7, #16]
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	3314      	adds	r3, #20
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	611a      	str	r2, [r3, #16]
    
    if (pdev->cfg.dma_enable == 1)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	78db      	ldrb	r3, [r3, #3]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d109      	bne.n	800566a <USB_OTG_EPStartXfer+0x232>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	3314      	adds	r3, #20
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4413      	add	r3, r2
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	6912      	ldr	r2, [r2, #16]
 8005668:	615a      	str	r2, [r3, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	78db      	ldrb	r3, [r3, #3]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d10c      	bne.n	800568c <USB_OTG_EPStartXfer+0x254>
    {
      if (ep->even_odd_frame)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	795b      	ldrb	r3, [r3, #5]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d004      	beq.n	8005684 <USB_OTG_EPStartXfer+0x24c>
      {
        depctl.b.setd1pid = 1;
 800567a:	7dfb      	ldrb	r3, [r7, #23]
 800567c:	f043 0320 	orr.w	r3, r3, #32
 8005680:	75fb      	strb	r3, [r7, #23]
 8005682:	e003      	b.n	800568c <USB_OTG_EPStartXfer+0x254>
      }
      else
      {
        depctl.b.setd0pid = 1;
 8005684:	7dfb      	ldrb	r3, [r7, #23]
 8005686:	f043 0310 	orr.w	r3, r3, #16
 800568a:	75fb      	strb	r3, [r7, #23]
      }
    }
    /* EP enable */
    depctl.b.cnak = 1;
 800568c:	7dfb      	ldrb	r3, [r7, #23]
 800568e:	f043 0304 	orr.w	r3, r3, #4
 8005692:	75fb      	strb	r3, [r7, #23]
    depctl.b.epena = 1;
 8005694:	7dfb      	ldrb	r3, [r7, #23]
 8005696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800569a:	75fb      	strb	r3, [r7, #23]
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL, depctl.d32);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	3314      	adds	r3, #20
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	601a      	str	r2, [r3, #0]
  }
  return status;
 80056ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3720      	adds	r7, #32
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <USB_OTG_EP0StartXfer>:
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EP0StartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b089      	sub	sp, #36	; 0x24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  USB_OTG_STS                 status = USB_OTG_OK;
 80056c2:	2300      	movs	r3, #0
 80056c4:	77fb      	strb	r3, [r7, #31]
  USB_OTG_DEPCTL_TypeDef      depctl;
  USB_OTG_DEP0XFRSIZ_TypeDef  deptsiz;
  USB_OTG_INEPREGS          *in_regs;
  uint32_t fifoemptymsk = 0;
 80056c6:	2300      	movs	r3, #0
 80056c8:	61bb      	str	r3, [r7, #24]
  
  depctl.d32   = 0;
 80056ca:	2300      	movs	r3, #0
 80056cc:	613b      	str	r3, [r7, #16]
  deptsiz.d32  = 0;
 80056ce:	2300      	movs	r3, #0
 80056d0:	60bb      	str	r3, [r7, #8]
  /* IN endpoint */
  if (ep->is_in == 1)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	785b      	ldrb	r3, [r3, #1]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d170      	bne.n	80057bc <USB_OTG_EP0StartXfer+0x104>
  {
    in_regs = pdev->regs.INEP_REGS[0];
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	617b      	str	r3, [r7, #20]
    depctl.d32  = USB_OTG_READ_REG32(&in_regs->DIEPCTL);
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	613b      	str	r3, [r7, #16]
    deptsiz.d32 = USB_OTG_READ_REG32(&in_regs->DIEPTSIZ);
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	60bb      	str	r3, [r7, #8]
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d109      	bne.n	8005708 <USB_OTG_EP0StartXfer+0x50>
    {
      deptsiz.b.xfersize = 0;
 80056f4:	7a3b      	ldrb	r3, [r7, #8]
 80056f6:	f36f 0306 	bfc	r3, #0, #7
 80056fa:	723b      	strb	r3, [r7, #8]
      deptsiz.b.pktcnt = 1;
 80056fc:	7abb      	ldrb	r3, [r7, #10]
 80056fe:	2201      	movs	r2, #1
 8005700:	f362 03c4 	bfi	r3, r2, #3, #2
 8005704:	72bb      	strb	r3, [r7, #10]
 8005706:	e023      	b.n	8005750 <USB_OTG_EP0StartXfer+0x98>
      
    }
    else
    {
      if (ep->xfer_len > ep->maxpacket)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	695a      	ldr	r2, [r3, #20]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	429a      	cmp	r2, r3
 8005712:	d90e      	bls.n	8005732 <USB_OTG_EP0StartXfer+0x7a>
      {
        ep->xfer_len = ep->maxpacket;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	615a      	str	r2, [r3, #20]
        deptsiz.b.xfersize = ep->maxpacket;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	b2db      	uxtb	r3, r3
 8005722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005726:	b2da      	uxtb	r2, r3
 8005728:	7a3b      	ldrb	r3, [r7, #8]
 800572a:	f362 0306 	bfi	r3, r2, #0, #7
 800572e:	723b      	strb	r3, [r7, #8]
 8005730:	e009      	b.n	8005746 <USB_OTG_EP0StartXfer+0x8e>
      }
      else
      {
        deptsiz.b.xfersize = ep->xfer_len;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	b2db      	uxtb	r3, r3
 8005738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800573c:	b2da      	uxtb	r2, r3
 800573e:	7a3b      	ldrb	r3, [r7, #8]
 8005740:	f362 0306 	bfi	r3, r2, #0, #7
 8005744:	723b      	strb	r3, [r7, #8]
      }
      deptsiz.b.pktcnt = 1;
 8005746:	7abb      	ldrb	r3, [r7, #10]
 8005748:	2201      	movs	r2, #1
 800574a:	f362 03c4 	bfi	r3, r2, #3, #2
 800574e:	72bb      	strb	r3, [r7, #10]
    }
    USB_OTG_WRITE_REG32(&in_regs->DIEPTSIZ, deptsiz.d32);
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	611a      	str	r2, [r3, #16]
    
    if (pdev->cfg.dma_enable == 1)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	78db      	ldrb	r3, [r3, #3]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d109      	bne.n	8005772 <USB_OTG_EP0StartXfer+0xba>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);  
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	3304      	adds	r3, #4
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	6912      	ldr	r2, [r2, #16]
 8005770:	615a      	str	r2, [r3, #20]
    }
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
 8005772:	7cfb      	ldrb	r3, [r7, #19]
 8005774:	f043 0304 	orr.w	r3, r3, #4
 8005778:	74fb      	strb	r3, [r7, #19]
    depctl.b.epena = 1;
 800577a:	7cfb      	ldrb	r3, [r7, #19]
 800577c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005780:	74fb      	strb	r3, [r7, #19]
    USB_OTG_WRITE_REG32(&in_regs->DIEPCTL, depctl.d32);
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	601a      	str	r2, [r3, #0]
    
    
    
    if (pdev->cfg.dma_enable == 0)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	78db      	ldrb	r3, [r3, #3]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d176      	bne.n	800587e <USB_OTG_EP0StartXfer+0x1c6>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d072      	beq.n	800587e <USB_OTG_EP0StartXfer+0x1c6>
      {
        {
          fifoemptymsk |= 1 << ep->num;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	461a      	mov	r2, r3
 800579e:	2301      	movs	r3, #1
 80057a0:	4093      	lsls	r3, r2
 80057a2:	461a      	mov	r2, r3
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	61bb      	str	r3, [r7, #24]
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	6912      	ldr	r2, [r2, #16]
 80057b2:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	635a      	str	r2, [r3, #52]	; 0x34
 80057ba:	e060      	b.n	800587e <USB_OTG_EP0StartXfer+0x1c6>
    }
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	3314      	adds	r3, #20
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	613b      	str	r3, [r7, #16]
    deptsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ);
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	3314      	adds	r3, #20
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	60bb      	str	r3, [r7, #8]
    /* Program the transfer size and packet count as follows:
    * xfersize = N * (maxpacket + 4 - (maxpacket % 4))
    * pktcnt = N           */
    if (ep->xfer_len == 0)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10f      	bne.n	8005808 <USB_OTG_EP0StartXfer+0x150>
    {
      deptsiz.b.xfersize = ep->maxpacket;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057f2:	b2da      	uxtb	r2, r3
 80057f4:	7a3b      	ldrb	r3, [r7, #8]
 80057f6:	f362 0306 	bfi	r3, r2, #0, #7
 80057fa:	723b      	strb	r3, [r7, #8]
      deptsiz.b.pktcnt = 1;
 80057fc:	7abb      	ldrb	r3, [r7, #10]
 80057fe:	2201      	movs	r2, #1
 8005800:	f362 03c4 	bfi	r3, r2, #3, #2
 8005804:	72bb      	strb	r3, [r7, #10]
 8005806:	e012      	b.n	800582e <USB_OTG_EP0StartXfer+0x176>
    }
    else
    {
      ep->xfer_len = ep->maxpacket;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	615a      	str	r2, [r3, #20]
      deptsiz.b.xfersize = ep->maxpacket;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	b2db      	uxtb	r3, r3
 8005816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800581a:	b2da      	uxtb	r2, r3
 800581c:	7a3b      	ldrb	r3, [r7, #8]
 800581e:	f362 0306 	bfi	r3, r2, #0, #7
 8005822:	723b      	strb	r3, [r7, #8]
      deptsiz.b.pktcnt = 1;
 8005824:	7abb      	ldrb	r3, [r7, #10]
 8005826:	2201      	movs	r2, #1
 8005828:	f362 03c4 	bfi	r3, r2, #3, #2
 800582c:	72bb      	strb	r3, [r7, #10]
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	3314      	adds	r3, #20
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	611a      	str	r2, [r3, #16]
    if (pdev->cfg.dma_enable == 1)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	78db      	ldrb	r3, [r3, #3]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d109      	bne.n	800585c <USB_OTG_EP0StartXfer+0x1a4>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	3314      	adds	r3, #20
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	6912      	ldr	r2, [r2, #16]
 800585a:	615a      	str	r2, [r3, #20]
    }
    /* EP enable */
    depctl.b.cnak = 1;
 800585c:	7cfb      	ldrb	r3, [r7, #19]
 800585e:	f043 0304 	orr.w	r3, r3, #4
 8005862:	74fb      	strb	r3, [r7, #19]
    depctl.b.epena = 1;
 8005864:	7cfb      	ldrb	r3, [r7, #19]
 8005866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800586a:	74fb      	strb	r3, [r7, #19]
    USB_OTG_WRITE_REG32 (&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL), depctl.d32);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	3314      	adds	r3, #20
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4413      	add	r3, r2
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	601a      	str	r2, [r3, #0]
    
  }
  return status;
 800587e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005880:	4618      	mov	r0, r3
 8005882:	3724      	adds	r7, #36	; 0x24
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <USB_OTG_EPSetStall>:
* @brief  USB_OTG_EPSetStall : Set the EP STALL
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPSetStall(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8005896:	2300      	movs	r3, #0
 8005898:	75fb      	strb	r3, [r7, #23]
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
 800589a:	2300      	movs	r3, #0
 800589c:	60fb      	str	r3, [r7, #12]
  if (ep->is_in == 1)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	785b      	ldrb	r3, [r3, #1]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d11c      	bne.n	80058e0 <USB_OTG_EPSetStall+0x54>
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	3304      	adds	r3, #4
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	613b      	str	r3, [r7, #16]
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	60fb      	str	r3, [r7, #12]
    /* set the disable and stall bits */
    if (depctl.b.epena)
 80058bc:	7bfb      	ldrb	r3, [r7, #15]
 80058be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d003      	beq.n	80058d0 <USB_OTG_EPSetStall+0x44>
    {
      depctl.b.epdis = 1;
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
 80058ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ce:	73fb      	strb	r3, [r7, #15]
    }
    depctl.b.stall = 1;
 80058d0:	7bbb      	ldrb	r3, [r7, #14]
 80058d2:	f043 0320 	orr.w	r3, r3, #32
 80058d6:	73bb      	strb	r3, [r7, #14]
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	e011      	b.n	8005904 <USB_OTG_EPSetStall+0x78>
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	3314      	adds	r3, #20
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	613b      	str	r3, [r7, #16]
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	60fb      	str	r3, [r7, #12]
    /* set the stall bit */
    depctl.b.stall = 1;
 80058f6:	7bbb      	ldrb	r3, [r7, #14]
 80058f8:	f043 0320 	orr.w	r3, r3, #32
 80058fc:	73bb      	strb	r3, [r7, #14]
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	601a      	str	r2, [r3, #0]
  }
  return status;
 8005904:	7dfb      	ldrb	r3, [r7, #23]
}
 8005906:	4618      	mov	r0, r3
 8005908:	371c      	adds	r7, #28
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <USB_OTG_EPClearStall>:
* @brief  Clear the EP STALL
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPClearStall(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8005912:	b480      	push	{r7}
 8005914:	b087      	sub	sp, #28
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 800591c:	2300      	movs	r3, #0
 800591e:	74fb      	strb	r3, [r7, #19]
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
 8005920:	2300      	movs	r3, #0
 8005922:	60fb      	str	r3, [r7, #12]
  
  if (ep->is_in == 1)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	785b      	ldrb	r3, [r3, #1]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d108      	bne.n	800593e <USB_OTG_EPClearStall+0x2c>
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	3304      	adds	r3, #4
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4413      	add	r3, r2
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	617b      	str	r3, [r7, #20]
 800593c:	e007      	b.n	800594e <USB_OTG_EPClearStall+0x3c>
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	3314      	adds	r3, #20
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	617b      	str	r3, [r7, #20]
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	60fb      	str	r3, [r7, #12]
  /* clear the stall bits */
  depctl.b.stall = 0;
 8005954:	7bbb      	ldrb	r3, [r7, #14]
 8005956:	f36f 1345 	bfc	r3, #5, #1
 800595a:	73bb      	strb	r3, [r7, #14]
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	78db      	ldrb	r3, [r3, #3]
 8005960:	2b03      	cmp	r3, #3
 8005962:	d003      	beq.n	800596c <USB_OTG_EPClearStall+0x5a>
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	78db      	ldrb	r3, [r3, #3]
 8005968:	2b02      	cmp	r3, #2
 800596a:	d103      	bne.n	8005974 <USB_OTG_EPClearStall+0x62>
  {
    depctl.b.setd0pid = 1; /* DATA0 */
 800596c:	7bfb      	ldrb	r3, [r7, #15]
 800596e:	f043 0310 	orr.w	r3, r3, #16
 8005972:	73fb      	strb	r3, [r7, #15]
  }
  USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	601a      	str	r2, [r3, #0]
  return status;
 800597a:	7cfb      	ldrb	r3, [r7, #19]
}
 800597c:	4618      	mov	r0, r3
 800597e:	371c      	adds	r7, #28
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <USB_OTG_ReadDevAllOutEp_itr>:
* @brief  USB_OTG_ReadDevAllOutEp_itr : returns OUT endpoint interrupt bits
* @param  pdev : Selected device
* @retval OUT endpoint interrupt bits
*/
uint32_t USB_OTG_ReadDevAllOutEp_itr(USB_OTG_CORE_HANDLE *pdev)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINT);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINTMSK);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	4013      	ands	r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000) >> 16);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	0c1b      	lsrs	r3, r3, #16
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <USB_OTG_ReadDevOutEP_itr>:
* @param  pdev : Selected device
* @param  ep : end point number
* @retval Device OUT EP Interrupt register
*/
uint32_t USB_OTG_ReadDevOutEP_itr(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	460b      	mov	r3, r1
 80059be:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[epnum]->DOEPINT);
 80059c0:	78fb      	ldrb	r3, [r7, #3]
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	3314      	adds	r3, #20
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DOEPMSK);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4013      	ands	r3, r2
 80059da:	60fb      	str	r3, [r7, #12]
  return v;
 80059dc:	68fb      	ldr	r3, [r7, #12]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <USB_OTG_ReadDevAllInEPItr>:
* @brief  USB_OTG_ReadDevAllInEPItr : Get int status register
* @param  pdev : Selected device
* @retval int status register
*/
uint32_t USB_OTG_ReadDevAllInEPItr(USB_OTG_CORE_HANDLE *pdev)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b085      	sub	sp, #20
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v = USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINT);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINTMSK);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	69db      	ldr	r3, [r3, #28]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	4013      	ands	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]
  return (v & 0xffff);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	b29b      	uxth	r3, r3
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <USB_OTG_EP0_OutStart>:
* @brief  configures EPO to receive SETUP packets
* @param  None
* @retval : None
*/
void USB_OTG_EP0_OutStart(USB_OTG_CORE_HANDLE *pdev)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b087      	sub	sp, #28
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  USB_OTG_DEP0XFRSIZ_TypeDef  doeptsize0;
  doeptsize0.d32 = 0;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	613b      	str	r3, [r7, #16]
  doeptsize0.b.supcnt = 3;
 8005a22:	7cfb      	ldrb	r3, [r7, #19]
 8005a24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a28:	74fb      	strb	r3, [r7, #19]
  doeptsize0.b.pktcnt = 1;
 8005a2a:	7cbb      	ldrb	r3, [r7, #18]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f362 03c4 	bfi	r3, r2, #3, #2
 8005a32:	74bb      	strb	r3, [r7, #18]
  doeptsize0.b.xfersize = 8 * 3;
 8005a34:	7c3b      	ldrb	r3, [r7, #16]
 8005a36:	2218      	movs	r2, #24
 8005a38:	f362 0306 	bfi	r3, r2, #0, #7
 8005a3c:	743b      	strb	r3, [r7, #16]
  USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPTSIZ, doeptsize0.d32 );
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	78db      	ldrb	r3, [r3, #3]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d116      	bne.n	8005a7c <USB_OTG_EP0_OutStart+0x66>
  {
    USB_OTG_DEPCTL_TypeDef  doepctl;
    doepctl.d32 = 0;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60fb      	str	r3, [r7, #12]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPDMA, 
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	f202 52cc 	addw	r2, r2, #1484	; 0x5cc
 8005a5c:	615a      	str	r2, [r3, #20]
                        (uint32_t)&pdev->dev.setup_packet);
    
    /* EP enable */
    doepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[0]->DOEPCTL);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	60fb      	str	r3, [r7, #12]
    doepctl.b.epena = 1;
 8005a66:	7bfb      	ldrb	r3, [r7, #15]
 8005a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a6c:	73fb      	strb	r3, [r7, #15]
    doepctl.d32 = 0x80008000;
 8005a6e:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 8005a72:	60fb      	str	r3, [r7, #12]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPCTL, doepctl.d32);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	601a      	str	r2, [r3, #0]
  }
}
 8005a7c:	bf00      	nop
 8005a7e:	371c      	adds	r7, #28
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <USB_OTG_UngateClock>:
* @brief  USB_OTG_UngateClock : active USB Core clock
* @param  None
* @retval : None
*/
void USB_OTG_UngateClock(USB_OTG_CORE_HANDLE *pdev)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  if(pdev->cfg.low_power)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	7a9b      	ldrb	r3, [r3, #10]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d01b      	beq.n	8005ad0 <USB_OTG_UngateClock+0x48>
  {
    
    USB_OTG_DSTS_TypeDef     dsts;
    USB_OTG_PCGCCTL_TypeDef  power; 
    
    dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	60fb      	str	r3, [r7, #12]
    
    if(dsts.b.suspsts == 1)
 8005aa0:	7b3b      	ldrb	r3, [r7, #12]
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d011      	beq.n	8005ad0 <USB_OTG_UngateClock+0x48>
    {
      /* un-gate USB Core clock */
      power.d32 = USB_OTG_READ_REG32(&pdev->regs.PCGCCTL);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	60bb      	str	r3, [r7, #8]
      power.b.gatehclk = 0;
 8005ab6:	7a3b      	ldrb	r3, [r7, #8]
 8005ab8:	f36f 0341 	bfc	r3, #1, #1
 8005abc:	723b      	strb	r3, [r7, #8]
      power.b.stoppclk = 0;
 8005abe:	7a3b      	ldrb	r3, [r7, #8]
 8005ac0:	f36f 0300 	bfc	r3, #0, #1
 8005ac4:	723b      	strb	r3, [r7, #8]
      USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	601a      	str	r2, [r3, #0]
      
    }
  }
}
 8005ad0:	bf00      	nop
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <DCD_Init>:



void DCD_Init(USB_OTG_CORE_HANDLE *pdev , 
              USB_OTG_CORE_ID_TypeDef coreID)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	70fb      	strb	r3, [r7, #3]
  uint32_t i;
  USB_OTG_EP *ep;
  
  USB_OTG_SelectCore (pdev , coreID);
 8005ae8:	78fb      	ldrb	r3, [r7, #3]
 8005aea:	4619      	mov	r1, r3
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f7fe ff45 	bl	800497c <USB_OTG_SelectCore>
  
  pdev->dev.device_status = USB_OTG_DEFAULT;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  pdev->dev.device_address = 0;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
  
  /* Init ep structure */
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8005b02:	2300      	movs	r3, #0
 8005b04:	60fb      	str	r3, [r7, #12]
 8005b06:	e024      	b.n	8005b52 <DCD_Init+0x76>
  {
    ep = &pdev->dev.in_ep[i];
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	4413      	add	r3, r2
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	60bb      	str	r3, [r7, #8]
    /* Init ep structure */
    ep->is_in = 1;
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2201      	movs	r2, #1
 8005b22:	705a      	strb	r2, [r3, #1]
    ep->num = i;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	701a      	strb	r2, [r3, #0]
    ep->tx_fifo_num = i;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	80da      	strh	r2, [r3, #6]
    /* Control until ep is actvated */
    ep->type = EP_TYPE_CTRL;
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	2200      	movs	r2, #0
 8005b38:	70da      	strb	r2, [r3, #3]
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	2240      	movs	r2, #64	; 0x40
 8005b3e:	609a      	str	r2, [r3, #8]
    ep->xfer_buff = 0;
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	2200      	movs	r2, #0
 8005b44:	60da      	str	r2, [r3, #12]
    ep->xfer_len = 0;
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	615a      	str	r2, [r3, #20]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	60fb      	str	r3, [r7, #12]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	785b      	ldrb	r3, [r3, #1]
 8005b56:	461a      	mov	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d8d4      	bhi.n	8005b08 <DCD_Init+0x2c>
  }
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	e024      	b.n	8005bae <DCD_Init+0xd2>
  {
    ep = &pdev->dev.out_ep[i];
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	4613      	mov	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	4413      	add	r3, r2
 8005b6c:	00db      	lsls	r3, r3, #3
 8005b6e:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	4413      	add	r3, r2
 8005b76:	3304      	adds	r3, #4
 8005b78:	60bb      	str	r3, [r7, #8]
    /* Init ep structure */
    ep->is_in = 0;
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	705a      	strb	r2, [r3, #1]
    ep->num = i;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	701a      	strb	r2, [r3, #0]
    ep->tx_fifo_num = i;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	80da      	strh	r2, [r3, #6]
    /* Control until ep is activated */
    ep->type = EP_TYPE_CTRL;
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	2200      	movs	r2, #0
 8005b94:	70da      	strb	r2, [r3, #3]
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	2240      	movs	r2, #64	; 0x40
 8005b9a:	609a      	str	r2, [r3, #8]
    ep->xfer_buff = 0;
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	60da      	str	r2, [r3, #12]
    ep->xfer_len = 0;
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	615a      	str	r2, [r3, #20]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	3301      	adds	r3, #1
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	785b      	ldrb	r3, [r3, #1]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d8d4      	bhi.n	8005b64 <DCD_Init+0x88>
  }
  
  USB_OTG_DisableGlobalInt(pdev);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f7ff f856 	bl	8004c6c <USB_OTG_DisableGlobalInt>
  
  /*Init the Core (common init.) */
  USB_OTG_CoreInit(pdev);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f7fe ff9f 	bl	8004b04 <USB_OTG_CoreInit>


  /* Force Device Mode*/
  USB_OTG_SetCurrentMode(pdev, DEVICE_MODE);
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7ff f8d5 	bl	8004d78 <USB_OTG_SetCurrentMode>
  
  /* Init Device */
  USB_OTG_CoreInitDev(pdev);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7ff f954 	bl	8004e7c <USB_OTG_CoreInitDev>
  
  
  /* Enable USB Global interrupt */
  USB_OTG_EnableGlobalInt(pdev);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f7ff f82e 	bl	8004c36 <USB_OTG_EnableGlobalInt>
}
 8005bda:	bf00      	nop
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <DCD_EP_Open>:
*/
uint32_t DCD_EP_Open(USB_OTG_CORE_HANDLE *pdev , 
                     uint8_t ep_addr,
                     uint16_t ep_mps,
                     uint8_t ep_type)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b084      	sub	sp, #16
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
 8005bea:	4608      	mov	r0, r1
 8005bec:	4611      	mov	r1, r2
 8005bee:	461a      	mov	r2, r3
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	70fb      	strb	r3, [r7, #3]
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	803b      	strh	r3, [r7, #0]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	70bb      	strb	r3, [r7, #2]
  USB_OTG_EP *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8005bfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	da0d      	bge.n	8005c20 <DCD_EP_Open+0x3e>
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8005c04:	78fb      	ldrb	r3, [r7, #3]
 8005c06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	00db      	lsls	r3, r3, #3
 8005c12:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	4413      	add	r3, r2
 8005c1a:	3304      	adds	r3, #4
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	e00c      	b.n	8005c3a <DCD_EP_Open+0x58>
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8005c20:	78fb      	ldrb	r3, [r7, #3]
 8005c22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c26:	4613      	mov	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4413      	add	r3, r2
 8005c2c:	00db      	lsls	r3, r3, #3
 8005c2e:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	4413      	add	r3, r2
 8005c36:	3304      	adds	r3, #4
 8005c38:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8005c3a:	78fb      	ldrb	r3, [r7, #3]
 8005c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8005c46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	09db      	lsrs	r3, r3, #7
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	461a      	mov	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8005c56:	883a      	ldrh	r2, [r7, #0]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	78ba      	ldrb	r2, [r7, #2]
 8005c60:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	785b      	ldrb	r3, [r3, #1]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d004      	beq.n	8005c74 <DCD_EP_Open+0x92>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == USB_OTG_EP_BULK )
 8005c74:	78bb      	ldrb	r3, [r7, #2]
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d102      	bne.n	8005c80 <DCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	711a      	strb	r2, [r3, #4]
  }
  USB_OTG_EPActivate(pdev , ep );
 8005c80:	68f9      	ldr	r1, [r7, #12]
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7ff fb02 	bl	800528c <USB_OTG_EPActivate>
  return 0;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <DCD_EP_Close>:
* @param pdev: device instance
* @param ep_addr: endpoint address
* @retval : status
*/
uint32_t DCD_EP_Close(USB_OTG_CORE_HANDLE *pdev , uint8_t  ep_addr)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b084      	sub	sp, #16
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  
  if ((ep_addr&0x80) == 0x80)
 8005c9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	da0d      	bge.n	8005cc2 <DCD_EP_Close+0x30>
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8005ca6:	78fb      	ldrb	r3, [r7, #3]
 8005ca8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cac:	4613      	mov	r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	4413      	add	r3, r2
 8005cb2:	00db      	lsls	r3, r3, #3
 8005cb4:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	4413      	add	r3, r2
 8005cbc:	3304      	adds	r3, #4
 8005cbe:	60fb      	str	r3, [r7, #12]
 8005cc0:	e00c      	b.n	8005cdc <DCD_EP_Close+0x4a>
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8005cc2:	78fb      	ldrb	r3, [r7, #3]
 8005cc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cc8:	4613      	mov	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	3304      	adds	r3, #4
 8005cda:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8005cdc:	78fb      	ldrb	r3, [r7, #3]
 8005cde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	701a      	strb	r2, [r3, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8005ce8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	09db      	lsrs	r3, r3, #7
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	705a      	strb	r2, [r3, #1]
  USB_OTG_EPDeactivate(pdev , ep );
 8005cf8:	68f9      	ldr	r1, [r7, #12]
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7ff fb45 	bl	800538a <USB_OTG_EPDeactivate>
  return 0;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <DCD_EP_PrepareRx>:
*/
uint32_t   DCD_EP_PrepareRx( USB_OTG_CORE_HANDLE *pdev,
                            uint8_t   ep_addr,
                            uint8_t *pbuf,                        
                            uint16_t  buf_len)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b086      	sub	sp, #24
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	60f8      	str	r0, [r7, #12]
 8005d12:	607a      	str	r2, [r7, #4]
 8005d14:	461a      	mov	r2, r3
 8005d16:	460b      	mov	r3, r1
 8005d18:	72fb      	strb	r3, [r7, #11]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	813b      	strh	r3, [r7, #8]
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8005d1e:	7afb      	ldrb	r3, [r7, #11]
 8005d20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d24:	4613      	mov	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	00db      	lsls	r3, r3, #3
 8005d2c:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	4413      	add	r3, r2
 8005d34:	3304      	adds	r3, #4
 8005d36:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pbuf;  
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = buf_len;
 8005d3e:	893a      	ldrh	r2, [r7, #8]
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	2200      	movs	r2, #0
 8005d48:	619a      	str	r2, [r3, #24]
  ep->is_in = 0;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8005d50:	7afb      	ldrb	r3, [r7, #11]
 8005d52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	701a      	strb	r2, [r3, #0]
  
  if (pdev->cfg.dma_enable == 1)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	78db      	ldrb	r3, [r3, #3]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d102      	bne.n	8005d6a <DCD_EP_PrepareRx+0x60>
  {
    ep->dma_addr = (uint32_t)pbuf;  
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	611a      	str	r2, [r3, #16]
  }
  
  if ( ep->num == 0 )
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d104      	bne.n	8005d7c <DCD_EP_PrepareRx+0x72>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
 8005d72:	6979      	ldr	r1, [r7, #20]
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f7ff fc9f 	bl	80056b8 <USB_OTG_EP0StartXfer>
 8005d7a:	e003      	b.n	8005d84 <DCD_EP_PrepareRx+0x7a>
  }
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
 8005d7c:	6979      	ldr	r1, [r7, #20]
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f7ff fb5a 	bl	8005438 <USB_OTG_EPStartXfer>
  }
  return 0;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <DCD_EP_Tx>:
*/
uint32_t  DCD_EP_Tx ( USB_OTG_CORE_HANDLE *pdev,
                     uint8_t   ep_addr,
                     uint8_t   *pbuf,
                     uint32_t   buf_len)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b086      	sub	sp, #24
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	60f8      	str	r0, [r7, #12]
 8005d96:	607a      	str	r2, [r7, #4]
 8005d98:	603b      	str	r3, [r7, #0]
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8005d9e:	7afb      	ldrb	r3, [r7, #11]
 8005da0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005da4:	4613      	mov	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	00db      	lsls	r3, r3, #3
 8005dac:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	4413      	add	r3, r2
 8005db4:	3304      	adds	r3, #4
 8005db6:	617b      	str	r3, [r7, #20]
  
  /* Setup and start the Transfer */
  ep->is_in = 1;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;  
 8005dbe:	7afb      	ldrb	r3, [r7, #11]
 8005dc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	701a      	strb	r2, [r3, #0]
  ep->xfer_buff = pbuf;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	60da      	str	r2, [r3, #12]
  ep->dma_addr = (uint32_t)pbuf;  
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	619a      	str	r2, [r3, #24]
  ep->xfer_len  = buf_len;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	615a      	str	r2, [r3, #20]
  
  if ( ep->num == 0 )
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d104      	bne.n	8005df4 <DCD_EP_Tx+0x66>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
 8005dea:	6979      	ldr	r1, [r7, #20]
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f7ff fc63 	bl	80056b8 <USB_OTG_EP0StartXfer>
 8005df2:	e003      	b.n	8005dfc <DCD_EP_Tx+0x6e>
  }
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
 8005df4:	6979      	ldr	r1, [r7, #20]
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f7ff fb1e 	bl	8005438 <USB_OTG_EPStartXfer>
  }
  return 0;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3718      	adds	r7, #24
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <DCD_EP_Stall>:
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_Stall (USB_OTG_CORE_HANDLE *pdev, uint8_t   epnum)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b084      	sub	sp, #16
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
 8005e0e:	460b      	mov	r3, r1
 8005e10:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8005e12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	da0d      	bge.n	8005e36 <DCD_EP_Stall+0x30>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];
 8005e1a:	78fb      	ldrb	r3, [r7, #3]
 8005e1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e20:	4613      	mov	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4413      	add	r3, r2
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	4413      	add	r3, r2
 8005e30:	3304      	adds	r3, #4
 8005e32:	60fb      	str	r3, [r7, #12]
 8005e34:	e00a      	b.n	8005e4c <DCD_EP_Stall+0x46>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 8005e36:	78fa      	ldrb	r2, [r7, #3]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	4413      	add	r3, r2
 8005e48:	3304      	adds	r3, #4
 8005e4a:	60fb      	str	r3, [r7, #12]
  }

  ep->is_stall = 1;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	709a      	strb	r2, [r3, #2]
  ep->num   = epnum & 0x7F;
 8005e52:	78fb      	ldrb	r3, [r7, #3]
 8005e54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((epnum & 0x80) == 0x80);
 8005e5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	09db      	lsrs	r3, r3, #7
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	461a      	mov	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	705a      	strb	r2, [r3, #1]
  
  USB_OTG_EPSetStall(pdev , ep);
 8005e6e:	68f9      	ldr	r1, [r7, #12]
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7ff fd0b 	bl	800588c <USB_OTG_EPSetStall>
  return (0);
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <DCD_EP_ClrStall>:
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_ClrStall (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8005e8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	da0d      	bge.n	8005eb0 <DCD_EP_ClrStall+0x30>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
 8005e94:	78fb      	ldrb	r3, [r7, #3]
 8005e96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4413      	add	r3, r2
 8005ea0:	00db      	lsls	r3, r3, #3
 8005ea2:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	3304      	adds	r3, #4
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	e00a      	b.n	8005ec6 <DCD_EP_ClrStall+0x46>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 8005eb0:	78fa      	ldrb	r2, [r7, #3]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4413      	add	r3, r2
 8005eb8:	00db      	lsls	r3, r3, #3
 8005eba:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0;  
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	709a      	strb	r2, [r3, #2]
  ep->num   = epnum & 0x7F;
 8005ecc:	78fb      	ldrb	r3, [r7, #3]
 8005ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ed2:	b2da      	uxtb	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((epnum & 0x80) == 0x80);
 8005ed8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	09db      	lsrs	r3, r3, #7
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	705a      	strb	r2, [r3, #1]
  
  USB_OTG_EPClearStall(pdev , ep);
 8005ee8:	68f9      	ldr	r1, [r7, #12]
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7ff fd11 	bl	8005912 <USB_OTG_EPClearStall>
  return (0);
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <DCD_EP_Flush>:
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_Flush (USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b082      	sub	sp, #8
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
 8005f02:	460b      	mov	r3, r1
 8005f04:	70fb      	strb	r3, [r7, #3]

  if ((epnum & 0x80) == 0x80)
 8005f06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	da07      	bge.n	8005f1e <DCD_EP_Flush+0x24>
  {
    USB_OTG_FlushTxFifo(pdev, epnum & 0x7F);
 8005f0e:	78fb      	ldrb	r3, [r7, #3]
 8005f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f14:	4619      	mov	r1, r3
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7fe fec4 	bl	8004ca4 <USB_OTG_FlushTxFifo>
 8005f1c:	e002      	b.n	8005f24 <DCD_EP_Flush+0x2a>
  }
  else
  {
    USB_OTG_FlushRxFifo(pdev);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7fe fefa 	bl	8004d18 <USB_OTG_FlushRxFifo>
  }

  return (0);
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <DCD_EP_SetAddress>:
* @param pdev: device instance
* @param address: new device address
* @retval : status
*/
void  DCD_EP_SetAddress (USB_OTG_CORE_HANDLE *pdev, uint8_t address)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b085      	sub	sp, #20
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	460b      	mov	r3, r1
 8005f38:	70fb      	strb	r3, [r7, #3]
  USB_OTG_DCFG_TypeDef  dcfg;
  dcfg.d32 = 0;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60fb      	str	r3, [r7, #12]
  dcfg.b.devaddr = address;
 8005f3e:	78fb      	ldrb	r3, [r7, #3]
 8005f40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f44:	b2da      	uxtb	r2, r3
 8005f46:	89bb      	ldrh	r3, [r7, #12]
 8005f48:	f362 130a 	bfi	r3, r2, #4, #7
 8005f4c:	81bb      	strh	r3, [r7, #12]
  USB_OTG_MODIFY_REG32( &pdev->regs.DREGS->DCFG, 0, dcfg.d32);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	6912      	ldr	r2, [r2, #16]
 8005f56:	6811      	ldr	r1, [r2, #0]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	601a      	str	r2, [r3, #0]
}
 8005f5e:	bf00      	nop
 8005f60:	3714      	adds	r7, #20
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
	...

08005f6c <USBD_OTG_EP1OUT_ISR_Handler>:
*         handles all USB Interrupts
* @param  pdev: device instance
* @retval status
*/
uint32_t USBD_OTG_EP1OUT_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  
  USB_OTG_DOEPINTn_TypeDef  doepint;
  USB_OTG_DEPXFRSIZ_TypeDef  deptsiz;  
  
  doepint.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[1]->DOEPINT);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	60fb      	str	r3, [r7, #12]
  doepint.d32&= USB_OTG_READ_REG32(&pdev->regs.DREGS->DOUTEP1MSK);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	4013      	ands	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]
  
  /* Transfer complete */
  if ( doepint.b.xfercompl )
 8005f8a:	7b3b      	ldrb	r3, [r7, #12]
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d021      	beq.n	8005fda <USBD_OTG_EP1OUT_ISR_Handler+0x6e>
  {
    /* Clear the bit in DOEPINTn for this interrupt */
    CLEAR_OUT_EP_INTR(1, xfercompl);
 8005f96:	2300      	movs	r3, #0
 8005f98:	60fb      	str	r3, [r7, #12]
 8005f9a:	7b3b      	ldrb	r3, [r7, #12]
 8005f9c:	f043 0301 	orr.w	r3, r3, #1
 8005fa0:	733b      	strb	r3, [r7, #12]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	609a      	str	r2, [r3, #8]
    if (pdev->cfg.dma_enable == 1)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	78db      	ldrb	r3, [r3, #3]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d10d      	bne.n	8005fce <USBD_OTG_EP1OUT_ISR_Handler+0x62>
    {
      deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[1]->DOEPTSIZ));
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	60bb      	str	r3, [r7, #8]
      /*ToDo : handle more than one single MPS size packet */
      pdev->dev.out_ep[1].xfer_count = pdev->dev.out_ep[1].maxpacket - \
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
        deptsiz.b.xfersize;
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	f3c2 0212 	ubfx	r2, r2, #0, #19
      pdev->dev.out_ep[1].xfer_count = pdev->dev.out_ep[1].maxpacket - \
 8005fc6:	1a9a      	subs	r2, r3, r2
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
    }    
    /* Inform upper layer: data ready */
    /* RX COMPLETE */
    USBD_DCD_INT_fops->DataOutStage(pdev , 1);
 8005fce:	4b0d      	ldr	r3, [pc, #52]	; (8006004 <USBD_OTG_EP1OUT_ISR_Handler+0x98>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2101      	movs	r1, #1
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	4798      	blx	r3
    
  }
  
  /* Endpoint disable  */
  if ( doepint.b.epdisabled )
 8005fda:	7b3b      	ldrb	r3, [r7, #12]
 8005fdc:	f003 0302 	and.w	r3, r3, #2
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d009      	beq.n	8005ffa <USBD_OTG_EP1OUT_ISR_Handler+0x8e>
  {
    /* Clear the bit in DOEPINTn for this interrupt */
    CLEAR_OUT_EP_INTR(1, epdisabled);
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60fb      	str	r3, [r7, #12]
 8005fea:	7b3b      	ldrb	r3, [r7, #12]
 8005fec:	f043 0302 	orr.w	r3, r3, #2
 8005ff0:	733b      	strb	r3, [r7, #12]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	609a      	str	r2, [r3, #8]
  }

  return 1;
 8005ffa:	2301      	movs	r3, #1
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	2000005c 	.word	0x2000005c

08006008 <USBD_OTG_EP1IN_ISR_Handler>:
*         handles all USB Interrupts
* @param  pdev: device instance
* @retval status
*/
uint32_t USBD_OTG_EP1IN_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  
  USB_OTG_DIEPINTn_TypeDef  diepint;
  uint32_t fifoemptymsk, msk, emp;
  
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DINEP1MSK);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006016:	617b      	str	r3, [r7, #20]
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800601e:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> 1 ) & 0x1) << 7;
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	085b      	lsrs	r3, r3, #1
 8006024:	01db      	lsls	r3, r3, #7
 8006026:	b2db      	uxtb	r3, r3
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	4313      	orrs	r3, r2
 800602c:	617b      	str	r3, [r7, #20]
  diepint.d32  = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[1]->DIEPINT) & msk;  
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	4013      	ands	r3, r2
 8006038:	60bb      	str	r3, [r7, #8]
  
  if ( diepint.b.xfercompl )
 800603a:	7a3b      	ldrb	r3, [r7, #8]
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d01a      	beq.n	800607c <USBD_OTG_EP1IN_ISR_Handler+0x74>
  {
    fifoemptymsk = 0x1 << 1;
 8006046:	2302      	movs	r3, #2
 8006048:	60fb      	str	r3, [r7, #12]
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	6912      	ldr	r2, [r2, #16]
 8006052:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	43d2      	mvns	r2, r2
 8006058:	400a      	ands	r2, r1
 800605a:	635a      	str	r2, [r3, #52]	; 0x34
    CLEAR_IN_EP_INTR(1, xfercompl);
 800605c:	2300      	movs	r3, #0
 800605e:	60bb      	str	r3, [r7, #8]
 8006060:	7a3b      	ldrb	r3, [r7, #8]
 8006062:	f043 0301 	orr.w	r3, r3, #1
 8006066:	723b      	strb	r3, [r7, #8]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	69db      	ldr	r3, [r3, #28]
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	609a      	str	r2, [r3, #8]
    /* TX COMPLETE */
    USBD_DCD_INT_fops->DataInStage(pdev , 1);
 8006070:	4b2f      	ldr	r3, [pc, #188]	; (8006130 <USBD_OTG_EP1IN_ISR_Handler+0x128>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	2101      	movs	r1, #1
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	4798      	blx	r3
  }
  if ( diepint.b.epdisabled )
 800607c:	7a3b      	ldrb	r3, [r7, #8]
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	d009      	beq.n	800609c <USBD_OTG_EP1IN_ISR_Handler+0x94>
  {
    CLEAR_IN_EP_INTR(1, epdisabled);
 8006088:	2300      	movs	r3, #0
 800608a:	60bb      	str	r3, [r7, #8]
 800608c:	7a3b      	ldrb	r3, [r7, #8]
 800608e:	f043 0302 	orr.w	r3, r3, #2
 8006092:	723b      	strb	r3, [r7, #8]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	69db      	ldr	r3, [r3, #28]
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	609a      	str	r2, [r3, #8]
  }  
  if ( diepint.b.timeout )
 800609c:	7a3b      	ldrb	r3, [r7, #8]
 800609e:	f003 0308 	and.w	r3, r3, #8
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d009      	beq.n	80060bc <USBD_OTG_EP1IN_ISR_Handler+0xb4>
  {
    CLEAR_IN_EP_INTR(1, timeout);
 80060a8:	2300      	movs	r3, #0
 80060aa:	60bb      	str	r3, [r7, #8]
 80060ac:	7a3b      	ldrb	r3, [r7, #8]
 80060ae:	f043 0308 	orr.w	r3, r3, #8
 80060b2:	723b      	strb	r3, [r7, #8]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	69db      	ldr	r3, [r3, #28]
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	609a      	str	r2, [r3, #8]
  }
  if (diepint.b.intktxfemp)
 80060bc:	7a3b      	ldrb	r3, [r7, #8]
 80060be:	f003 0310 	and.w	r3, r3, #16
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d009      	beq.n	80060dc <USBD_OTG_EP1IN_ISR_Handler+0xd4>
  {
    CLEAR_IN_EP_INTR(1, intktxfemp);
 80060c8:	2300      	movs	r3, #0
 80060ca:	60bb      	str	r3, [r7, #8]
 80060cc:	7a3b      	ldrb	r3, [r7, #8]
 80060ce:	f043 0310 	orr.w	r3, r3, #16
 80060d2:	723b      	strb	r3, [r7, #8]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	69db      	ldr	r3, [r3, #28]
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	609a      	str	r2, [r3, #8]
  }
  if (diepint.b.inepnakeff)
 80060dc:	7a3b      	ldrb	r3, [r7, #8]
 80060de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d009      	beq.n	80060fc <USBD_OTG_EP1IN_ISR_Handler+0xf4>
  {
    CLEAR_IN_EP_INTR(1, inepnakeff);
 80060e8:	2300      	movs	r3, #0
 80060ea:	60bb      	str	r3, [r7, #8]
 80060ec:	7a3b      	ldrb	r3, [r7, #8]
 80060ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060f2:	723b      	strb	r3, [r7, #8]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	69db      	ldr	r3, [r3, #28]
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	609a      	str	r2, [r3, #8]
  }
  if (diepint.b.emptyintr)
 80060fc:	7a3b      	ldrb	r3, [r7, #8]
 80060fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006102:	b2db      	uxtb	r3, r3
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00d      	beq.n	8006124 <USBD_OTG_EP1IN_ISR_Handler+0x11c>
  {
    DCD_WriteEmptyTxFifo(pdev , 1);
 8006108:	2101      	movs	r1, #1
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 fbc2 	bl	8006894 <DCD_WriteEmptyTxFifo>
    CLEAR_IN_EP_INTR(1, emptyintr);
 8006110:	2300      	movs	r3, #0
 8006112:	60bb      	str	r3, [r7, #8]
 8006114:	7a3b      	ldrb	r3, [r7, #8]
 8006116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800611a:	723b      	strb	r3, [r7, #8]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	609a      	str	r2, [r3, #8]
  }
  return 1;
 8006124:	2301      	movs	r3, #1
}
 8006126:	4618      	mov	r0, r3
 8006128:	3718      	adds	r7, #24
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	2000005c 	.word	0x2000005c

08006134 <USBD_OTG_ISR_Handler>:
*         handles all USB Interrupts
* @param  pdev: device instance
* @retval status
*/
uint32_t USBD_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintr_status;
  uint32_t retval = 0;
 800613c:	2300      	movs	r3, #0
 800613e:	617b      	str	r3, [r7, #20]
  
  if (USB_OTG_IsDeviceMode(pdev)) /* ensure that we are in device mode */
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f7fe fe57 	bl	8004df4 <USB_OTG_IsDeviceMode>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	f000 80b6 	beq.w	80062ba <USBD_OTG_ISR_Handler+0x186>
  {
    gintr_status.d32 = USB_OTG_ReadCoreItr(pdev);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7fe fe61 	bl	8004e16 <USB_OTG_ReadCoreItr>
 8006154:	4603      	mov	r3, r0
 8006156:	613b      	str	r3, [r7, #16]
    if (!gintr_status.d32) /* avoid spurious interrupt */
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <USBD_OTG_ISR_Handler+0x2e>
    {
      return 0;
 800615e:	2300      	movs	r3, #0
 8006160:	e0ac      	b.n	80062bc <USBD_OTG_ISR_Handler+0x188>
    }
    
    if (gintr_status.b.outepintr)
 8006162:	7cbb      	ldrb	r3, [r7, #18]
 8006164:	f003 0308 	and.w	r3, r3, #8
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d006      	beq.n	800617c <USBD_OTG_ISR_Handler+0x48>
    {
      retval |= DCD_HandleOutEP_ISR(pdev);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fa4c 	bl	800660c <DCD_HandleOutEP_ISR>
 8006174:	4602      	mov	r2, r0
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	4313      	orrs	r3, r2
 800617a:	617b      	str	r3, [r7, #20]
    }    
    
    if (gintr_status.b.inepint)
 800617c:	7cbb      	ldrb	r3, [r7, #18]
 800617e:	f003 0304 	and.w	r3, r3, #4
 8006182:	b2db      	uxtb	r3, r3
 8006184:	2b00      	cmp	r3, #0
 8006186:	d006      	beq.n	8006196 <USBD_OTG_ISR_Handler+0x62>
    {
      retval |= DCD_HandleInEP_ISR(pdev);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 f971 	bl	8006470 <DCD_HandleInEP_ISR>
 800618e:	4602      	mov	r2, r0
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	4313      	orrs	r3, r2
 8006194:	617b      	str	r3, [r7, #20]
    }
    
    if (gintr_status.b.modemismatch)
 8006196:	7c3b      	ldrb	r3, [r7, #16]
 8006198:	f003 0302 	and.w	r3, r3, #2
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d009      	beq.n	80061b6 <USBD_OTG_ISR_Handler+0x82>
    {
      USB_OTG_GINTSTS_TypeDef  gintsts;
      
      /* Clear interrupt */
      gintsts.d32 = 0;
 80061a2:	2300      	movs	r3, #0
 80061a4:	60fb      	str	r3, [r7, #12]
      gintsts.b.modemismatch = 1;
 80061a6:	7b3b      	ldrb	r3, [r7, #12]
 80061a8:	f043 0302 	orr.w	r3, r3, #2
 80061ac:	733b      	strb	r3, [r7, #12]
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	615a      	str	r2, [r3, #20]
    }
    
    if (gintr_status.b.wkupintr)
 80061b6:	7cfb      	ldrb	r3, [r7, #19]
 80061b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d006      	beq.n	80061d0 <USBD_OTG_ISR_Handler+0x9c>
    {
      retval |= DCD_HandleResume_ISR(pdev);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f8b6 	bl	8006334 <DCD_HandleResume_ISR>
 80061c8:	4602      	mov	r2, r0
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	617b      	str	r3, [r7, #20]
    }
    
    if (gintr_status.b.usbsuspend)
 80061d0:	7c7b      	ldrb	r3, [r7, #17]
 80061d2:	f003 0308 	and.w	r3, r3, #8
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d006      	beq.n	80061ea <USBD_OTG_ISR_Handler+0xb6>
    {
      retval |= DCD_HandleUSBSuspend_ISR(pdev);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f8e9 	bl	80063b4 <DCD_HandleUSBSuspend_ISR>
 80061e2:	4602      	mov	r2, r0
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	617b      	str	r3, [r7, #20]
    }
    if (gintr_status.b.sofintr)
 80061ea:	7c3b      	ldrb	r3, [r7, #16]
 80061ec:	f003 0308 	and.w	r3, r3, #8
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d006      	beq.n	8006204 <USBD_OTG_ISR_Handler+0xd0>
    {
      retval |= DCD_HandleSof_ISR(pdev);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 fab0 	bl	800675c <DCD_HandleSof_ISR>
 80061fc:	4602      	mov	r2, r0
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	4313      	orrs	r3, r2
 8006202:	617b      	str	r3, [r7, #20]
      
    }
    
    if (gintr_status.b.rxstsqlvl)
 8006204:	7c3b      	ldrb	r3, [r7, #16]
 8006206:	f003 0310 	and.w	r3, r3, #16
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b00      	cmp	r3, #0
 800620e:	d006      	beq.n	800621e <USBD_OTG_ISR_Handler+0xea>
    {
      retval |= DCD_HandleRxStatusQueueLevel_ISR(pdev);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fabd 	bl	8006790 <DCD_HandleRxStatusQueueLevel_ISR>
 8006216:	4602      	mov	r2, r0
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	617b      	str	r3, [r7, #20]
      
    }
    
    if (gintr_status.b.usbreset)
 800621e:	7c7b      	ldrb	r3, [r7, #17]
 8006220:	f003 0310 	and.w	r3, r3, #16
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d006      	beq.n	8006238 <USBD_OTG_ISR_Handler+0x104>
    {
      retval |= DCD_HandleUsbReset_ISR(pdev);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fba4 	bl	8006978 <DCD_HandleUsbReset_ISR>
 8006230:	4602      	mov	r2, r0
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	4313      	orrs	r3, r2
 8006236:	617b      	str	r3, [r7, #20]
      
    }
    if (gintr_status.b.enumdone)
 8006238:	7c7b      	ldrb	r3, [r7, #17]
 800623a:	f003 0320 	and.w	r3, r3, #32
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b00      	cmp	r3, #0
 8006242:	d006      	beq.n	8006252 <USBD_OTG_ISR_Handler+0x11e>
    {
      retval |= DCD_HandleEnumDone_ISR(pdev);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fc2f 	bl	8006aa8 <DCD_HandleEnumDone_ISR>
 800624a:	4602      	mov	r2, r0
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	4313      	orrs	r3, r2
 8006250:	617b      	str	r3, [r7, #20]
    }
    
    if (gintr_status.b.incomplisoin)
 8006252:	7cbb      	ldrb	r3, [r7, #18]
 8006254:	f003 0310 	and.w	r3, r3, #16
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d006      	beq.n	800626c <USBD_OTG_ISR_Handler+0x138>
    {
      retval |= DCD_IsoINIncomplete_ISR(pdev);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 fc5e 	bl	8006b20 <DCD_IsoINIncomplete_ISR>
 8006264:	4602      	mov	r2, r0
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	4313      	orrs	r3, r2
 800626a:	617b      	str	r3, [r7, #20]
    }

    if (gintr_status.b.incomplisoout)
 800626c:	7cbb      	ldrb	r3, [r7, #18]
 800626e:	f003 0320 	and.w	r3, r3, #32
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b00      	cmp	r3, #0
 8006276:	d006      	beq.n	8006286 <USBD_OTG_ISR_Handler+0x152>
    {
      retval |= DCD_IsoOUTIncomplete_ISR(pdev);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 fc6b 	bl	8006b54 <DCD_IsoOUTIncomplete_ISR>
 800627e:	4602      	mov	r2, r0
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	4313      	orrs	r3, r2
 8006284:	617b      	str	r3, [r7, #20]
    }    
#ifdef VBUS_SENSING_ENABLED
    if (gintr_status.b.sessreqintr)
 8006286:	7cfb      	ldrb	r3, [r7, #19]
 8006288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d006      	beq.n	80062a0 <USBD_OTG_ISR_Handler+0x16c>
    {
      retval |= DCD_SessionRequest_ISR(pdev);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f816 	bl	80062c4 <DCD_SessionRequest_ISR>
 8006298:	4602      	mov	r2, r0
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	4313      	orrs	r3, r2
 800629e:	617b      	str	r3, [r7, #20]
    }

    if (gintr_status.b.otgintr)
 80062a0:	7c3b      	ldrb	r3, [r7, #16]
 80062a2:	f003 0304 	and.w	r3, r3, #4
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d006      	beq.n	80062ba <USBD_OTG_ISR_Handler+0x186>
    {
      retval |= DCD_OTG_ISR(pdev);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f823 	bl	80062f8 <DCD_OTG_ISR>
 80062b2:	4602      	mov	r2, r0
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	617b      	str	r3, [r7, #20]
    }   
#endif    
  }
  return retval;
 80062ba:	697b      	ldr	r3, [r7, #20]
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3718      	adds	r7, #24
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <DCD_SessionRequest_ISR>:
*         Indicates that the USB_OTG controller has detected a connection
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_SessionRequest_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;  
  USBD_DCD_INT_fops->DevConnected (pdev);
 80062cc:	4b09      	ldr	r3, [pc, #36]	; (80062f4 <DCD_SessionRequest_ISR+0x30>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	4798      	blx	r3

  /* Clear interrupt */
  gintsts.d32 = 0;
 80062d6:	2300      	movs	r3, #0
 80062d8:	60fb      	str	r3, [r7, #12]
  gintsts.b.sessreqintr = 1;
 80062da:	7bfb      	ldrb	r3, [r7, #15]
 80062dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062e0:	73fb      	strb	r3, [r7, #15]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);   
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	615a      	str	r2, [r3, #20]
  return 1;
 80062ea:	2301      	movs	r3, #1
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	2000005c 	.word	0x2000005c

080062f8 <DCD_OTG_ISR>:
*                 used to detect the end of session i.e. disconnection
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_OTG_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]

  USB_OTG_GOTGINT_TypeDef  gotgint;

  gotgint.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGINT);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	60fb      	str	r3, [r7, #12]
  
  if (gotgint.b.sesenddet)
 8006308:	7b3b      	ldrb	r3, [r7, #12]
 800630a:	f003 0304 	and.w	r3, r3, #4
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b00      	cmp	r3, #0
 8006312:	d004      	beq.n	800631e <DCD_OTG_ISR+0x26>
  {
    USBD_DCD_INT_fops->DevDisconnected (pdev);
 8006314:	4b06      	ldr	r3, [pc, #24]	; (8006330 <DCD_OTG_ISR+0x38>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	4798      	blx	r3
  }
  /* Clear OTG interrupt */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GOTGINT, gotgint.d32); 
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	605a      	str	r2, [r3, #4]
  return 1;
 8006326:	2301      	movs	r3, #1
}
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	2000005c 	.word	0x2000005c

08006334 <DCD_HandleResume_ISR>:
*                 remote Wake-up sequence
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleResume_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_DCTL_TypeDef     devctl;
  USB_OTG_PCGCCTL_TypeDef  power;
  
  if(pdev->cfg.low_power)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	7a9b      	ldrb	r3, [r3, #10]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d011      	beq.n	8006368 <DCD_HandleResume_ISR+0x34>
  {
    /* un-gate USB Core clock */
    power.d32 = USB_OTG_READ_REG32(&pdev->regs.PCGCCTL);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	60fb      	str	r3, [r7, #12]
    power.b.gatehclk = 0;
 800634e:	7b3b      	ldrb	r3, [r7, #12]
 8006350:	f36f 0341 	bfc	r3, #1, #1
 8006354:	733b      	strb	r3, [r7, #12]
    power.b.stoppclk = 0;
 8006356:	7b3b      	ldrb	r3, [r7, #12]
 8006358:	f36f 0300 	bfc	r3, #0, #1
 800635c:	733b      	strb	r3, [r7, #12]
    USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	601a      	str	r2, [r3, #0]
  }
  
  /* Clear the Remote Wake-up Signaling */
  devctl.d32 = 0;
 8006368:	2300      	movs	r3, #0
 800636a:	613b      	str	r3, [r7, #16]
  devctl.b.rmtwkupsig = 1;
 800636c:	7c3b      	ldrb	r3, [r7, #16]
 800636e:	f043 0301 	orr.w	r3, r3, #1
 8006372:	743b      	strb	r3, [r7, #16]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, devctl.d32, 0);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	6912      	ldr	r2, [r2, #16]
 800637c:	6851      	ldr	r1, [r2, #4]
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	43d2      	mvns	r2, r2
 8006382:	400a      	ands	r2, r1
 8006384:	605a      	str	r2, [r3, #4]
  
  /* Inform upper layer by the Resume Event */
  USBD_DCD_INT_fops->Resume (pdev);
 8006386:	4b0a      	ldr	r3, [pc, #40]	; (80063b0 <DCD_HandleResume_ISR+0x7c>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.d32 = 0;
 8006390:	2300      	movs	r3, #0
 8006392:	617b      	str	r3, [r7, #20]
  gintsts.b.wkupintr = 1;
 8006394:	7dfb      	ldrb	r3, [r7, #23]
 8006396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800639a:	75fb      	strb	r3, [r7, #23]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	615a      	str	r2, [r3, #20]
  return 1;
 80063a4:	2301      	movs	r3, #1
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3718      	adds	r7, #24
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	2000005c 	.word	0x2000005c

080063b4 <DCD_HandleUSBSuspend_ISR>:
*         Indicates that SUSPEND state has been detected on the USB
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleUSBSuspend_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_PCGCCTL_TypeDef  power;
  USB_OTG_DSTS_TypeDef     dsts;
  __IO uint8_t prev_status = 0;
 80063bc:	2300      	movs	r3, #0
 80063be:	72fb      	strb	r3, [r7, #11]
  
  prev_status = pdev->dev.device_status;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80063c6:	72fb      	strb	r3, [r7, #11]
  USBD_DCD_INT_fops->Suspend (pdev);      
 80063c8:	4b27      	ldr	r3, [pc, #156]	; (8006468 <DCD_HandleUSBSuspend_ISR+0xb4>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	4798      	blx	r3
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	60fb      	str	r3, [r7, #12]
    
  /* Clear interrupt */
  gintsts.d32 = 0;
 80063da:	2300      	movs	r3, #0
 80063dc:	617b      	str	r3, [r7, #20]
  gintsts.b.usbsuspend = 1;
 80063de:	7d7b      	ldrb	r3, [r7, #21]
 80063e0:	f043 0308 	orr.w	r3, r3, #8
 80063e4:	757b      	strb	r3, [r7, #21]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	615a      	str	r2, [r3, #20]
  
  if((pdev->cfg.low_power) && (dsts.b.suspsts == 1)  && 
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	7a9b      	ldrb	r3, [r3, #10]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d032      	beq.n	800645c <DCD_HandleUSBSuspend_ISR+0xa8>
 80063f6:	7b3b      	ldrb	r3, [r7, #12]
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d02c      	beq.n	800645c <DCD_HandleUSBSuspend_ISR+0xa8>
    (pdev->dev.connection_status == 1) && 
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
  if((pdev->cfg.low_power) && (dsts.b.suspsts == 1)  && 
 8006408:	2b01      	cmp	r3, #1
 800640a:	d127      	bne.n	800645c <DCD_HandleUSBSuspend_ISR+0xa8>
    (prev_status  == USB_OTG_CONFIGURED))
 800640c:	7afb      	ldrb	r3, [r7, #11]
 800640e:	b2db      	uxtb	r3, r3
    (pdev->dev.connection_status == 1) && 
 8006410:	2b03      	cmp	r3, #3
 8006412:	d123      	bne.n	800645c <DCD_HandleUSBSuspend_ISR+0xa8>
  {
	/*  switch-off the clocks */
    power.d32 = 0;
 8006414:	2300      	movs	r3, #0
 8006416:	613b      	str	r3, [r7, #16]
    power.b.stoppclk = 1;
 8006418:	7c3b      	ldrb	r3, [r7, #16]
 800641a:	f043 0301 	orr.w	r3, r3, #1
 800641e:	743b      	strb	r3, [r7, #16]
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);  
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 800642c:	6811      	ldr	r1, [r2, #0]
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	430a      	orrs	r2, r1
 8006432:	601a      	str	r2, [r3, #0]
    
    power.b.gatehclk = 1;
 8006434:	7c3b      	ldrb	r3, [r7, #16]
 8006436:	f043 0302 	orr.w	r3, r3, #2
 800643a:	743b      	strb	r3, [r7, #16]
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 8006448:	6811      	ldr	r1, [r2, #0]
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	430a      	orrs	r2, r1
 800644e:	601a      	str	r2, [r3, #0]
    
    /* Request to enter Sleep mode after exit from current ISR */
    SCB->SCR |= (SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk);
 8006450:	4a06      	ldr	r2, [pc, #24]	; (800646c <DCD_HandleUSBSuspend_ISR+0xb8>)
 8006452:	4b06      	ldr	r3, [pc, #24]	; (800646c <DCD_HandleUSBSuspend_ISR+0xb8>)
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f043 0306 	orr.w	r3, r3, #6
 800645a:	6113      	str	r3, [r2, #16]
  }
  return 1;
 800645c:	2301      	movs	r3, #1
}
 800645e:	4618      	mov	r0, r3
 8006460:	3718      	adds	r7, #24
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	2000005c 	.word	0x2000005c
 800646c:	e000ed00 	.word	0xe000ed00

08006470 <DCD_HandleInEP_ISR>:
*         Indicates that an IN EP has a pending Interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleInEP_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  USB_OTG_DIEPINTn_TypeDef  diepint;
  
  uint32_t ep_intr;
  uint32_t epnum = 0;
 8006478:	2300      	movs	r3, #0
 800647a:	613b      	str	r3, [r7, #16]
  uint32_t fifoemptymsk;
  diepint.d32 = 0;
 800647c:	2300      	movs	r3, #0
 800647e:	60bb      	str	r3, [r7, #8]
  ep_intr = USB_OTG_ReadDevAllInEPItr(pdev);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f7ff fab2 	bl	80059ea <USB_OTG_ReadDevAllInEPItr>
 8006486:	6178      	str	r0, [r7, #20]
  
  while ( ep_intr )
 8006488:	e0b4      	b.n	80065f4 <DCD_HandleInEP_ISR+0x184>
  {
    if (ep_intr&0x1) /* In ITR */
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 80a9 	beq.w	80065e8 <DCD_HandleInEP_ISR+0x178>
    {
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	b2db      	uxtb	r3, r3
 800649a:	4619      	mov	r1, r3
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 fb73 	bl	8006b88 <DCD_ReadDevInEP>
 80064a2:	4603      	mov	r3, r0
 80064a4:	60bb      	str	r3, [r7, #8]
      if ( diepint.b.xfercompl )
 80064a6:	7a3b      	ldrb	r3, [r7, #8]
 80064a8:	f003 0301 	and.w	r3, r3, #1
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d032      	beq.n	8006518 <DCD_HandleInEP_ISR+0xa8>
      {
        fifoemptymsk = 0x1 << epnum;
 80064b2:	2201      	movs	r2, #1
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ba:	60fb      	str	r3, [r7, #12]
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	6912      	ldr	r2, [r2, #16]
 80064c4:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	43d2      	mvns	r2, r2
 80064ca:	400a      	ands	r2, r1
 80064cc:	635a      	str	r2, [r3, #52]	; 0x34
        CLEAR_IN_EP_INTR(epnum, xfercompl);
 80064ce:	2300      	movs	r3, #0
 80064d0:	60bb      	str	r3, [r7, #8]
 80064d2:	7a3b      	ldrb	r3, [r7, #8]
 80064d4:	f043 0301 	orr.w	r3, r3, #1
 80064d8:	723b      	strb	r3, [r7, #8]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	3304      	adds	r3, #4
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	4413      	add	r3, r2
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	609a      	str	r2, [r3, #8]
        /* TX COMPLETE */
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 80064ea:	4b47      	ldr	r3, [pc, #284]	; (8006608 <DCD_HandleInEP_ISR+0x198>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	4611      	mov	r1, r2
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	4798      	blx	r3
        
        if (pdev->cfg.dma_enable == 1)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	78db      	ldrb	r3, [r3, #3]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d10a      	bne.n	8006518 <DCD_HandleInEP_ISR+0xa8>
        {
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_IN))
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d107      	bne.n	8006518 <DCD_HandleInEP_ISR+0xa8>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800650e:	2b04      	cmp	r3, #4
 8006510:	d102      	bne.n	8006518 <DCD_HandleInEP_ISR+0xa8>
          {
            /* prepare to rx more setup packets */
            USB_OTG_EP0_OutStart(pdev);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7ff fa7f 	bl	8005a16 <USB_OTG_EP0_OutStart>
          }
        }           
      }
      if ( diepint.b.timeout )
 8006518:	7a3b      	ldrb	r3, [r7, #8]
 800651a:	f003 0308 	and.w	r3, r3, #8
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00d      	beq.n	8006540 <DCD_HandleInEP_ISR+0xd0>
      {
        CLEAR_IN_EP_INTR(epnum, timeout);
 8006524:	2300      	movs	r3, #0
 8006526:	60bb      	str	r3, [r7, #8]
 8006528:	7a3b      	ldrb	r3, [r7, #8]
 800652a:	f043 0308 	orr.w	r3, r3, #8
 800652e:	723b      	strb	r3, [r7, #8]
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	3304      	adds	r3, #4
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4413      	add	r3, r2
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	609a      	str	r2, [r3, #8]
      }
      if (diepint.b.intktxfemp)
 8006540:	7a3b      	ldrb	r3, [r7, #8]
 8006542:	f003 0310 	and.w	r3, r3, #16
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00d      	beq.n	8006568 <DCD_HandleInEP_ISR+0xf8>
      {
        CLEAR_IN_EP_INTR(epnum, intktxfemp);
 800654c:	2300      	movs	r3, #0
 800654e:	60bb      	str	r3, [r7, #8]
 8006550:	7a3b      	ldrb	r3, [r7, #8]
 8006552:	f043 0310 	orr.w	r3, r3, #16
 8006556:	723b      	strb	r3, [r7, #8]
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	3304      	adds	r3, #4
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	609a      	str	r2, [r3, #8]
      }
      if (diepint.b.inepnakeff)
 8006568:	7a3b      	ldrb	r3, [r7, #8]
 800656a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00d      	beq.n	8006590 <DCD_HandleInEP_ISR+0x120>
      {
        CLEAR_IN_EP_INTR(epnum, inepnakeff);
 8006574:	2300      	movs	r3, #0
 8006576:	60bb      	str	r3, [r7, #8]
 8006578:	7a3b      	ldrb	r3, [r7, #8]
 800657a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800657e:	723b      	strb	r3, [r7, #8]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	3304      	adds	r3, #4
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	609a      	str	r2, [r3, #8]
      }
      if ( diepint.b.epdisabled )
 8006590:	7a3b      	ldrb	r3, [r7, #8]
 8006592:	f003 0302 	and.w	r3, r3, #2
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00d      	beq.n	80065b8 <DCD_HandleInEP_ISR+0x148>
      {
        CLEAR_IN_EP_INTR(epnum, epdisabled);
 800659c:	2300      	movs	r3, #0
 800659e:	60bb      	str	r3, [r7, #8]
 80065a0:	7a3b      	ldrb	r3, [r7, #8]
 80065a2:	f043 0302 	orr.w	r3, r3, #2
 80065a6:	723b      	strb	r3, [r7, #8]
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	3304      	adds	r3, #4
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4413      	add	r3, r2
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	609a      	str	r2, [r3, #8]
      }       
      if (diepint.b.emptyintr)
 80065b8:	7a3b      	ldrb	r3, [r7, #8]
 80065ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d011      	beq.n	80065e8 <DCD_HandleInEP_ISR+0x178>
      {
        
        DCD_WriteEmptyTxFifo(pdev , epnum);
 80065c4:	6939      	ldr	r1, [r7, #16]
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f964 	bl	8006894 <DCD_WriteEmptyTxFifo>
        
        CLEAR_IN_EP_INTR(epnum, emptyintr);
 80065cc:	2300      	movs	r3, #0
 80065ce:	60bb      	str	r3, [r7, #8]
 80065d0:	7a3b      	ldrb	r3, [r7, #8]
 80065d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065d6:	723b      	strb	r3, [r7, #8]
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	3304      	adds	r3, #4
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4413      	add	r3, r2
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	609a      	str	r2, [r3, #8]
      }
    }
    epnum++;
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	3301      	adds	r3, #1
 80065ec:	613b      	str	r3, [r7, #16]
    ep_intr >>= 1;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	085b      	lsrs	r3, r3, #1
 80065f2:	617b      	str	r3, [r7, #20]
  while ( ep_intr )
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f47f af47 	bne.w	800648a <DCD_HandleInEP_ISR+0x1a>
  }
  
  return 1;
 80065fc:	2301      	movs	r3, #1
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3718      	adds	r7, #24
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	2000005c 	.word	0x2000005c

0800660c <DCD_HandleOutEP_ISR>:
*         Indicates that an OUT EP has a pending Interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleOutEP_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  uint32_t ep_intr;
  USB_OTG_DOEPINTn_TypeDef  doepint;
  USB_OTG_DEPXFRSIZ_TypeDef  deptsiz;
  uint32_t epnum = 0;
 8006614:	2300      	movs	r3, #0
 8006616:	613b      	str	r3, [r7, #16]
  
  doepint.d32 = 0;
 8006618:	2300      	movs	r3, #0
 800661a:	60fb      	str	r3, [r7, #12]
  
  /* Read in the device interrupt bits */
  ep_intr = USB_OTG_ReadDevAllOutEp_itr(pdev);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7ff f9b3 	bl	8005988 <USB_OTG_ReadDevAllOutEp_itr>
 8006622:	6178      	str	r0, [r7, #20]
  
  while ( ep_intr )
 8006624:	e08f      	b.n	8006746 <DCD_HandleOutEP_ISR+0x13a>
  {
    if (ep_intr&0x1)
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	f000 8084 	beq.w	800673a <DCD_HandleOutEP_ISR+0x12e>
    {
      
      doepint.d32 = USB_OTG_ReadDevOutEP_itr(pdev, epnum);
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	b2db      	uxtb	r3, r3
 8006636:	4619      	mov	r1, r3
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7ff f9bb 	bl	80059b4 <USB_OTG_ReadDevOutEP_itr>
 800663e:	4603      	mov	r3, r0
 8006640:	60fb      	str	r3, [r7, #12]
      
      /* Transfer complete */
      if ( doepint.b.xfercompl )
 8006642:	7b3b      	ldrb	r3, [r7, #12]
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d048      	beq.n	80066e0 <DCD_HandleOutEP_ISR+0xd4>
      {
        /* Clear the bit in DOEPINTn for this interrupt */
        CLEAR_OUT_EP_INTR(epnum, xfercompl);
 800664e:	2300      	movs	r3, #0
 8006650:	60fb      	str	r3, [r7, #12]
 8006652:	7b3b      	ldrb	r3, [r7, #12]
 8006654:	f043 0301 	orr.w	r3, r3, #1
 8006658:	733b      	strb	r3, [r7, #12]
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	3314      	adds	r3, #20
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4413      	add	r3, r2
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	609a      	str	r2, [r3, #8]
        if (pdev->cfg.dma_enable == 1)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	78db      	ldrb	r3, [r3, #3]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d11f      	bne.n	80066b2 <DCD_HandleOutEP_ISR+0xa6>
        {
          deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[epnum]->DOEPTSIZ));
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	3314      	adds	r3, #20
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4413      	add	r3, r2
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	60bb      	str	r3, [r7, #8]
          /*ToDo : handle more than one single MPS size packet */
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 8006682:	6879      	ldr	r1, [r7, #4]
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	4613      	mov	r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4413      	add	r3, r2
 800668c:	00db      	lsls	r3, r3, #3
 800668e:	440b      	add	r3, r1
 8006690:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8006694:	681b      	ldr	r3, [r3, #0]
            deptsiz.b.xfersize;
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	f3c2 0212 	ubfx	r2, r2, #0, #19
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 800669c:	1a99      	subs	r1, r3, r2
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	4613      	mov	r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4413      	add	r3, r2
 80066a8:	00db      	lsls	r3, r3, #3
 80066aa:	4403      	add	r3, r0
 80066ac:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 80066b0:	6019      	str	r1, [r3, #0]
        }
        /* Inform upper layer: data ready */
        /* RX COMPLETE */
        USBD_DCD_INT_fops->DataOutStage(pdev , epnum);
 80066b2:	4b29      	ldr	r3, [pc, #164]	; (8006758 <DCD_HandleOutEP_ISR+0x14c>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	b2d2      	uxtb	r2, r2
 80066bc:	4611      	mov	r1, r2
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	4798      	blx	r3
        
        if (pdev->cfg.dma_enable == 1)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	78db      	ldrb	r3, [r3, #3]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d10a      	bne.n	80066e0 <DCD_HandleOutEP_ISR+0xd4>
        {
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_OUT))
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d107      	bne.n	80066e0 <DCD_HandleOutEP_ISR+0xd4>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 80066d6:	2b05      	cmp	r3, #5
 80066d8:	d102      	bne.n	80066e0 <DCD_HandleOutEP_ISR+0xd4>
          {
            /* prepare to rx more setup packets */
            USB_OTG_EP0_OutStart(pdev);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7ff f99b 	bl	8005a16 <USB_OTG_EP0_OutStart>
          }
        }        
      }
      /* Endpoint disable  */
      if ( doepint.b.epdisabled )
 80066e0:	7b3b      	ldrb	r3, [r7, #12]
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00d      	beq.n	8006708 <DCD_HandleOutEP_ISR+0xfc>
      {
        /* Clear the bit in DOEPINTn for this interrupt */
        CLEAR_OUT_EP_INTR(epnum, epdisabled);
 80066ec:	2300      	movs	r3, #0
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	7b3b      	ldrb	r3, [r7, #12]
 80066f2:	f043 0302 	orr.w	r3, r3, #2
 80066f6:	733b      	strb	r3, [r7, #12]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	3314      	adds	r3, #20
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	609a      	str	r2, [r3, #8]
      }
      /* Setup Phase Done (control EPs) */
      if ( doepint.b.setup )
 8006708:	7b3b      	ldrb	r3, [r7, #12]
 800670a:	f003 0308 	and.w	r3, r3, #8
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b00      	cmp	r3, #0
 8006712:	d012      	beq.n	800673a <DCD_HandleOutEP_ISR+0x12e>
      {
        
        /* inform the upper layer that a setup packet is available */
        /* SETUP COMPLETE */
        USBD_DCD_INT_fops->SetupStage(pdev);
 8006714:	4b10      	ldr	r3, [pc, #64]	; (8006758 <DCD_HandleOutEP_ISR+0x14c>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	4798      	blx	r3
        CLEAR_OUT_EP_INTR(epnum, setup);
 800671e:	2300      	movs	r3, #0
 8006720:	60fb      	str	r3, [r7, #12]
 8006722:	7b3b      	ldrb	r3, [r7, #12]
 8006724:	f043 0308 	orr.w	r3, r3, #8
 8006728:	733b      	strb	r3, [r7, #12]
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	3314      	adds	r3, #20
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4413      	add	r3, r2
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	609a      	str	r2, [r3, #8]
      }
    }
    epnum++;
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	3301      	adds	r3, #1
 800673e:	613b      	str	r3, [r7, #16]
    ep_intr >>= 1;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	085b      	lsrs	r3, r3, #1
 8006744:	617b      	str	r3, [r7, #20]
  while ( ep_intr )
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	2b00      	cmp	r3, #0
 800674a:	f47f af6c 	bne.w	8006626 <DCD_HandleOutEP_ISR+0x1a>
  }
  return 1;
 800674e:	2301      	movs	r3, #1
}
 8006750:	4618      	mov	r0, r3
 8006752:	3718      	adds	r7, #24
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	2000005c 	.word	0x2000005c

0800675c <DCD_HandleSof_ISR>:
*         Handles the SOF Interrupts
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleSof_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  GINTSTS;
  
  
  USBD_DCD_INT_fops->SOF(pdev);
 8006764:	4b09      	ldr	r3, [pc, #36]	; (800678c <DCD_HandleSof_ISR+0x30>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	4798      	blx	r3
  
  /* Clear interrupt */
  GINTSTS.d32 = 0;
 800676e:	2300      	movs	r3, #0
 8006770:	60fb      	str	r3, [r7, #12]
  GINTSTS.b.sofintr = 1;
 8006772:	7b3b      	ldrb	r3, [r7, #12]
 8006774:	f043 0308 	orr.w	r3, r3, #8
 8006778:	733b      	strb	r3, [r7, #12]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, GINTSTS.d32);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	615a      	str	r2, [r3, #20]
  
  return 1;
 8006782:	2301      	movs	r3, #1
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	2000005c 	.word	0x2000005c

08006790 <DCD_HandleRxStatusQueueLevel_ISR>:
*         Handles the Rx Status Queue Level Interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleRxStatusQueueLevel_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef  int_mask;
  USB_OTG_DRXSTS_TypeDef   status;
  USB_OTG_EP *ep;
  
  /* Disable the Rx Status Queue Level interrupt */
  int_mask.d32 = 0;
 8006798:	2300      	movs	r3, #0
 800679a:	613b      	str	r3, [r7, #16]
  int_mask.b.rxstsqlvl = 1;
 800679c:	7c3b      	ldrb	r3, [r7, #16]
 800679e:	f043 0310 	orr.w	r3, r3, #16
 80067a2:	743b      	strb	r3, [r7, #16]
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32, 0);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	68d2      	ldr	r2, [r2, #12]
 80067ac:	6991      	ldr	r1, [r2, #24]
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	43d2      	mvns	r2, r2
 80067b2:	400a      	ands	r2, r1
 80067b4:	619a      	str	r2, [r3, #24]
  
  /* Get the Status from the top of the FIFO */
  status.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRXSTSP );
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	6a1b      	ldr	r3, [r3, #32]
 80067bc:	60fb      	str	r3, [r7, #12]
  
  ep = &pdev->dev.out_ep[status.b.epnum];
 80067be:	7b3b      	ldrb	r3, [r7, #12]
 80067c0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	461a      	mov	r2, r3
 80067c8:	4613      	mov	r3, r2
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4413      	add	r3, r2
 80067ce:	00db      	lsls	r3, r3, #3
 80067d0:	f503 735c 	add.w	r3, r3, #880	; 0x370
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	4413      	add	r3, r2
 80067d8:	3304      	adds	r3, #4
 80067da:	617b      	str	r3, [r7, #20]
  
  switch (status.b.pktsts)
 80067dc:	7bbb      	ldrb	r3, [r7, #14]
 80067de:	f3c3 0343 	ubfx	r3, r3, #1, #4
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	3b01      	subs	r3, #1
 80067e6:	2b05      	cmp	r3, #5
 80067e8:	d844      	bhi.n	8006874 <DCD_HandleRxStatusQueueLevel_ISR+0xe4>
 80067ea:	a201      	add	r2, pc, #4	; (adr r2, 80067f0 <DCD_HandleRxStatusQueueLevel_ISR+0x60>)
 80067ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f0:	08006875 	.word	0x08006875
 80067f4:	08006809 	.word	0x08006809
 80067f8:	08006875 	.word	0x08006875
 80067fc:	08006875 	.word	0x08006875
 8006800:	08006875 	.word	0x08006875
 8006804:	08006851 	.word	0x08006851
  {
  case STS_GOUT_NAK:
    break;
  case STS_DATA_UPDT:
    if (status.b.bcnt)
 8006808:	89ba      	ldrh	r2, [r7, #12]
 800680a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800680e:	4013      	ands	r3, r2
 8006810:	b29b      	uxth	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d030      	beq.n	8006878 <DCD_HandleRxStatusQueueLevel_ISR+0xe8>
    {
      USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	68d9      	ldr	r1, [r3, #12]
 800681a:	89bb      	ldrh	r3, [r7, #12]
 800681c:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8006820:	b29b      	uxth	r3, r3
 8006822:	461a      	mov	r2, r3
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f7fe f87c 	bl	8004922 <USB_OTG_ReadPacket>
      ep->xfer_buff += status.b.bcnt;
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	89ba      	ldrh	r2, [r7, #12]
 8006830:	f3c2 120a 	ubfx	r2, r2, #4, #11
 8006834:	b292      	uxth	r2, r2
 8006836:	441a      	add	r2, r3
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	60da      	str	r2, [r3, #12]
      ep->xfer_count += status.b.bcnt;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	89ba      	ldrh	r2, [r7, #12]
 8006842:	f3c2 120a 	ubfx	r2, r2, #4, #11
 8006846:	b292      	uxth	r2, r2
 8006848:	441a      	add	r2, r3
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	619a      	str	r2, [r3, #24]
    }
    break;
 800684e:	e013      	b.n	8006878 <DCD_HandleRxStatusQueueLevel_ISR+0xe8>
    break;
  case STS_SETUP_COMP:
    break;
  case STS_SETUP_UPDT:
    /* Copy the setup packet received in FIFO into the setup buffer in RAM */
    USB_OTG_ReadPacket(pdev , pdev->dev.setup_packet, 8);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f203 53cc 	addw	r3, r3, #1484	; 0x5cc
 8006856:	2208      	movs	r2, #8
 8006858:	4619      	mov	r1, r3
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f7fe f861 	bl	8004922 <USB_OTG_ReadPacket>
    ep->xfer_count += status.b.bcnt;
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	89ba      	ldrh	r2, [r7, #12]
 8006866:	f3c2 120a 	ubfx	r2, r2, #4, #11
 800686a:	b292      	uxth	r2, r2
 800686c:	441a      	add	r2, r3
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	619a      	str	r2, [r3, #24]
    break;
 8006872:	e002      	b.n	800687a <DCD_HandleRxStatusQueueLevel_ISR+0xea>
  default:
    break;
 8006874:	bf00      	nop
 8006876:	e000      	b.n	800687a <DCD_HandleRxStatusQueueLevel_ISR+0xea>
    break;
 8006878:	bf00      	nop
  }
  
  /* Enable the Rx Status Queue Level interrupt */
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, int_mask.d32);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	68d2      	ldr	r2, [r2, #12]
 8006882:	6991      	ldr	r1, [r2, #24]
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	430a      	orrs	r2, r1
 8006888:	619a      	str	r2, [r3, #24]
  
  return 1;
 800688a:	2301      	movs	r3, #1
}
 800688c:	4618      	mov	r0, r3
 800688e:	3718      	adds	r7, #24
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <DCD_WriteEmptyTxFifo>:
*         check FIFO for the next packet to be loaded
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_WriteEmptyTxFifo(USB_OTG_CORE_HANDLE *pdev, uint32_t epnum)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  USB_OTG_DTXFSTSn_TypeDef  txstatus;
  USB_OTG_EP *ep;
  uint32_t len = 0;
 800689e:	2300      	movs	r3, #0
 80068a0:	617b      	str	r3, [r7, #20]
  uint32_t len32b;
  txstatus.d32 = 0;
 80068a2:	2300      	movs	r3, #0
 80068a4:	60bb      	str	r3, [r7, #8]
  
  ep = &pdev->dev.in_ep[epnum];    
 80068a6:	683a      	ldr	r2, [r7, #0]
 80068a8:	4613      	mov	r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4413      	add	r3, r2
 80068ae:	00db      	lsls	r3, r3, #3
 80068b0:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	4413      	add	r3, r2
 80068b8:	3304      	adds	r3, #4
 80068ba:	60fb      	str	r3, [r7, #12]
  
  len = ep->xfer_len - ep->xfer_count;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	695a      	ldr	r2, [r3, #20]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	617b      	str	r3, [r7, #20]
  
  if (len > ep->maxpacket)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	689a      	ldr	r2, [r3, #8]
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d202      	bcs.n	80068d8 <DCD_WriteEmptyTxFifo+0x44>
  {
    len = ep->maxpacket;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	617b      	str	r3, [r7, #20]
  }
  
  len32b = (len + 3) / 4;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	3303      	adds	r3, #3
 80068dc:	089b      	lsrs	r3, r3, #2
 80068de:	613b      	str	r3, [r7, #16]
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	3304      	adds	r3, #4
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4413      	add	r3, r2
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	60bb      	str	r3, [r7, #8]
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
 80068f0:	e02e      	b.n	8006950 <DCD_WriteEmptyTxFifo+0xbc>
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	695a      	ldr	r2, [r3, #20]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	617b      	str	r3, [r7, #20]
    
    if (len > ep->maxpacket)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	689a      	ldr	r2, [r3, #8]
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	429a      	cmp	r2, r3
 8006906:	d202      	bcs.n	800690e <DCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	617b      	str	r3, [r7, #20]
    }
    len32b = (len + 3) / 4;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	3303      	adds	r3, #3
 8006912:	089b      	lsrs	r3, r3, #2
 8006914:	613b      	str	r3, [r7, #16]
    
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	68d9      	ldr	r1, [r3, #12]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	b2da      	uxtb	r2, r3
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	b29b      	uxth	r3, r3
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7fd ffc2 	bl	80048ac <USB_OTG_WritePacket>
    
    ep->xfer_buff  += len;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	68da      	ldr	r2, [r3, #12]
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	441a      	add	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	699a      	ldr	r2, [r3, #24]
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	441a      	add	r2, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	619a      	str	r2, [r3, #24]
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	3304      	adds	r3, #4
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	60bb      	str	r3, [r7, #8]
  while  (txstatus.b.txfspcavail > len32b &&
 8006950:	893b      	ldrh	r3, [r7, #8]
 8006952:	461a      	mov	r2, r3
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	429a      	cmp	r2, r3
 8006958:	d909      	bls.n	800696e <DCD_WriteEmptyTxFifo+0xda>
          ep->xfer_count < ep->xfer_len &&
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	699a      	ldr	r2, [r3, #24]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	695b      	ldr	r3, [r3, #20]
  while  (txstatus.b.txfspcavail > len32b &&
 8006962:	429a      	cmp	r2, r3
 8006964:	d203      	bcs.n	800696e <DCD_WriteEmptyTxFifo+0xda>
            ep->xfer_len != 0)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	695b      	ldr	r3, [r3, #20]
          ep->xfer_count < ep->xfer_len &&
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1c1      	bne.n	80068f2 <DCD_WriteEmptyTxFifo+0x5e>
  }
  
  return 1;
 800696e:	2301      	movs	r3, #1
}
 8006970:	4618      	mov	r0, r3
 8006972:	3718      	adds	r7, #24
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <DCD_HandleUsbReset_ISR>:
*         This interrupt occurs when a USB Reset is detected
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleUsbReset_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b08a      	sub	sp, #40	; 0x28
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  USB_OTG_DCFG_TypeDef     dcfg;
  USB_OTG_DCTL_TypeDef     dctl;
  USB_OTG_GINTSTS_TypeDef  gintsts;
  uint32_t i;
  
  dctl.d32 = 0;
 8006980:	2300      	movs	r3, #0
 8006982:	613b      	str	r3, [r7, #16]
  daintmsk.d32 = 0;
 8006984:	2300      	movs	r3, #0
 8006986:	623b      	str	r3, [r7, #32]
  doepmsk.d32 = 0;
 8006988:	2300      	movs	r3, #0
 800698a:	61fb      	str	r3, [r7, #28]
  diepmsk.d32 = 0;
 800698c:	2300      	movs	r3, #0
 800698e:	61bb      	str	r3, [r7, #24]
  dcfg.d32 = 0;
 8006990:	2300      	movs	r3, #0
 8006992:	617b      	str	r3, [r7, #20]
  gintsts.d32 = 0;
 8006994:	2300      	movs	r3, #0
 8006996:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Remote Wake-up Signaling */
  dctl.b.rmtwkupsig = 1;
 8006998:	7c3b      	ldrb	r3, [r7, #16]
 800699a:	f043 0301 	orr.w	r3, r3, #1
 800699e:	743b      	strb	r3, [r7, #16]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6912      	ldr	r2, [r2, #16]
 80069a8:	6851      	ldr	r1, [r2, #4]
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	43d2      	mvns	r2, r2
 80069ae:	400a      	ands	r2, r1
 80069b0:	605a      	str	r2, [r3, #4]
  
  /* Flush the Tx FIFO */
  USB_OTG_FlushTxFifo(pdev ,  0 );
 80069b2:	2100      	movs	r1, #0
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7fe f975 	bl	8004ca4 <USB_OTG_FlushTxFifo>
  
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80069ba:	2300      	movs	r3, #0
 80069bc:	627b      	str	r3, [r7, #36]	; 0x24
 80069be:	e012      	b.n	80069e6 <DCD_HandleUsbReset_ISR+0x6e>
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c4:	3304      	adds	r3, #4
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	22ff      	movs	r2, #255	; 0xff
 80069ce:	609a      	str	r2, [r3, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d4:	3314      	adds	r3, #20
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	22ff      	movs	r2, #255	; 0xff
 80069de:	609a      	str	r2, [r3, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	3301      	adds	r3, #1
 80069e4:	627b      	str	r3, [r7, #36]	; 0x24
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	785b      	ldrb	r3, [r3, #1]
 80069ea:	461a      	mov	r2, r3
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d8e6      	bhi.n	80069c0 <DCD_HandleUsbReset_ISR+0x48>
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	f04f 32ff 	mov.w	r2, #4294967295
 80069fa:	619a      	str	r2, [r3, #24]
  
  daintmsk.ep.in = 1;
 80069fc:	2301      	movs	r3, #1
 80069fe:	843b      	strh	r3, [r7, #32]
  daintmsk.ep.out = 1;
 8006a00:	2301      	movs	r3, #1
 8006a02:	847b      	strh	r3, [r7, #34]	; 0x22
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, daintmsk.d32 );
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	6a3a      	ldr	r2, [r7, #32]
 8006a0a:	61da      	str	r2, [r3, #28]
  
  doepmsk.b.setup = 1;
 8006a0c:	7f3b      	ldrb	r3, [r7, #28]
 8006a0e:	f043 0308 	orr.w	r3, r3, #8
 8006a12:	773b      	strb	r3, [r7, #28]
  doepmsk.b.xfercompl = 1;
 8006a14:	7f3b      	ldrb	r3, [r7, #28]
 8006a16:	f043 0301 	orr.w	r3, r3, #1
 8006a1a:	773b      	strb	r3, [r7, #28]
  doepmsk.b.epdisabled = 1;
 8006a1c:	7f3b      	ldrb	r3, [r7, #28]
 8006a1e:	f043 0302 	orr.w	r3, r3, #2
 8006a22:	773b      	strb	r3, [r7, #28]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, doepmsk.d32 );
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	69fa      	ldr	r2, [r7, #28]
 8006a2a:	615a      	str	r2, [r3, #20]
#ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED   
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOUTEP1MSK, doepmsk.d32 );
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	69fa      	ldr	r2, [r7, #28]
 8006a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif
  diepmsk.b.xfercompl = 1;
 8006a36:	7e3b      	ldrb	r3, [r7, #24]
 8006a38:	f043 0301 	orr.w	r3, r3, #1
 8006a3c:	763b      	strb	r3, [r7, #24]
  diepmsk.b.timeout = 1;
 8006a3e:	7e3b      	ldrb	r3, [r7, #24]
 8006a40:	f043 0308 	orr.w	r3, r3, #8
 8006a44:	763b      	strb	r3, [r7, #24]
  diepmsk.b.epdisabled = 1;
 8006a46:	7e3b      	ldrb	r3, [r7, #24]
 8006a48:	f043 0302 	orr.w	r3, r3, #2
 8006a4c:	763b      	strb	r3, [r7, #24]

  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, diepmsk.d32 );
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	611a      	str	r2, [r3, #16]
#ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED  
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DINEP1MSK, diepmsk.d32 );
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	645a      	str	r2, [r3, #68]	; 0x44
#endif
  /* Reset Device Address */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	617b      	str	r3, [r7, #20]
  dcfg.b.devaddr = 0;
 8006a66:	8abb      	ldrh	r3, [r7, #20]
 8006a68:	f36f 130a 	bfc	r3, #4, #7
 8006a6c:	82bb      	strh	r3, [r7, #20]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	601a      	str	r2, [r3, #0]
  
  
  /* setup EP0 to receive SETUP packets */
  USB_OTG_EP0_OutStart(pdev);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7fe ffcd 	bl	8005a16 <USB_OTG_EP0_OutStart>
  
  /* Clear interrupt */
  gintsts.d32 = 0;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	60fb      	str	r3, [r7, #12]
  gintsts.b.usbreset = 1;
 8006a80:	7b7b      	ldrb	r3, [r7, #13]
 8006a82:	f043 0310 	orr.w	r3, r3, #16
 8006a86:	737b      	strb	r3, [r7, #13]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	615a      	str	r2, [r3, #20]
  
  /*Reset internal state machine */
  USBD_DCD_INT_fops->Reset(pdev);
 8006a90:	4b04      	ldr	r3, [pc, #16]	; (8006aa4 <DCD_HandleUsbReset_ISR+0x12c>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	4798      	blx	r3
  return 1;
 8006a9a:	2301      	movs	r3, #1
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3728      	adds	r7, #40	; 0x28
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	2000005c 	.word	0x2000005c

08006aa8 <DCD_HandleEnumDone_ISR>:
*         Read the device status register and set the device speed
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleEnumDone_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_GUSBCFG_TypeDef  gusbcfg;
  
  USB_OTG_EP0Activate(pdev);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f7fe fbb0 	bl	8005216 <USB_OTG_EP0Activate>
  
  /* Set USB turn-around time based on device speed and PHY interface. */
  gusbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	60bb      	str	r3, [r7, #8]
  
  /* Full or High speed */
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f7fe fb85 	bl	80051ce <USB_OTG_GetDeviceSpeed>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b03      	cmp	r3, #3
 8006ac8:	d10c      	bne.n	8006ae4 <DCD_HandleEnumDone_ISR+0x3c>
  {
    pdev->cfg.speed            = USB_OTG_SPEED_HIGH;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	709a      	strb	r2, [r3, #2]
    pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ad6:	809a      	strh	r2, [r3, #4]
    gusbcfg.b.usbtrdtim = 9;
 8006ad8:	7a7b      	ldrb	r3, [r7, #9]
 8006ada:	2209      	movs	r2, #9
 8006adc:	f362 0385 	bfi	r3, r2, #2, #4
 8006ae0:	727b      	strb	r3, [r7, #9]
 8006ae2:	e00a      	b.n	8006afa <DCD_HandleEnumDone_ISR+0x52>
  }
  else
  {
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	709a      	strb	r2, [r3, #2]
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2240      	movs	r2, #64	; 0x40
 8006aee:	809a      	strh	r2, [r3, #4]
    gusbcfg.b.usbtrdtim = 5;
 8006af0:	7a7b      	ldrb	r3, [r7, #9]
 8006af2:	2205      	movs	r2, #5
 8006af4:	f362 0385 	bfi	r3, r2, #2, #4
 8006af8:	727b      	strb	r3, [r7, #9]
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	60da      	str	r2, [r3, #12]
  
  /* Clear interrupt */
  gintsts.d32 = 0;
 8006b02:	2300      	movs	r3, #0
 8006b04:	60fb      	str	r3, [r7, #12]
  gintsts.b.enumdone = 1;
 8006b06:	7b7b      	ldrb	r3, [r7, #13]
 8006b08:	f043 0320 	orr.w	r3, r3, #32
 8006b0c:	737b      	strb	r3, [r7, #13]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, gintsts.d32 );
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	615a      	str	r2, [r3, #20]
  return 1;
 8006b16:	2301      	movs	r3, #1
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <DCD_IsoINIncomplete_ISR>:
*         handle the ISO IN incomplete interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_IsoINIncomplete_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef gintsts;  
  
  gintsts.d32 = 0;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	60fb      	str	r3, [r7, #12]

  USBD_DCD_INT_fops->IsoINIncomplete (pdev); 
 8006b2c:	4b08      	ldr	r3, [pc, #32]	; (8006b50 <DCD_IsoINIncomplete_ISR+0x30>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	69db      	ldr	r3, [r3, #28]
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.incomplisoin = 1;
 8006b36:	7bbb      	ldrb	r3, [r7, #14]
 8006b38:	f043 0310 	orr.w	r3, r3, #16
 8006b3c:	73bb      	strb	r3, [r7, #14]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	615a      	str	r2, [r3, #20]
  
  return 1;
 8006b46:	2301      	movs	r3, #1
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	2000005c 	.word	0x2000005c

08006b54 <DCD_IsoOUTIncomplete_ISR>:
*         handle the ISO OUT incomplete interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_IsoOUTIncomplete_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef gintsts;  
  
  gintsts.d32 = 0;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	60fb      	str	r3, [r7, #12]

  USBD_DCD_INT_fops->IsoOUTIncomplete (pdev); 
 8006b60:	4b08      	ldr	r3, [pc, #32]	; (8006b84 <DCD_IsoOUTIncomplete_ISR+0x30>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.incomplisoout = 1;
 8006b6a:	7bbb      	ldrb	r3, [r7, #14]
 8006b6c:	f043 0320 	orr.w	r3, r3, #32
 8006b70:	73bb      	strb	r3, [r7, #14]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	615a      	str	r2, [r3, #20]
  return 1;
 8006b7a:	2301      	movs	r3, #1
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	2000005c 	.word	0x2000005c

08006b88 <DCD_ReadDevInEP>:
*         Reads ep flags
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b087      	sub	sp, #28
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	460b      	mov	r3, r1
 8006b92:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	617b      	str	r3, [r7, #20]
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba2:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1) << 7;
 8006ba4:	78fb      	ldrb	r3, [r7, #3]
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bac:	01db      	lsls	r3, r3, #7
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	617b      	str	r3, [r7, #20]
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 8006bb6:	78fb      	ldrb	r3, [r7, #3]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	3304      	adds	r3, #4
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4413      	add	r3, r2
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	689a      	ldr	r2, [r3, #8]
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]
  return v;
 8006bca:	68fb      	ldr	r3, [r7, #12]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	371c      	adds	r7, #28
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <USBD_Init>:
void USBD_Init(USB_OTG_CORE_HANDLE *pdev,
               USB_OTG_CORE_ID_TypeDef coreID,
               USBD_DEVICE *pDevice,                  
               USBD_Class_cb_TypeDef *class_cb, 
               USBD_Usr_cb_TypeDef *usr_cb)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	607a      	str	r2, [r7, #4]
 8006be2:	603b      	str	r3, [r7, #0]
 8006be4:	460b      	mov	r3, r1
 8006be6:	72fb      	strb	r3, [r7, #11]
  /* Hardware Init */
  USB_OTG_BSP_Init(pdev);  
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f7fd fcb3 	bl	8004554 <USB_OTG_BSP_Init>
  
  USBD_DeInit(pdev);
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f000 f81d 	bl	8006c2e <USBD_DeInit>
  
  /*Register class and user callbacks */
  pdev->dev.class_cb = class_cb;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	f8c3 25e4 	str.w	r2, [r3, #1508]	; 0x5e4
  pdev->dev.usr_cb = usr_cb;  
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	f8c3 25e8 	str.w	r2, [r3, #1512]	; 0x5e8
  pdev->dev.usr_device = pDevice;    
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	f8c3 25ec 	str.w	r2, [r3, #1516]	; 0x5ec
  
  /* set USB OTG core params */
  DCD_Init(pdev , coreID);
 8006c0c:	7afb      	ldrb	r3, [r7, #11]
 8006c0e:	4619      	mov	r1, r3
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f7fe ff63 	bl	8005adc <DCD_Init>
  
  /* Upon Init call usr callback */
  pdev->dev.usr_cb->Init();
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4798      	blx	r3
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f7fd fd15 	bl	8004650 <USB_OTG_BSP_EnableInterrupt>
}
 8006c26:	bf00      	nop
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <USBD_DeInit>:
*         Re-Initialize th device library
* @param  pdev: device instance
* @retval status: status
*/
USBD_Status USBD_DeInit(USB_OTG_CORE_HANDLE *pdev)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  /* Software Init */
  
  return USBD_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <USBD_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_SetupStage(USB_OTG_CORE_HANDLE *pdev)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  USB_SETUP_REQ req;
  
  USBD_ParseSetupRequest(pdev , &req);
 8006c4c:	f107 0308 	add.w	r3, r7, #8
 8006c50:	4619      	mov	r1, r3
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f001 f856 	bl	8007d04 <USBD_ParseSetupRequest>
  
  switch (req.bmRequest & 0x1F) 
 8006c58:	7a3b      	ldrb	r3, [r7, #8]
 8006c5a:	f003 031f 	and.w	r3, r3, #31
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d00a      	beq.n	8006c78 <USBD_SetupStage+0x34>
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d00f      	beq.n	8006c86 <USBD_SetupStage+0x42>
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d114      	bne.n	8006c94 <USBD_SetupStage+0x50>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &req);
 8006c6a:	f107 0308 	add.w	r3, r7, #8
 8006c6e:	4619      	mov	r1, r3
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 fc27 	bl	80074c4 <USBD_StdDevReq>
    break;
 8006c76:	e016      	b.n	8006ca6 <USBD_SetupStage+0x62>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &req);
 8006c78:	f107 0308 	add.w	r3, r7, #8
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fc70 	bl	8007564 <USBD_StdItfReq>
    break;
 8006c84:	e00f      	b.n	8006ca6 <USBD_SetupStage+0x62>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &req);   
 8006c86:	f107 0308 	add.w	r3, r7, #8
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fc9d 	bl	80075cc <USBD_StdEPReq>
    break;
 8006c92:	e008      	b.n	8006ca6 <USBD_SetupStage+0x62>
    
  default:           
    DCD_EP_Stall(pdev , req.bmRequest & 0x80);
 8006c94:	7a3b      	ldrb	r3, [r7, #8]
 8006c96:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7ff f8b1 	bl	8005e06 <DCD_EP_Stall>
    break;
 8006ca4:	bf00      	nop
  }  
  return USBD_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <USBD_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_DataOutStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	460b      	mov	r3, r1
 8006cba:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  
  if(epnum == 0) 
 8006cbc:	78fb      	ldrb	r3, [r7, #3]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d144      	bne.n	8006d4c <USBD_DataOutStage+0x9c>
  {
    ep = &pdev->dev.out_ep[0];
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8006cc8:	60fb      	str	r3, [r7, #12]
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_OUT)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8006cd0:	2b03      	cmp	r3, #3
 8006cd2:	d14e      	bne.n	8006d72 <USBD_DataOutStage+0xc2>
    {
      if(ep->rem_data_len > ep->maxpacket)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	69da      	ldr	r2, [r3, #28]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d920      	bls.n	8006d22 <USBD_DataOutStage+0x72>
      {
        ep->rem_data_len -=  ep->maxpacket;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	69da      	ldr	r2, [r3, #28]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	1ad2      	subs	r2, r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	61da      	str	r2, [r3, #28]
        
        if(pdev->cfg.dma_enable == 1)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	78db      	ldrb	r3, [r3, #3]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d106      	bne.n	8006d04 <USBD_DataOutStage+0x54>
        {
          /* in slave mode this, is handled by the RxSTSQLvl ISR */
          ep->xfer_buff += ep->maxpacket; 
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	68da      	ldr	r2, [r3, #12]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	441a      	add	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	60da      	str	r2, [r3, #12]
        }        
        USBD_CtlContinueRx (pdev, 
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	68d9      	ldr	r1, [r3, #12]
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	689a      	ldr	r2, [r3, #8]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	69db      	ldr	r3, [r3, #28]
 8006d10:	4293      	cmp	r3, r2
 8006d12:	bf28      	it	cs
 8006d14:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	461a      	mov	r2, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fb8d 	bl	800743a <USBD_CtlContinueRx>
 8006d20:	e027      	b.n	8006d72 <USBD_DataOutStage+0xc2>
      }
      else
      {
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00a      	beq.n	8006d44 <USBD_DataOutStage+0x94>
           (pdev->dev.device_status == USB_OTG_CONFIGURED))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
 8006d34:	2b03      	cmp	r3, #3
 8006d36:	d105      	bne.n	8006d44 <USBD_DataOutStage+0x94>
        {
          pdev->dev.class_cb->EP0_RxReady(pdev); 
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 fb8c 	bl	8007462 <USBD_CtlSendStatus>
 8006d4a:	e012      	b.n	8006d72 <USBD_DataOutStage+0xc2>
      }
    }
  }
  else if((pdev->dev.class_cb->DataOut != NULL)&&
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00c      	beq.n	8006d72 <USBD_DataOutStage+0xc2>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
  else if((pdev->dev.class_cb->DataOut != NULL)&&
 8006d5e:	2b03      	cmp	r3, #3
 8006d60:	d107      	bne.n	8006d72 <USBD_DataOutStage+0xc2>
  {
    pdev->dev.class_cb->DataOut(pdev, epnum); 
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	78fa      	ldrb	r2, [r7, #3]
 8006d6c:	4611      	mov	r1, r2
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	4798      	blx	r3
  }  
  return USBD_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <USBD_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_DataInStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	460b      	mov	r3, r1
 8006d86:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  
  if(epnum == 0) 
 8006d88:	78fb      	ldrb	r3, [r7, #3]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d16b      	bne.n	8006e66 <USBD_DataInStage+0xea>
  {
    ep = &pdev->dev.in_ep[0];
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006d94:	60fb      	str	r3, [r7, #12]
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_IN)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d155      	bne.n	8006e4c <USBD_DataInStage+0xd0>
    {
      if(ep->rem_data_len > ep->maxpacket)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	69da      	ldr	r2, [r3, #28]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d91b      	bls.n	8006de4 <USBD_DataInStage+0x68>
      {
        ep->rem_data_len -=  ep->maxpacket;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	69da      	ldr	r2, [r3, #28]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	1ad2      	subs	r2, r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	61da      	str	r2, [r3, #28]
        if(pdev->cfg.dma_enable == 1)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	78db      	ldrb	r3, [r3, #3]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d106      	bne.n	8006dd0 <USBD_DataInStage+0x54>
        {
          /* in slave mode this, is handled by the TxFifoEmpty ISR */
          ep->xfer_buff += ep->maxpacket;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	68da      	ldr	r2, [r3, #12]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	441a      	add	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	60da      	str	r2, [r3, #12]
        }
        USBD_CtlContinueSendData (pdev, 
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	68d9      	ldr	r1, [r3, #12]
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	69db      	ldr	r3, [r3, #28]
        USBD_CtlContinueSendData (pdev, 
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	461a      	mov	r2, r3
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 fb18 	bl	8007412 <USBD_CtlContinueSendData>
 8006de2:	e033      	b.n	8006e4c <USBD_DataInStage+0xd0>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6a1b      	ldr	r3, [r3, #32]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	6892      	ldr	r2, [r2, #8]
 8006dec:	fbb3 f1f2 	udiv	r1, r3, r2
 8006df0:	fb02 f201 	mul.w	r2, r2, r1
 8006df4:	1a9b      	subs	r3, r3, r2
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d114      	bne.n	8006e24 <USBD_DataInStage+0xa8>
           (ep->total_data_len >= ep->maxpacket) &&
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6a1a      	ldr	r2, [r3, #32]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	689b      	ldr	r3, [r3, #8]
        if((ep->total_data_len % ep->maxpacket == 0) &&
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d30e      	bcc.n	8006e24 <USBD_DataInStage+0xa8>
             (ep->total_data_len < ep->ctl_data_len ))
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6a1a      	ldr	r2, [r3, #32]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (ep->total_data_len >= ep->maxpacket) &&
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d208      	bcs.n	8006e24 <USBD_DataInStage+0xa8>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8006e12:	2200      	movs	r2, #0
 8006e14:	2100      	movs	r1, #0
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fafb 	bl	8007412 <USBD_CtlContinueSendData>
          ep->ctl_data_len = 0;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	625a      	str	r2, [r3, #36]	; 0x24
 8006e22:	e013      	b.n	8006e4c <USBD_DataInStage+0xd0>
        }
        else
        {
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00a      	beq.n	8006e46 <USBD_DataInStage+0xca>
             (pdev->dev.device_status == USB_OTG_CONFIGURED))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
 8006e36:	2b03      	cmp	r3, #3
 8006e38:	d105      	bne.n	8006e46 <USBD_DataInStage+0xca>
          {
            pdev->dev.class_cb->EP0_TxSent(pdev); 
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fb23 	bl	8007492 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev.test_mode == 1)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d11a      	bne.n	8006e8c <USBD_DataInStage+0x110>
    {
      USBD_RunTestMode(pdev); 
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f81e 	bl	8006e98 <USBD_RunTestMode>
      pdev->dev.test_mode = 0;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
 8006e64:	e012      	b.n	8006e8c <USBD_DataInStage+0x110>
    }
  }
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00c      	beq.n	8006e8c <USBD_DataInStage+0x110>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
 8006e78:	2b03      	cmp	r3, #3
 8006e7a:	d107      	bne.n	8006e8c <USBD_DataInStage+0x110>
  {
    pdev->dev.class_cb->DataIn(pdev, epnum); 
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8006e82:	695b      	ldr	r3, [r3, #20]
 8006e84:	78fa      	ldrb	r2, [r7, #3]
 8006e86:	4611      	mov	r1, r2
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	4798      	blx	r3
  }  
  return USBD_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
	...

08006e98 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
static uint8_t  USBD_RunTestMode (USB_OTG_CORE_HANDLE  *pdev) 
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, SET_TEST_MODE.d32);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	4a04      	ldr	r2, [pc, #16]	; (8006eb8 <USBD_RunTestMode+0x20>)
 8006ea6:	6812      	ldr	r2, [r2, #0]
 8006ea8:	605a      	str	r2, [r3, #4]
  return USBD_OK;  
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr
 8006eb8:	200001e8 	.word	0x200001e8

08006ebc <USBD_Reset>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  DCD_EP_Open(pdev,
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	2240      	movs	r2, #64	; 0x40
 8006ec8:	2100      	movs	r1, #0
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7fe fe89 	bl	8005be2 <DCD_EP_Open>
              0x00,
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Open EP0 IN */
  DCD_EP_Open(pdev,
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	2240      	movs	r2, #64	; 0x40
 8006ed4:	2180      	movs	r1, #128	; 0x80
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7fe fe83 	bl	8005be2 <DCD_EP_Open>
              0x80,
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Upon Reset call usr call back */
  pdev->dev.device_status = USB_OTG_DEFAULT;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  pdev->dev.usr_cb->DeviceReset(pdev->cfg.speed);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	7892      	ldrb	r2, [r2, #2]
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	4798      	blx	r3
  
  return USBD_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3708      	adds	r7, #8
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <USBD_Resume>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Resume(USB_OTG_CORE_HANDLE  *pdev)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b082      	sub	sp, #8
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceResumed(); 
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	4798      	blx	r3
  pdev->dev.device_status = pdev->dev.device_old_status;  
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 2113 	ldrb.w	r2, [r3, #275]	; 0x113
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  pdev->dev.device_status = USB_OTG_CONFIGURED;  
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2203      	movs	r2, #3
 8006f20:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  return USBD_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3708      	adds	r7, #8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <USBD_Suspend>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Suspend(USB_OTG_CORE_HANDLE  *pdev)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b082      	sub	sp, #8
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  pdev->dev.device_old_status = pdev->dev.device_status;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 2112 	ldrb.w	r2, [r3, #274]	; 0x112
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
  pdev->dev.device_status  = USB_OTG_SUSPENDED;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2204      	movs	r2, #4
 8006f46:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceSuspended(); 
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	4798      	blx	r3
  return USBD_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3708      	adds	r7, #8
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <USBD_SOF>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_SOF(USB_OTG_CORE_HANDLE  *pdev)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b082      	sub	sp, #8
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  if(pdev->dev.class_cb->SOF)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8006f6c:	69db      	ldr	r3, [r3, #28]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d005      	beq.n	8006f7e <USBD_SOF+0x20>
  {
    pdev->dev.class_cb->SOF(pdev); 
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	4798      	blx	r3
  }
  return USBD_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <USBD_SetCfg>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_Status USBD_SetCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	460b      	mov	r3, r1
 8006f92:	70fb      	strb	r3, [r7, #3]
  pdev->dev.class_cb->Init(pdev, cfgidx); 
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	78fa      	ldrb	r2, [r7, #3]
 8006f9e:	4611      	mov	r1, r2
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	4798      	blx	r3
  
  /* Upon set config call usr call back */
  pdev->dev.usr_cb->DeviceConfigured();
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	4798      	blx	r3
  return USBD_OK; 
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <USBD_ClrCfg>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_Status
*/
USBD_Status USBD_ClrCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	70fb      	strb	r3, [r7, #3]
  pdev->dev.class_cb->DeInit(pdev, cfgidx);   
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	78fa      	ldrb	r2, [r7, #3]
 8006fce:	4611      	mov	r1, r2
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	4798      	blx	r3
  return USBD_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3708      	adds	r7, #8
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <USBD_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_IsoINIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b082      	sub	sp, #8
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  pdev->dev.class_cb->IsoINIncomplete(pdev);   
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	4798      	blx	r3
  return USBD_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3708      	adds	r7, #8
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <USBD_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_IsoOUTIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  pdev->dev.class_cb->IsoOUTIncomplete(pdev);   
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 800700a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	4798      	blx	r3
  return USBD_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3708      	adds	r7, #8
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <USBD_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_DevConnected(USB_OTG_CORE_HANDLE  *pdev)
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b082      	sub	sp, #8
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  pdev->dev.usr_cb->DeviceConnected();
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	4798      	blx	r3
  pdev->dev.connection_status = 1;  
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
  return USBD_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <USBD_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_DevDisconnected(USB_OTG_CORE_HANDLE  *pdev)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b082      	sub	sp, #8
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  pdev->dev.usr_cb->DeviceDisconnected();
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	4798      	blx	r3
  pdev->dev.class_cb->DeInit(pdev, 0);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	2100      	movs	r1, #0
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	4798      	blx	r3
  pdev->dev.connection_status = 0;    
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
  return USBD_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <USBD_USR_DeviceDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_DeviceDescriptor( uint8_t speed , uint16_t *length)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	4603      	mov	r3, r0
 8007078:	6039      	str	r1, [r7, #0]
 800707a:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_DeviceDesc);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	2212      	movs	r2, #18
 8007080:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 8007082:	4b03      	ldr	r3, [pc, #12]	; (8007090 <USBD_USR_DeviceDescriptor+0x20>)
}
 8007084:	4618      	mov	r0, r3
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	2000007c 	.word	0x2000007c

08007094 <USBD_USR_LangIDStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_LangIDStrDescriptor( uint8_t speed , uint16_t *length)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	4603      	mov	r3, r0
 800709c:	6039      	str	r1, [r7, #0]
 800709e:	71fb      	strb	r3, [r7, #7]
  *length =  sizeof(USBD_LangIDDesc);  
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	2204      	movs	r2, #4
 80070a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80070a6:	4b03      	ldr	r3, [pc, #12]	; (80070b4 <USBD_USR_LangIDStrDescriptor+0x20>)
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr
 80070b4:	2000009c 	.word	0x2000009c

080070b8 <USBD_USR_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_ProductStrDescriptor( uint8_t speed , uint16_t *length)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	4603      	mov	r3, r0
 80070c0:	6039      	str	r1, [r7, #0]
 80070c2:	71fb      	strb	r3, [r7, #7]
 
  
  if(speed == 0)
 80070c4:	79fb      	ldrb	r3, [r7, #7]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d105      	bne.n	80070d6 <USBD_USR_ProductStrDescriptor+0x1e>
  {   
    USBD_GetString (USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	4907      	ldr	r1, [pc, #28]	; (80070ec <USBD_USR_ProductStrDescriptor+0x34>)
 80070ce:	4808      	ldr	r0, [pc, #32]	; (80070f0 <USBD_USR_ProductStrDescriptor+0x38>)
 80070d0:	f000 fe75 	bl	8007dbe <USBD_GetString>
 80070d4:	e004      	b.n	80070e0 <USBD_USR_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	4904      	ldr	r1, [pc, #16]	; (80070ec <USBD_USR_ProductStrDescriptor+0x34>)
 80070da:	4806      	ldr	r0, [pc, #24]	; (80070f4 <USBD_USR_ProductStrDescriptor+0x3c>)
 80070dc:	f000 fe6f 	bl	8007dbe <USBD_GetString>
  }
  return USBD_StrDesc;
 80070e0:	4b02      	ldr	r3, [pc, #8]	; (80070ec <USBD_USR_ProductStrDescriptor+0x34>)
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	200001ec 	.word	0x200001ec
 80070f0:	08008074 	.word	0x08008074
 80070f4:	08008094 	.word	0x08008094

080070f8 <USBD_USR_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	4603      	mov	r3, r0
 8007100:	6039      	str	r1, [r7, #0]
 8007102:	71fb      	strb	r3, [r7, #7]
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	4904      	ldr	r1, [pc, #16]	; (8007118 <USBD_USR_ManufacturerStrDescriptor+0x20>)
 8007108:	4804      	ldr	r0, [pc, #16]	; (800711c <USBD_USR_ManufacturerStrDescriptor+0x24>)
 800710a:	f000 fe58 	bl	8007dbe <USBD_GetString>
  return USBD_StrDesc;
 800710e:	4b02      	ldr	r3, [pc, #8]	; (8007118 <USBD_USR_ManufacturerStrDescriptor+0x20>)
}
 8007110:	4618      	mov	r0, r3
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	200001ec 	.word	0x200001ec
 800711c:	080080b4 	.word	0x080080b4

08007120 <USBD_USR_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	4603      	mov	r3, r0
 8007128:	6039      	str	r1, [r7, #0]
 800712a:	71fb      	strb	r3, [r7, #7]
  if(speed  == USB_OTG_SPEED_HIGH)
 800712c:	79fb      	ldrb	r3, [r7, #7]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d105      	bne.n	800713e <USBD_USR_SerialStrDescriptor+0x1e>
  {    
    USBD_GetString (USBD_SERIALNUMBER_HS_STRING, USBD_StrDesc, length);
 8007132:	683a      	ldr	r2, [r7, #0]
 8007134:	4907      	ldr	r1, [pc, #28]	; (8007154 <USBD_USR_SerialStrDescriptor+0x34>)
 8007136:	4808      	ldr	r0, [pc, #32]	; (8007158 <USBD_USR_SerialStrDescriptor+0x38>)
 8007138:	f000 fe41 	bl	8007dbe <USBD_GetString>
 800713c:	e004      	b.n	8007148 <USBD_USR_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_FS_STRING, USBD_StrDesc, length);    
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	4904      	ldr	r1, [pc, #16]	; (8007154 <USBD_USR_SerialStrDescriptor+0x34>)
 8007142:	4806      	ldr	r0, [pc, #24]	; (800715c <USBD_USR_SerialStrDescriptor+0x3c>)
 8007144:	f000 fe3b 	bl	8007dbe <USBD_GetString>
  }
  return USBD_StrDesc;
 8007148:	4b02      	ldr	r3, [pc, #8]	; (8007154 <USBD_USR_SerialStrDescriptor+0x34>)
}
 800714a:	4618      	mov	r0, r3
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	200001ec 	.word	0x200001ec
 8007158:	080080c8 	.word	0x080080c8
 800715c:	080080d8 	.word	0x080080d8

08007160 <USBD_USR_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_ConfigStrDescriptor( uint8_t speed , uint16_t *length)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	4603      	mov	r3, r0
 8007168:	6039      	str	r1, [r7, #0]
 800716a:	71fb      	strb	r3, [r7, #7]
  if(speed  == USB_OTG_SPEED_HIGH)
 800716c:	79fb      	ldrb	r3, [r7, #7]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d105      	bne.n	800717e <USBD_USR_ConfigStrDescriptor+0x1e>
  {  
    USBD_GetString (USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 8007172:	683a      	ldr	r2, [r7, #0]
 8007174:	4907      	ldr	r1, [pc, #28]	; (8007194 <USBD_USR_ConfigStrDescriptor+0x34>)
 8007176:	4808      	ldr	r0, [pc, #32]	; (8007198 <USBD_USR_ConfigStrDescriptor+0x38>)
 8007178:	f000 fe21 	bl	8007dbe <USBD_GetString>
 800717c:	e004      	b.n	8007188 <USBD_USR_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	4904      	ldr	r1, [pc, #16]	; (8007194 <USBD_USR_ConfigStrDescriptor+0x34>)
 8007182:	4805      	ldr	r0, [pc, #20]	; (8007198 <USBD_USR_ConfigStrDescriptor+0x38>)
 8007184:	f000 fe1b 	bl	8007dbe <USBD_GetString>
  }
  return USBD_StrDesc;  
 8007188:	4b02      	ldr	r3, [pc, #8]	; (8007194 <USBD_USR_ConfigStrDescriptor+0x34>)
}
 800718a:	4618      	mov	r0, r3
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	200001ec 	.word	0x200001ec
 8007198:	080080e8 	.word	0x080080e8

0800719c <USBD_USR_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_InterfaceStrDescriptor( uint8_t speed , uint16_t *length)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	4603      	mov	r3, r0
 80071a4:	6039      	str	r1, [r7, #0]
 80071a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80071a8:	79fb      	ldrb	r3, [r7, #7]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d105      	bne.n	80071ba <USBD_USR_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString (USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 80071ae:	683a      	ldr	r2, [r7, #0]
 80071b0:	4907      	ldr	r1, [pc, #28]	; (80071d0 <USBD_USR_InterfaceStrDescriptor+0x34>)
 80071b2:	4808      	ldr	r0, [pc, #32]	; (80071d4 <USBD_USR_InterfaceStrDescriptor+0x38>)
 80071b4:	f000 fe03 	bl	8007dbe <USBD_GetString>
 80071b8:	e004      	b.n	80071c4 <USBD_USR_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 80071ba:	683a      	ldr	r2, [r7, #0]
 80071bc:	4904      	ldr	r1, [pc, #16]	; (80071d0 <USBD_USR_InterfaceStrDescriptor+0x34>)
 80071be:	4805      	ldr	r0, [pc, #20]	; (80071d4 <USBD_USR_InterfaceStrDescriptor+0x38>)
 80071c0:	f000 fdfd 	bl	8007dbe <USBD_GetString>
  }
  return USBD_StrDesc;  
 80071c4:	4b02      	ldr	r3, [pc, #8]	; (80071d0 <USBD_USR_InterfaceStrDescriptor+0x34>)
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	200001ec 	.word	0x200001ec
 80071d4:	080080f4 	.word	0x080080f4

080071d8 <USBD_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init (void  *pdev, 
                               uint8_t cfgidx)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	460b      	mov	r3, r1
 80071e2:	70fb      	strb	r3, [r7, #3]
  
  /* Open EP IN */
  DCD_EP_Open(pdev,
 80071e4:	2303      	movs	r3, #3
 80071e6:	2204      	movs	r2, #4
 80071e8:	2181      	movs	r1, #129	; 0x81
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f7fe fcf9 	bl	8005be2 <DCD_EP_Open>
              HID_IN_EP,
              HID_IN_PACKET,
              USB_OTG_EP_INT);
  
  /* Open EP OUT */
  DCD_EP_Open(pdev,
 80071f0:	2303      	movs	r3, #3
 80071f2:	2204      	movs	r2, #4
 80071f4:	2101      	movs	r1, #1
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f7fe fcf3 	bl	8005be2 <DCD_EP_Open>
              HID_OUT_EP,
              HID_OUT_PACKET,
              USB_OTG_EP_INT);
  
  return USBD_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit (void  *pdev, 
                                 uint8_t cfgidx)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b082      	sub	sp, #8
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
 800720e:	460b      	mov	r3, r1
 8007210:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  DCD_EP_Close (pdev , HID_IN_EP);
 8007212:	2181      	movs	r1, #129	; 0x81
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f7fe fd3c 	bl	8005c92 <DCD_EP_Close>
  DCD_EP_Close (pdev , HID_OUT_EP);
 800721a:	2101      	movs	r1, #1
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f7fe fd38 	bl	8005c92 <DCD_EP_Close>
  
  
  return USBD_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup (void  *pdev, 
                                USB_SETUP_REQ *req)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  uint16_t len = 0;
 8007236:	2300      	movs	r3, #0
 8007238:	81fb      	strh	r3, [r7, #14]
  uint8_t  *pbuf = NULL;
 800723a:	2300      	movs	r3, #0
 800723c:	60bb      	str	r3, [r7, #8]
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007246:	2b00      	cmp	r3, #0
 8007248:	d041      	beq.n	80072ce <USBD_HID_Setup+0xa2>
 800724a:	2b20      	cmp	r3, #32
 800724c:	d178      	bne.n	8007340 <USBD_HID_Setup+0x114>
  {
  case USB_REQ_TYPE_CLASS :  
    switch (req->bRequest)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	785b      	ldrb	r3, [r3, #1]
 8007252:	3b02      	subs	r3, #2
 8007254:	2b09      	cmp	r3, #9
 8007256:	d833      	bhi.n	80072c0 <USBD_HID_Setup+0x94>
 8007258:	a201      	add	r2, pc, #4	; (adr r2, 8007260 <USBD_HID_Setup+0x34>)
 800725a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800725e:	bf00      	nop
 8007260:	080072b5 	.word	0x080072b5
 8007264:	08007297 	.word	0x08007297
 8007268:	080072c1 	.word	0x080072c1
 800726c:	080072c1 	.word	0x080072c1
 8007270:	080072c1 	.word	0x080072c1
 8007274:	080072c1 	.word	0x080072c1
 8007278:	080072c1 	.word	0x080072c1
 800727c:	080072c1 	.word	0x080072c1
 8007280:	080072a3 	.word	0x080072a3
 8007284:	08007289 	.word	0x08007289
    {
      
      
    case HID_REQ_SET_PROTOCOL:
      USBD_HID_Protocol = (uint8_t)(req->wValue);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	885b      	ldrh	r3, [r3, #2]
 800728c:	b2db      	uxtb	r3, r3
 800728e:	461a      	mov	r2, r3
 8007290:	4b2e      	ldr	r3, [pc, #184]	; (800734c <USBD_HID_Setup+0x120>)
 8007292:	601a      	str	r2, [r3, #0]
      break;
 8007294:	e01a      	b.n	80072cc <USBD_HID_Setup+0xa0>
      
    case HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData (pdev, 
 8007296:	2201      	movs	r2, #1
 8007298:	492c      	ldr	r1, [pc, #176]	; (800734c <USBD_HID_Setup+0x120>)
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f899 	bl	80073d2 <USBD_CtlSendData>
                        (uint8_t *)&USBD_HID_Protocol,
                        1);    
      break;
 80072a0:	e014      	b.n	80072cc <USBD_HID_Setup+0xa0>
      
    case HID_REQ_SET_IDLE:
      USBD_HID_IdleState = (uint8_t)(req->wValue >> 8);
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	885b      	ldrh	r3, [r3, #2]
 80072a6:	0a1b      	lsrs	r3, r3, #8
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	461a      	mov	r2, r3
 80072ae:	4b28      	ldr	r3, [pc, #160]	; (8007350 <USBD_HID_Setup+0x124>)
 80072b0:	601a      	str	r2, [r3, #0]
      break;
 80072b2:	e00b      	b.n	80072cc <USBD_HID_Setup+0xa0>
      
    case HID_REQ_GET_IDLE:
      USBD_CtlSendData (pdev, 
 80072b4:	2201      	movs	r2, #1
 80072b6:	4926      	ldr	r1, [pc, #152]	; (8007350 <USBD_HID_Setup+0x124>)
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f88a 	bl	80073d2 <USBD_CtlSendData>
                        (uint8_t *)&USBD_HID_IdleState,
                        1);        
      break;      
 80072be:	e005      	b.n	80072cc <USBD_HID_Setup+0xa0>
      
    default:
      USBD_CtlError (pdev, req);
 80072c0:	6839      	ldr	r1, [r7, #0]
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fd67 	bl	8007d96 <USBD_CtlError>
      return USBD_FAIL; 
 80072c8:	2302      	movs	r3, #2
 80072ca:	e03a      	b.n	8007342 <USBD_HID_Setup+0x116>
    }
    break;
 80072cc:	e038      	b.n	8007340 <USBD_HID_Setup+0x114>
    
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	785b      	ldrb	r3, [r3, #1]
 80072d2:	2b0a      	cmp	r3, #10
 80072d4:	d027      	beq.n	8007326 <USBD_HID_Setup+0xfa>
 80072d6:	2b0b      	cmp	r3, #11
 80072d8:	d02b      	beq.n	8007332 <USBD_HID_Setup+0x106>
 80072da:	2b06      	cmp	r3, #6
 80072dc:	d130      	bne.n	8007340 <USBD_HID_Setup+0x114>
    {
    case USB_REQ_GET_DESCRIPTOR: 
      if( req->wValue >> 8 == HID_REPORT_DESC)
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	885b      	ldrh	r3, [r3, #2]
 80072e2:	0a1b      	lsrs	r3, r3, #8
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	2b22      	cmp	r3, #34	; 0x22
 80072e8:	d108      	bne.n	80072fc <USBD_HID_Setup+0xd0>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE , req->wLength);
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	88db      	ldrh	r3, [r3, #6]
 80072ee:	2b32      	cmp	r3, #50	; 0x32
 80072f0:	bf28      	it	cs
 80072f2:	2332      	movcs	r3, #50	; 0x32
 80072f4:	81fb      	strh	r3, [r7, #14]
        pbuf = HID_MOUSE_ReportDesc;
 80072f6:	4b17      	ldr	r3, [pc, #92]	; (8007354 <USBD_HID_Setup+0x128>)
 80072f8:	60bb      	str	r3, [r7, #8]
 80072fa:	e00d      	b.n	8007318 <USBD_HID_Setup+0xec>
      }
      else if( req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	885b      	ldrh	r3, [r3, #2]
 8007300:	0a1b      	lsrs	r3, r3, #8
 8007302:	b29b      	uxth	r3, r3
 8007304:	2b21      	cmp	r3, #33	; 0x21
 8007306:	d107      	bne.n	8007318 <USBD_HID_Setup+0xec>
      {
        
#ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED
        pbuf = USBD_HID_Desc;   
 8007308:	4b13      	ldr	r3, [pc, #76]	; (8007358 <USBD_HID_Setup+0x12c>)
 800730a:	60bb      	str	r3, [r7, #8]
#else
        pbuf = USBD_HID_CfgDesc + 0x12;
#endif 
        len = MIN(USB_HID_DESC_SIZ , req->wLength);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	88db      	ldrh	r3, [r3, #6]
 8007310:	2b09      	cmp	r3, #9
 8007312:	bf28      	it	cs
 8007314:	2309      	movcs	r3, #9
 8007316:	81fb      	strh	r3, [r7, #14]
      }
      
      USBD_CtlSendData (pdev, 
 8007318:	89fb      	ldrh	r3, [r7, #14]
 800731a:	461a      	mov	r2, r3
 800731c:	68b9      	ldr	r1, [r7, #8]
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f857 	bl	80073d2 <USBD_CtlSendData>
                        pbuf,
                        len);
      
      break;
 8007324:	e00c      	b.n	8007340 <USBD_HID_Setup+0x114>
      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
 8007326:	2201      	movs	r2, #1
 8007328:	490c      	ldr	r1, [pc, #48]	; (800735c <USBD_HID_Setup+0x130>)
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f851 	bl	80073d2 <USBD_CtlSendData>
                        (uint8_t *)&USBD_HID_AltSet,
                        1);
      break;
 8007330:	e006      	b.n	8007340 <USBD_HID_Setup+0x114>
      
    case USB_REQ_SET_INTERFACE :
      USBD_HID_AltSet = (uint8_t)(req->wValue);
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	885b      	ldrh	r3, [r3, #2]
 8007336:	b2db      	uxtb	r3, r3
 8007338:	461a      	mov	r2, r3
 800733a:	4b08      	ldr	r3, [pc, #32]	; (800735c <USBD_HID_Setup+0x130>)
 800733c:	601a      	str	r2, [r3, #0]
      break;
 800733e:	bf00      	nop
    }
  }
  return USBD_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	200001c4 	.word	0x200001c4
 8007350:	200001c8 	.word	0x200001c8
 8007354:	20000100 	.word	0x20000100
 8007358:	200000f4 	.word	0x200000f4
 800735c:	200001c0 	.word	0x200001c0

08007360 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport     (USB_OTG_CORE_HANDLE  *pdev, 
                                 uint8_t *report,
                                 uint16_t len)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	4613      	mov	r3, r2
 800736c:	80fb      	strh	r3, [r7, #6]
  if (pdev->dev.device_status == USB_OTG_CONFIGURED )
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8007374:	2b03      	cmp	r3, #3
 8007376:	d105      	bne.n	8007384 <USBD_HID_SendReport+0x24>
  {
    DCD_EP_Tx (pdev, HID_IN_EP, report, len);
 8007378:	88fb      	ldrh	r3, [r7, #6]
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	2181      	movs	r1, #129	; 0x81
 800737e:	68f8      	ldr	r0, [r7, #12]
 8007380:	f7fe fd05 	bl	8005d8e <DCD_EP_Tx>
  }
  return USBD_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
	...

08007390 <USBD_HID_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetCfgDesc (uint8_t speed, uint16_t *length)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	4603      	mov	r3, r0
 8007398:	6039      	str	r1, [r7, #0]
 800739a:	71fb      	strb	r3, [r7, #7]
  *length = sizeof (USBD_HID_CfgDesc);
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	2222      	movs	r2, #34	; 0x22
 80073a0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80073a2:	4b03      	ldr	r3, [pc, #12]	; (80073b0 <USBD_HID_GetCfgDesc+0x20>)
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr
 80073b0:	200000d0 	.word	0x200000d0

080073b4 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn (void  *pdev, 
                              uint8_t epnum)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	70fb      	strb	r3, [r7, #3]
  
  /* Ensure that the FIFO is empty before a new transfer, this condition could 
  be caused by  a new transfer before the end of the previous transfer */
  DCD_EP_Flush(pdev, HID_IN_EP);
 80073c0:	2181      	movs	r1, #129	; 0x81
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f7fe fd99 	bl	8005efa <DCD_EP_Flush>
  return USBD_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3708      	adds	r7, #8
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <USBD_CtlSendData>:
* @retval status
*/
USBD_Status  USBD_CtlSendData (USB_OTG_CORE_HANDLE  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b086      	sub	sp, #24
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	60f8      	str	r0, [r7, #12]
 80073da:	60b9      	str	r1, [r7, #8]
 80073dc:	4613      	mov	r3, r2
 80073de:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 80073e0:	2300      	movs	r3, #0
 80073e2:	75fb      	strb	r3, [r7, #23]
  
  pdev->dev.in_ep[0].total_data_len = len;
 80073e4:	88fa      	ldrh	r2, [r7, #6]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
  pdev->dev.in_ep[0].rem_data_len   = len;
 80073ec:	88fa      	ldrh	r2, [r7, #6]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
  pdev->dev.device_state = USB_OTG_EP0_DATA_IN;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2202      	movs	r2, #2
 80073f8:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111

  DCD_EP_Tx (pdev, 0, pbuf, len);
 80073fc:	88fb      	ldrh	r3, [r7, #6]
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	2100      	movs	r1, #0
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f7fe fcc3 	bl	8005d8e <DCD_EP_Tx>
 
  return ret;
 8007408:	7dfb      	ldrb	r3, [r7, #23]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3718      	adds	r7, #24
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_Status  USBD_CtlContinueSendData (USB_OTG_CORE_HANDLE  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b086      	sub	sp, #24
 8007416:	af00      	add	r7, sp, #0
 8007418:	60f8      	str	r0, [r7, #12]
 800741a:	60b9      	str	r1, [r7, #8]
 800741c:	4613      	mov	r3, r2
 800741e:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 8007420:	2300      	movs	r3, #0
 8007422:	75fb      	strb	r3, [r7, #23]
  
  DCD_EP_Tx (pdev, 0, pbuf, len);
 8007424:	88fb      	ldrh	r3, [r7, #6]
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	2100      	movs	r1, #0
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f7fe fcaf 	bl	8005d8e <DCD_EP_Tx>
  
  
  return ret;
 8007430:	7dfb      	ldrb	r3, [r7, #23]
}
 8007432:	4618      	mov	r0, r3
 8007434:	3718      	adds	r7, #24
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <USBD_CtlContinueRx>:
* @retval status
*/
USBD_Status  USBD_CtlContinueRx (USB_OTG_CORE_HANDLE  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b086      	sub	sp, #24
 800743e:	af00      	add	r7, sp, #0
 8007440:	60f8      	str	r0, [r7, #12]
 8007442:	60b9      	str	r1, [r7, #8]
 8007444:	4613      	mov	r3, r2
 8007446:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 8007448:	2300      	movs	r3, #0
 800744a:	75fb      	strb	r3, [r7, #23]
  
  DCD_EP_PrepareRx (pdev,
 800744c:	88fb      	ldrh	r3, [r7, #6]
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	2100      	movs	r1, #0
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f7fe fc59 	bl	8005d0a <DCD_EP_PrepareRx>
                    0,                     
                    pbuf,                         
                    len);
  return ret;
 8007458:	7dfb      	ldrb	r3, [r7, #23]
}
 800745a:	4618      	mov	r0, r3
 800745c:	3718      	adds	r7, #24
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 8007462:	b580      	push	{r7, lr}
 8007464:	b084      	sub	sp, #16
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
  USBD_Status ret = USBD_OK;
 800746a:	2300      	movs	r3, #0
 800746c:	73fb      	strb	r3, [r7, #15]
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2204      	movs	r2, #4
 8007472:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
  DCD_EP_Tx (pdev,
 8007476:	2300      	movs	r3, #0
 8007478:	2200      	movs	r2, #0
 800747a:	2100      	movs	r1, #0
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f7fe fc86 	bl	8005d8e <DCD_EP_Tx>
             0,
             NULL, 
             0); 
  
  USB_OTG_EP0_OutStart(pdev);  
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f7fe fac7 	bl	8005a16 <USB_OTG_EP0_OutStart>
  
  return ret;
 8007488:	7bfb      	ldrb	r3, [r7, #15]
}
 800748a:	4618      	mov	r0, r3
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b084      	sub	sp, #16
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  USBD_Status ret = USBD_OK;
 800749a:	2300      	movs	r3, #0
 800749c:	73fb      	strb	r3, [r7, #15]
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2205      	movs	r2, #5
 80074a2:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
  DCD_EP_PrepareRx ( pdev,
 80074a6:	2300      	movs	r3, #0
 80074a8:	2200      	movs	r2, #0
 80074aa:	2100      	movs	r1, #0
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f7fe fc2c 	bl	8005d0a <DCD_EP_PrepareRx>
                    0,
                    NULL,
                    0);  

  USB_OTG_EP0_OutStart(pdev);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f7fe faaf 	bl	8005a16 <USB_OTG_EP0_OutStart>
  
  return ret;
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
	...

080074c4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdDevReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  USBD_Status ret = USBD_OK;  
 80074ce:	2300      	movs	r3, #0
 80074d0:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	785b      	ldrb	r3, [r3, #1]
 80074d6:	2b09      	cmp	r3, #9
 80074d8:	d839      	bhi.n	800754e <USBD_StdDevReq+0x8a>
 80074da:	a201      	add	r2, pc, #4	; (adr r2, 80074e0 <USBD_StdDevReq+0x1c>)
 80074dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e0:	08007531 	.word	0x08007531
 80074e4:	08007545 	.word	0x08007545
 80074e8:	0800754f 	.word	0x0800754f
 80074ec:	0800753b 	.word	0x0800753b
 80074f0:	0800754f 	.word	0x0800754f
 80074f4:	08007513 	.word	0x08007513
 80074f8:	08007509 	.word	0x08007509
 80074fc:	0800754f 	.word	0x0800754f
 8007500:	08007527 	.word	0x08007527
 8007504:	0800751d 	.word	0x0800751d
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8007508:	6839      	ldr	r1, [r7, #0]
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f936 	bl	800777c <USBD_GetDescriptor>
    break;
 8007510:	e022      	b.n	8007558 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8007512:	6839      	ldr	r1, [r7, #0]
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 fa4f 	bl	80079b8 <USBD_SetAddress>
    break;
 800751a:	e01d      	b.n	8007558 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 800751c:	6839      	ldr	r1, [r7, #0]
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fa88 	bl	8007a34 <USBD_SetConfig>
    break;
 8007524:	e018      	b.n	8007558 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8007526:	6839      	ldr	r1, [r7, #0]
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 fafd 	bl	8007b28 <USBD_GetConfig>
    break;
 800752e:	e013      	b.n	8007558 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8007530:	6839      	ldr	r1, [r7, #0]
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 fb28 	bl	8007b88 <USBD_GetStatus>
    break;
 8007538:	e00e      	b.n	8007558 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 800753a:	6839      	ldr	r1, [r7, #0]
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 fb4d 	bl	8007bdc <USBD_SetFeature>
    break;
 8007542:	e009      	b.n	8007558 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8007544:	6839      	ldr	r1, [r7, #0]
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 fbb4 	bl	8007cb4 <USBD_ClrFeature>
    break;
 800754c:	e004      	b.n	8007558 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fc20 	bl	8007d96 <USBD_CtlError>
    break;
 8007556:	bf00      	nop
  }
  
  return ret;
 8007558:	7bfb      	ldrb	r3, [r7, #15]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop

08007564 <USBD_StdItfReq>:
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdItfReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  USBD_Status ret = USBD_OK; 
 800756e:	2300      	movs	r3, #0
 8007570:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev.device_status) 
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8007578:	2b03      	cmp	r3, #3
 800757a:	d11b      	bne.n	80075b4 <USBD_StdItfReq+0x50>
  {
  case USB_OTG_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_ITF_MAX_NUM) 
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	889b      	ldrh	r3, [r3, #4]
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b01      	cmp	r3, #1
 8007584:	d811      	bhi.n	80075aa <USBD_StdItfReq+0x46>
    {
      pdev->dev.class_cb->Setup (pdev, req); 
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	88db      	ldrh	r3, [r3, #6]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d110      	bne.n	80075be <USBD_StdItfReq+0x5a>
 800759c:	7bfb      	ldrb	r3, [r7, #15]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10d      	bne.n	80075be <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7ff ff5d 	bl	8007462 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 80075a8:	e009      	b.n	80075be <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 80075aa:	6839      	ldr	r1, [r7, #0]
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fbf2 	bl	8007d96 <USBD_CtlError>
    break;
 80075b2:	e004      	b.n	80075be <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 80075b4:	6839      	ldr	r1, [r7, #0]
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 fbed 	bl	8007d96 <USBD_CtlError>
    break;
 80075bc:	e000      	b.n	80075c0 <USBD_StdItfReq+0x5c>
    break;
 80075be:	bf00      	nop
  }
  return ret;
 80075c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
	...

080075cc <USBD_StdEPReq>:
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdEPReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_Status ret = USBD_OK; 
 80075d6:	2300      	movs	r3, #0
 80075d8:	73fb      	strb	r3, [r7, #15]
  
  ep_addr  = LOBYTE(req->wIndex);   
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	889b      	ldrh	r3, [r3, #4]
 80075de:	73bb      	strb	r3, [r7, #14]
  
  switch (req->bRequest) 
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	785b      	ldrb	r3, [r3, #1]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d039      	beq.n	800765c <USBD_StdEPReq+0x90>
 80075e8:	2b03      	cmp	r3, #3
 80075ea:	d002      	beq.n	80075f2 <USBD_StdEPReq+0x26>
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d06c      	beq.n	80076ca <USBD_StdEPReq+0xfe>
      break;
    }
    break;
    
  default:
    break;
 80075f0:	e0bd      	b.n	800776e <USBD_StdEPReq+0x1a2>
    switch (pdev->dev.device_status) 
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d002      	beq.n	8007602 <USBD_StdEPReq+0x36>
 80075fc:	2b03      	cmp	r3, #3
 80075fe:	d00c      	beq.n	800761a <USBD_StdEPReq+0x4e>
 8007600:	e025      	b.n	800764e <USBD_StdEPReq+0x82>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8007602:	7bbb      	ldrb	r3, [r7, #14]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d027      	beq.n	8007658 <USBD_StdEPReq+0x8c>
 8007608:	7bbb      	ldrb	r3, [r7, #14]
 800760a:	2b80      	cmp	r3, #128	; 0x80
 800760c:	d024      	beq.n	8007658 <USBD_StdEPReq+0x8c>
        DCD_EP_Stall(pdev , ep_addr);
 800760e:	7bbb      	ldrb	r3, [r7, #14]
 8007610:	4619      	mov	r1, r3
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7fe fbf7 	bl	8005e06 <DCD_EP_Stall>
      break;	
 8007618:	e01e      	b.n	8007658 <USBD_StdEPReq+0x8c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	885b      	ldrh	r3, [r3, #2]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d10a      	bne.n	8007638 <USBD_StdEPReq+0x6c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8007622:	7bbb      	ldrb	r3, [r7, #14]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d007      	beq.n	8007638 <USBD_StdEPReq+0x6c>
 8007628:	7bbb      	ldrb	r3, [r7, #14]
 800762a:	2b80      	cmp	r3, #128	; 0x80
 800762c:	d004      	beq.n	8007638 <USBD_StdEPReq+0x6c>
          DCD_EP_Stall(pdev , ep_addr);
 800762e:	7bbb      	ldrb	r3, [r7, #14]
 8007630:	4619      	mov	r1, r3
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7fe fbe7 	bl	8005e06 <DCD_EP_Stall>
      pdev->dev.class_cb->Setup (pdev, req);   
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	6839      	ldr	r1, [r7, #0]
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f7ff ff0b 	bl	8007462 <USBD_CtlSendStatus>
      break;
 800764c:	e005      	b.n	800765a <USBD_StdEPReq+0x8e>
      USBD_CtlError(pdev , req);
 800764e:	6839      	ldr	r1, [r7, #0]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 fba0 	bl	8007d96 <USBD_CtlError>
      break;    
 8007656:	e000      	b.n	800765a <USBD_StdEPReq+0x8e>
      break;	
 8007658:	bf00      	nop
    break;
 800765a:	e088      	b.n	800776e <USBD_StdEPReq+0x1a2>
    switch (pdev->dev.device_status) 
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8007662:	2b02      	cmp	r3, #2
 8007664:	d002      	beq.n	800766c <USBD_StdEPReq+0xa0>
 8007666:	2b03      	cmp	r3, #3
 8007668:	d00c      	beq.n	8007684 <USBD_StdEPReq+0xb8>
 800766a:	e025      	b.n	80076b8 <USBD_StdEPReq+0xec>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800766c:	7bbb      	ldrb	r3, [r7, #14]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d027      	beq.n	80076c2 <USBD_StdEPReq+0xf6>
 8007672:	7bbb      	ldrb	r3, [r7, #14]
 8007674:	2b80      	cmp	r3, #128	; 0x80
 8007676:	d024      	beq.n	80076c2 <USBD_StdEPReq+0xf6>
        DCD_EP_Stall(pdev , ep_addr);
 8007678:	7bbb      	ldrb	r3, [r7, #14]
 800767a:	4619      	mov	r1, r3
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f7fe fbc2 	bl	8005e06 <DCD_EP_Stall>
      break;	
 8007682:	e01e      	b.n	80076c2 <USBD_StdEPReq+0xf6>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	885b      	ldrh	r3, [r3, #2]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d11c      	bne.n	80076c6 <USBD_StdEPReq+0xfa>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800768c:	7bbb      	ldrb	r3, [r7, #14]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00e      	beq.n	80076b0 <USBD_StdEPReq+0xe4>
 8007692:	7bbb      	ldrb	r3, [r7, #14]
 8007694:	2b80      	cmp	r3, #128	; 0x80
 8007696:	d00b      	beq.n	80076b0 <USBD_StdEPReq+0xe4>
          DCD_EP_ClrStall(pdev , ep_addr);
 8007698:	7bbb      	ldrb	r3, [r7, #14]
 800769a:	4619      	mov	r1, r3
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f7fe fbef 	bl	8005e80 <DCD_EP_ClrStall>
          pdev->dev.class_cb->Setup (pdev, req);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f7ff fed6 	bl	8007462 <USBD_CtlSendStatus>
      break;
 80076b6:	e006      	b.n	80076c6 <USBD_StdEPReq+0xfa>
       USBD_CtlError(pdev , req);
 80076b8:	6839      	ldr	r1, [r7, #0]
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 fb6b 	bl	8007d96 <USBD_CtlError>
      break;    
 80076c0:	e002      	b.n	80076c8 <USBD_StdEPReq+0xfc>
      break;	
 80076c2:	bf00      	nop
 80076c4:	e053      	b.n	800776e <USBD_StdEPReq+0x1a2>
      break;
 80076c6:	bf00      	nop
    break;
 80076c8:	e051      	b.n	800776e <USBD_StdEPReq+0x1a2>
    switch (pdev->dev.device_status) 
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d002      	beq.n	80076da <USBD_StdEPReq+0x10e>
 80076d4:	2b03      	cmp	r3, #3
 80076d6:	d00c      	beq.n	80076f2 <USBD_StdEPReq+0x126>
 80076d8:	e042      	b.n	8007760 <USBD_StdEPReq+0x194>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80076da:	7bbb      	ldrb	r3, [r7, #14]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d044      	beq.n	800776a <USBD_StdEPReq+0x19e>
 80076e0:	7bbb      	ldrb	r3, [r7, #14]
 80076e2:	2b80      	cmp	r3, #128	; 0x80
 80076e4:	d041      	beq.n	800776a <USBD_StdEPReq+0x19e>
        DCD_EP_Stall(pdev , ep_addr);
 80076e6:	7bbb      	ldrb	r3, [r7, #14]
 80076e8:	4619      	mov	r1, r3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7fe fb8b 	bl	8005e06 <DCD_EP_Stall>
      break;	
 80076f0:	e03b      	b.n	800776a <USBD_StdEPReq+0x19e>
      if ((ep_addr & 0x80)== 0x80)
 80076f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	da15      	bge.n	8007726 <USBD_StdEPReq+0x15a>
        if(pdev->dev.in_ep[ep_addr & 0x7F].is_stall)
 80076fa:	7bbb      	ldrb	r3, [r7, #14]
 80076fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007700:	6879      	ldr	r1, [r7, #4]
 8007702:	4613      	mov	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4413      	add	r3, r2
 8007708:	00db      	lsls	r3, r3, #3
 800770a:	440b      	add	r3, r1
 800770c:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d003      	beq.n	800771e <USBD_StdEPReq+0x152>
          USBD_ep_status = 0x0001;     
 8007716:	4b18      	ldr	r3, [pc, #96]	; (8007778 <USBD_StdEPReq+0x1ac>)
 8007718:	2201      	movs	r2, #1
 800771a:	601a      	str	r2, [r3, #0]
 800771c:	e01a      	b.n	8007754 <USBD_StdEPReq+0x188>
          USBD_ep_status = 0x0000;  
 800771e:	4b16      	ldr	r3, [pc, #88]	; (8007778 <USBD_StdEPReq+0x1ac>)
 8007720:	2200      	movs	r2, #0
 8007722:	601a      	str	r2, [r3, #0]
 8007724:	e016      	b.n	8007754 <USBD_StdEPReq+0x188>
      else if ((ep_addr & 0x80)== 0x00)
 8007726:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800772a:	2b00      	cmp	r3, #0
 800772c:	db12      	blt.n	8007754 <USBD_StdEPReq+0x188>
        if(pdev->dev.out_ep[ep_addr].is_stall)
 800772e:	7bba      	ldrb	r2, [r7, #14]
 8007730:	6879      	ldr	r1, [r7, #4]
 8007732:	4613      	mov	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4413      	add	r3, r2
 8007738:	00db      	lsls	r3, r3, #3
 800773a:	440b      	add	r3, r1
 800773c:	f203 3376 	addw	r3, r3, #886	; 0x376
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d003      	beq.n	800774e <USBD_StdEPReq+0x182>
          USBD_ep_status = 0x0001;     
 8007746:	4b0c      	ldr	r3, [pc, #48]	; (8007778 <USBD_StdEPReq+0x1ac>)
 8007748:	2201      	movs	r2, #1
 800774a:	601a      	str	r2, [r3, #0]
 800774c:	e002      	b.n	8007754 <USBD_StdEPReq+0x188>
          USBD_ep_status = 0x0000;     
 800774e:	4b0a      	ldr	r3, [pc, #40]	; (8007778 <USBD_StdEPReq+0x1ac>)
 8007750:	2200      	movs	r2, #0
 8007752:	601a      	str	r2, [r3, #0]
      USBD_CtlSendData (pdev,
 8007754:	2202      	movs	r2, #2
 8007756:	4908      	ldr	r1, [pc, #32]	; (8007778 <USBD_StdEPReq+0x1ac>)
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7ff fe3a 	bl	80073d2 <USBD_CtlSendData>
      break;
 800775e:	e005      	b.n	800776c <USBD_StdEPReq+0x1a0>
       USBD_CtlError(pdev , req);
 8007760:	6839      	ldr	r1, [r7, #0]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fb17 	bl	8007d96 <USBD_CtlError>
      break;
 8007768:	e000      	b.n	800776c <USBD_StdEPReq+0x1a0>
      break;	
 800776a:	bf00      	nop
    break;
 800776c:	bf00      	nop
  }
  return ret;
 800776e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007770:	4618      	mov	r0, r3
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	200001cc 	.word	0x200001cc

0800777c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USB_OTG_CORE_HANDLE  *pdev, 
                               USB_SETUP_REQ *req)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	885b      	ldrh	r3, [r3, #2]
 800778a:	0a1b      	lsrs	r3, r3, #8
 800778c:	b29b      	uxth	r3, r3
 800778e:	3b01      	subs	r3, #1
 8007790:	2b06      	cmp	r3, #6
 8007792:	f200 80f1 	bhi.w	8007978 <USBD_GetDescriptor+0x1fc>
 8007796:	a201      	add	r2, pc, #4	; (adr r2, 800779c <USBD_GetDescriptor+0x20>)
 8007798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779c:	080077b9 	.word	0x080077b9
 80077a0:	080077e9 	.word	0x080077e9
 80077a4:	08007837 	.word	0x08007837
 80077a8:	08007979 	.word	0x08007979
 80077ac:	08007979 	.word	0x08007979
 80077b0:	080078fd 	.word	0x080078fd
 80077b4:	08007947 	.word	0x08007947
  {
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->dev.usr_device->GetDeviceDescriptor(pdev->cfg.speed, &len);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	7892      	ldrb	r2, [r2, #2]
 80077c4:	f107 010a 	add.w	r1, r7, #10
 80077c8:	4610      	mov	r0, r2
 80077ca:	4798      	blx	r3
 80077cc:	60f8      	str	r0, [r7, #12]
    if ((req->wLength == 64) ||( pdev->dev.device_status == USB_OTG_DEFAULT))  
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	88db      	ldrh	r3, [r3, #6]
 80077d2:	2b40      	cmp	r3, #64	; 0x40
 80077d4:	d005      	beq.n	80077e2 <USBD_GetDescriptor+0x66>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80077dc:	2b01      	cmp	r3, #1
 80077de:	f040 80d0 	bne.w	8007982 <USBD_GetDescriptor+0x206>
    {                  
      len = 8;
 80077e2:	2308      	movs	r3, #8
 80077e4:	817b      	strh	r3, [r7, #10]
    }
    break;
 80077e6:	e0cc      	b.n	8007982 <USBD_GetDescriptor+0x206>
    
  case USB_DESC_TYPE_CONFIGURATION:
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetConfigDescriptor(pdev->cfg.speed, &len);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 80077ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	7892      	ldrb	r2, [r2, #2]
 80077f4:	f107 010a 	add.w	r1, r7, #10
 80077f8:	4610      	mov	r0, r2
 80077fa:	4798      	blx	r3
 80077fc:	60f8      	str	r0, [r7, #12]
#ifdef USB_OTG_HS_CORE
    if((pdev->cfg.speed == USB_OTG_SPEED_FULL )&&
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	789b      	ldrb	r3, [r3, #2]
 8007802:	2b01      	cmp	r3, #1
 8007804:	d10e      	bne.n	8007824 <USBD_GetDescriptor+0xa8>
       (pdev->cfg.phy_itface  == USB_OTG_ULPI_PHY))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	7a1b      	ldrb	r3, [r3, #8]
    if((pdev->cfg.speed == USB_OTG_SPEED_FULL )&&
 800780a:	2b01      	cmp	r3, #1
 800780c:	d10a      	bne.n	8007824 <USBD_GetDescriptor+0xa8>
    {
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetOtherConfigDescriptor(pdev->cfg.speed, &len);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8007814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	7892      	ldrb	r2, [r2, #2]
 800781a:	f107 010a 	add.w	r1, r7, #10
 800781e:	4610      	mov	r0, r2
 8007820:	4798      	blx	r3
 8007822:	60f8      	str	r0, [r7, #12]
    }
#endif  
    pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	3301      	adds	r3, #1
 8007828:	2202      	movs	r2, #2
 800782a:	701a      	strb	r2, [r3, #0]
    pdev->dev.pConfig_descriptor = pbuf;    
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
    break;
 8007834:	e0a6      	b.n	8007984 <USBD_GetDescriptor+0x208>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	885b      	ldrh	r3, [r3, #2]
 800783a:	b2db      	uxtb	r3, r3
 800783c:	2b05      	cmp	r3, #5
 800783e:	d857      	bhi.n	80078f0 <USBD_GetDescriptor+0x174>
 8007840:	a201      	add	r2, pc, #4	; (adr r2, 8007848 <USBD_GetDescriptor+0xcc>)
 8007842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007846:	bf00      	nop
 8007848:	08007861 	.word	0x08007861
 800784c:	08007879 	.word	0x08007879
 8007850:	08007891 	.word	0x08007891
 8007854:	080078a9 	.word	0x080078a9
 8007858:	080078c1 	.word	0x080078c1
 800785c:	080078d9 	.word	0x080078d9
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->dev.usr_device->GetLangIDStrDescriptor(pdev->cfg.speed, &len);        
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	7892      	ldrb	r2, [r2, #2]
 800786c:	f107 010a 	add.w	r1, r7, #10
 8007870:	4610      	mov	r0, r2
 8007872:	4798      	blx	r3
 8007874:	60f8      	str	r0, [r7, #12]
      break;
 8007876:	e040      	b.n	80078fa <USBD_GetDescriptor+0x17e>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->dev.usr_device->GetManufacturerStrDescriptor(pdev->cfg.speed, &len);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	7892      	ldrb	r2, [r2, #2]
 8007884:	f107 010a 	add.w	r1, r7, #10
 8007888:	4610      	mov	r0, r2
 800788a:	4798      	blx	r3
 800788c:	60f8      	str	r0, [r7, #12]
      break;
 800788e:	e034      	b.n	80078fa <USBD_GetDescriptor+0x17e>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->dev.usr_device->GetProductStrDescriptor(pdev->cfg.speed, &len);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	7892      	ldrb	r2, [r2, #2]
 800789c:	f107 010a 	add.w	r1, r7, #10
 80078a0:	4610      	mov	r0, r2
 80078a2:	4798      	blx	r3
 80078a4:	60f8      	str	r0, [r7, #12]
      break;
 80078a6:	e028      	b.n	80078fa <USBD_GetDescriptor+0x17e>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->dev.usr_device->GetSerialStrDescriptor(pdev->cfg.speed, &len);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	7892      	ldrb	r2, [r2, #2]
 80078b4:	f107 010a 	add.w	r1, r7, #10
 80078b8:	4610      	mov	r0, r2
 80078ba:	4798      	blx	r3
 80078bc:	60f8      	str	r0, [r7, #12]
      break;
 80078be:	e01c      	b.n	80078fa <USBD_GetDescriptor+0x17e>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->dev.usr_device->GetConfigurationStrDescriptor(pdev->cfg.speed, &len);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 80078c6:	695b      	ldr	r3, [r3, #20]
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	7892      	ldrb	r2, [r2, #2]
 80078cc:	f107 010a 	add.w	r1, r7, #10
 80078d0:	4610      	mov	r0, r2
 80078d2:	4798      	blx	r3
 80078d4:	60f8      	str	r0, [r7, #12]
      break;
 80078d6:	e010      	b.n	80078fa <USBD_GetDescriptor+0x17e>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->dev.usr_device->GetInterfaceStrDescriptor(pdev->cfg.speed, &len);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	7892      	ldrb	r2, [r2, #2]
 80078e4:	f107 010a 	add.w	r1, r7, #10
 80078e8:	4610      	mov	r0, r2
 80078ea:	4798      	blx	r3
 80078ec:	60f8      	str	r0, [r7, #12]
      break;
 80078ee:	e004      	b.n	80078fa <USBD_GetDescriptor+0x17e>
    default:
#ifdef USB_SUPPORT_USER_STRING_DESC
      pbuf = pdev->dev.class_cb->GetUsrStrDescriptor(pdev->cfg.speed, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fa4f 	bl	8007d96 <USBD_CtlError>
      return;
 80078f8:	e059      	b.n	80079ae <USBD_GetDescriptor+0x232>
#endif /* USBD_CtlError(pdev , req); */      
    }
    break;
 80078fa:	e043      	b.n	8007984 <USBD_GetDescriptor+0x208>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   
#ifdef USB_OTG_HS_CORE
    if(pdev->cfg.speed == USB_OTG_SPEED_HIGH  )   
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	789b      	ldrb	r3, [r3, #2]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d11b      	bne.n	800793c <USBD_GetDescriptor+0x1c0>
    {
      
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetConfigDescriptor(pdev->cfg.speed, &len);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 800790a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	7892      	ldrb	r2, [r2, #2]
 8007910:	f107 010a 	add.w	r1, r7, #10
 8007914:	4610      	mov	r0, r2
 8007916:	4798      	blx	r3
 8007918:	60f8      	str	r0, [r7, #12]
            
      USBD_DeviceQualifierDesc[4]= pbuf[14];
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	7b9a      	ldrb	r2, [r3, #14]
 800791e:	4b25      	ldr	r3, [pc, #148]	; (80079b4 <USBD_GetDescriptor+0x238>)
 8007920:	711a      	strb	r2, [r3, #4]
      USBD_DeviceQualifierDesc[5]= pbuf[15];
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	7bda      	ldrb	r2, [r3, #15]
 8007926:	4b23      	ldr	r3, [pc, #140]	; (80079b4 <USBD_GetDescriptor+0x238>)
 8007928:	715a      	strb	r2, [r3, #5]
      USBD_DeviceQualifierDesc[6]= pbuf[16];
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	7c1a      	ldrb	r2, [r3, #16]
 800792e:	4b21      	ldr	r3, [pc, #132]	; (80079b4 <USBD_GetDescriptor+0x238>)
 8007930:	719a      	strb	r2, [r3, #6]
      
      pbuf = USBD_DeviceQualifierDesc;
 8007932:	4b20      	ldr	r3, [pc, #128]	; (80079b4 <USBD_GetDescriptor+0x238>)
 8007934:	60fb      	str	r3, [r7, #12]
      len  = USB_LEN_DEV_QUALIFIER_DESC;
 8007936:	230a      	movs	r3, #10
 8007938:	817b      	strh	r3, [r7, #10]
      break;
 800793a:	e023      	b.n	8007984 <USBD_GetDescriptor+0x208>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fa29 	bl	8007d96 <USBD_CtlError>
      return;
 8007944:	e033      	b.n	80079ae <USBD_GetDescriptor+0x232>
#endif    

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
#ifdef USB_OTG_HS_CORE   

    if(pdev->cfg.speed == USB_OTG_SPEED_HIGH  )   
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	789b      	ldrb	r3, [r3, #2]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10f      	bne.n	800796e <USBD_GetDescriptor+0x1f2>
    {
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetOtherConfigDescriptor(pdev->cfg.speed, &len);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8007954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	7892      	ldrb	r2, [r2, #2]
 800795a:	f107 010a 	add.w	r1, r7, #10
 800795e:	4610      	mov	r0, r2
 8007960:	4798      	blx	r3
 8007962:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	3301      	adds	r3, #1
 8007968:	2207      	movs	r2, #7
 800796a:	701a      	strb	r2, [r3, #0]
      break; 
 800796c:	e00a      	b.n	8007984 <USBD_GetDescriptor+0x208>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800796e:	6839      	ldr	r1, [r7, #0]
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 fa10 	bl	8007d96 <USBD_CtlError>
      return;
 8007976:	e01a      	b.n	80079ae <USBD_GetDescriptor+0x232>
      return;
#endif     

    
  default: 
     USBD_CtlError(pdev , req);
 8007978:	6839      	ldr	r1, [r7, #0]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fa0b 	bl	8007d96 <USBD_CtlError>
    return;
 8007980:	e015      	b.n	80079ae <USBD_GetDescriptor+0x232>
    break;
 8007982:	bf00      	nop
  }
  
  if((len != 0)&& (req->wLength != 0))
 8007984:	897b      	ldrh	r3, [r7, #10]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d011      	beq.n	80079ae <USBD_GetDescriptor+0x232>
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	88db      	ldrh	r3, [r3, #6]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00d      	beq.n	80079ae <USBD_GetDescriptor+0x232>
  {
    
    len = MIN(len , req->wLength);
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	88da      	ldrh	r2, [r3, #6]
 8007996:	897b      	ldrh	r3, [r7, #10]
 8007998:	4293      	cmp	r3, r2
 800799a:	bf28      	it	cs
 800799c:	4613      	movcs	r3, r2
 800799e:	b29b      	uxth	r3, r3
 80079a0:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 80079a2:	897b      	ldrh	r3, [r7, #10]
 80079a4:	461a      	mov	r2, r3
 80079a6:	68f9      	ldr	r1, [r7, #12]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f7ff fd12 	bl	80073d2 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	20000090 	.word	0x20000090

080079b8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	889b      	ldrh	r3, [r3, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d12c      	bne.n	8007a24 <USBD_SetAddress+0x6c>
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	88db      	ldrh	r3, [r3, #6]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d128      	bne.n	8007a24 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	885b      	ldrh	r3, [r3, #2]
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079dc:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80079e4:	2b03      	cmp	r3, #3
 80079e6:	d104      	bne.n	80079f2 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 80079e8:	6839      	ldr	r1, [r7, #0]
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f9d3 	bl	8007d96 <USBD_CtlError>
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 80079f0:	e01c      	b.n	8007a2c <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev.device_address = dev_addr;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	7bfa      	ldrb	r2, [r7, #15]
 80079f6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
      DCD_EP_SetAddress(pdev, dev_addr);               
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
 80079fc:	4619      	mov	r1, r3
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7fe fa95 	bl	8005f2e <DCD_EP_SetAddress>
      USBD_CtlSendStatus(pdev);                         
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f7ff fd2c 	bl	8007462 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d004      	beq.n	8007a1a <USBD_SetAddress+0x62>
      {
        pdev->dev.device_status  = USB_OTG_ADDRESSED;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2202      	movs	r2, #2
 8007a14:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 8007a18:	e008      	b.n	8007a2c <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev.device_status  = USB_OTG_DEFAULT; 
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 8007a22:	e003      	b.n	8007a2c <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8007a24:	6839      	ldr	r1, [r7, #0]
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f9b5 	bl	8007d96 <USBD_CtlError>
  } 
}
 8007a2c:	bf00      	nop
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	885b      	ldrh	r3, [r3, #2]
 8007a42:	b2da      	uxtb	r2, r3
 8007a44:	4b37      	ldr	r3, [pc, #220]	; (8007b24 <USBD_SetConfig+0xf0>)
 8007a46:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_CFG_MAX_NUM ) 
 8007a48:	4b36      	ldr	r3, [pc, #216]	; (8007b24 <USBD_SetConfig+0xf0>)
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d904      	bls.n	8007a5a <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8007a50:	6839      	ldr	r1, [r7, #0]
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f99f 	bl	8007d96 <USBD_CtlError>
    default:					
       USBD_CtlError(pdev , req);                     
      break;
    }
  }
}
 8007a58:	e05f      	b.n	8007b1a <USBD_SetConfig+0xe6>
    switch (pdev->dev.device_status) 
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d002      	beq.n	8007a6a <USBD_SetConfig+0x36>
 8007a64:	2b03      	cmp	r3, #3
 8007a66:	d01b      	beq.n	8007aa0 <USBD_SetConfig+0x6c>
 8007a68:	e052      	b.n	8007b10 <USBD_SetConfig+0xdc>
      if (cfgidx) 
 8007a6a:	4b2e      	ldr	r3, [pc, #184]	; (8007b24 <USBD_SetConfig+0xf0>)
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d012      	beq.n	8007a98 <USBD_SetConfig+0x64>
        pdev->dev.device_config = cfgidx;
 8007a72:	4b2c      	ldr	r3, [pc, #176]	; (8007b24 <USBD_SetConfig+0xf0>)
 8007a74:	781a      	ldrb	r2, [r3, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        pdev->dev.device_status = USB_OTG_CONFIGURED;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2203      	movs	r2, #3
 8007a80:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        USBD_SetCfg(pdev , cfgidx);
 8007a84:	4b27      	ldr	r3, [pc, #156]	; (8007b24 <USBD_SetConfig+0xf0>)
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	4619      	mov	r1, r3
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7ff fa7c 	bl	8006f88 <USBD_SetCfg>
        USBD_CtlSendStatus(pdev);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f7ff fce6 	bl	8007462 <USBD_CtlSendStatus>
      break;
 8007a96:	e040      	b.n	8007b1a <USBD_SetConfig+0xe6>
         USBD_CtlSendStatus(pdev);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f7ff fce2 	bl	8007462 <USBD_CtlSendStatus>
      break;
 8007a9e:	e03c      	b.n	8007b1a <USBD_SetConfig+0xe6>
      if (cfgidx == 0) 
 8007aa0:	4b20      	ldr	r3, [pc, #128]	; (8007b24 <USBD_SetConfig+0xf0>)
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d112      	bne.n	8007ace <USBD_SetConfig+0x9a>
        pdev->dev.device_status = USB_OTG_ADDRESSED;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2202      	movs	r2, #2
 8007aac:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        pdev->dev.device_config = cfgidx;          
 8007ab0:	4b1c      	ldr	r3, [pc, #112]	; (8007b24 <USBD_SetConfig+0xf0>)
 8007ab2:	781a      	ldrb	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        USBD_ClrCfg(pdev , cfgidx);
 8007aba:	4b1a      	ldr	r3, [pc, #104]	; (8007b24 <USBD_SetConfig+0xf0>)
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	4619      	mov	r1, r3
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f7ff fa79 	bl	8006fb8 <USBD_ClrCfg>
        USBD_CtlSendStatus(pdev);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7ff fccb 	bl	8007462 <USBD_CtlSendStatus>
      break;
 8007acc:	e025      	b.n	8007b1a <USBD_SetConfig+0xe6>
      else  if (cfgidx != pdev->dev.device_config) 
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 8007ad4:	4b13      	ldr	r3, [pc, #76]	; (8007b24 <USBD_SetConfig+0xf0>)
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d015      	beq.n	8007b08 <USBD_SetConfig+0xd4>
        USBD_ClrCfg(pdev , pdev->dev.device_config);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7ff fa67 	bl	8006fb8 <USBD_ClrCfg>
        pdev->dev.device_config = cfgidx;
 8007aea:	4b0e      	ldr	r3, [pc, #56]	; (8007b24 <USBD_SetConfig+0xf0>)
 8007aec:	781a      	ldrb	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        USBD_SetCfg(pdev , cfgidx);
 8007af4:	4b0b      	ldr	r3, [pc, #44]	; (8007b24 <USBD_SetConfig+0xf0>)
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	4619      	mov	r1, r3
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f7ff fa44 	bl	8006f88 <USBD_SetCfg>
        USBD_CtlSendStatus(pdev);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f7ff fcae 	bl	8007462 <USBD_CtlSendStatus>
      break;
 8007b06:	e008      	b.n	8007b1a <USBD_SetConfig+0xe6>
        USBD_CtlSendStatus(pdev);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f7ff fcaa 	bl	8007462 <USBD_CtlSendStatus>
      break;
 8007b0e:	e004      	b.n	8007b1a <USBD_SetConfig+0xe6>
       USBD_CtlError(pdev , req);                     
 8007b10:	6839      	ldr	r1, [r7, #0]
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f93f 	bl	8007d96 <USBD_CtlError>
      break;
 8007b18:	bf00      	nop
}
 8007b1a:	bf00      	nop
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	200001d8 	.word	0x200001d8

08007b28 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
 
  if (req->wLength != 1) 
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	88db      	ldrh	r3, [r3, #6]
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d004      	beq.n	8007b44 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 8007b3a:	6839      	ldr	r1, [r7, #0]
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 f92a 	bl	8007d96 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8007b42:	e01b      	b.n	8007b7c <USBD_GetConfig+0x54>
    switch (pdev->dev.device_status )  
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d002      	beq.n	8007b54 <USBD_GetConfig+0x2c>
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d006      	beq.n	8007b60 <USBD_GetConfig+0x38>
 8007b52:	e00e      	b.n	8007b72 <USBD_GetConfig+0x4a>
      USBD_CtlSendData (pdev, 
 8007b54:	2201      	movs	r2, #1
 8007b56:	490b      	ldr	r1, [pc, #44]	; (8007b84 <USBD_GetConfig+0x5c>)
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f7ff fc3a 	bl	80073d2 <USBD_CtlSendData>
      break;
 8007b5e:	e00d      	b.n	8007b7c <USBD_GetConfig+0x54>
      USBD_CtlSendData (pdev, 
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8007b66:	2201      	movs	r2, #1
 8007b68:	4619      	mov	r1, r3
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7ff fc31 	bl	80073d2 <USBD_CtlSendData>
      break;
 8007b70:	e004      	b.n	8007b7c <USBD_GetConfig+0x54>
       USBD_CtlError(pdev , req);
 8007b72:	6839      	ldr	r1, [r7, #0]
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 f90e 	bl	8007d96 <USBD_CtlError>
      break;
 8007b7a:	bf00      	nop
}
 8007b7c:	bf00      	nop
 8007b7e:	3708      	adds	r7, #8
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	200001d0 	.word	0x200001d0

08007b88 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev.device_status) 
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8007b98:	3b02      	subs	r3, #2
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d813      	bhi.n	8007bc6 <USBD_GetStatus+0x3e>
  {
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    
#ifdef USBD_SELF_POWERED
    USBD_cfg_status = USB_CONFIG_SELF_POWERED;                                    
 8007b9e:	4b0e      	ldr	r3, [pc, #56]	; (8007bd8 <USBD_GetStatus+0x50>)
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	601a      	str	r2, [r3, #0]
#else
    USBD_cfg_status = 0x00;                                    
#endif
                      
    if (pdev->dev.DevRemoteWakeup) 
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d005      	beq.n	8007bba <USBD_GetStatus+0x32>
    {
      USBD_cfg_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8007bae:	4b0a      	ldr	r3, [pc, #40]	; (8007bd8 <USBD_GetStatus+0x50>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f043 0302 	orr.w	r3, r3, #2
 8007bb6:	4a08      	ldr	r2, [pc, #32]	; (8007bd8 <USBD_GetStatus+0x50>)
 8007bb8:	6013      	str	r3, [r2, #0]
    }
    
    USBD_CtlSendData (pdev, 
 8007bba:	2202      	movs	r2, #2
 8007bbc:	4906      	ldr	r1, [pc, #24]	; (8007bd8 <USBD_GetStatus+0x50>)
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7ff fc07 	bl	80073d2 <USBD_CtlSendData>
                      (uint8_t *)&USBD_cfg_status,
                      2);
    break;
 8007bc4:	e004      	b.n	8007bd0 <USBD_GetStatus+0x48>
    
  default :
    USBD_CtlError(pdev , req);                        
 8007bc6:	6839      	ldr	r1, [r7, #0]
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 f8e4 	bl	8007d96 <USBD_CtlError>
    break;
 8007bce:	bf00      	nop
  }
}
 8007bd0:	bf00      	nop
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	200001d4 	.word	0x200001d4

08007bdc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]

  USB_OTG_DCTL_TypeDef     dctl;
  uint8_t test_mode = 0;
 8007be6:	2300      	movs	r3, #0
 8007be8:	73fb      	strb	r3, [r7, #15]
 
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	885b      	ldrh	r3, [r3, #2]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d10e      	bne.n	8007c10 <USBD_SetFeature+0x34>
  {
    pdev->dev.DevRemoteWakeup = 1;  
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    pdev->dev.class_cb->Setup (pdev, req);   
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	6839      	ldr	r1, [r7, #0]
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f7ff fc2a 	bl	8007462 <USBD_CtlSendStatus>
    SET_TEST_MODE = dctl;
    pdev->dev.test_mode = 1;
    USBD_CtlSendStatus(pdev);
  }

}
 8007c0e:	e04b      	b.n	8007ca8 <USBD_SetFeature+0xcc>
  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	885b      	ldrh	r3, [r3, #2]
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d147      	bne.n	8007ca8 <USBD_SetFeature+0xcc>
           ((req->wIndex & 0xFF) == 0))
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	889b      	ldrh	r3, [r3, #4]
 8007c1c:	b2db      	uxtb	r3, r3
  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d142      	bne.n	8007ca8 <USBD_SetFeature+0xcc>
    dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	60bb      	str	r3, [r7, #8]
    test_mode = req->wIndex >> 8;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	889b      	ldrh	r3, [r3, #4]
 8007c2e:	0a1b      	lsrs	r3, r3, #8
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	73fb      	strb	r3, [r7, #15]
    switch (test_mode) 
 8007c34:	7bfb      	ldrb	r3, [r7, #15]
 8007c36:	3b01      	subs	r3, #1
 8007c38:	2b04      	cmp	r3, #4
 8007c3a:	d82b      	bhi.n	8007c94 <USBD_SetFeature+0xb8>
 8007c3c:	a201      	add	r2, pc, #4	; (adr r2, 8007c44 <USBD_SetFeature+0x68>)
 8007c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c42:	bf00      	nop
 8007c44:	08007c59 	.word	0x08007c59
 8007c48:	08007c65 	.word	0x08007c65
 8007c4c:	08007c71 	.word	0x08007c71
 8007c50:	08007c7d 	.word	0x08007c7d
 8007c54:	08007c89 	.word	0x08007c89
      dctl.b.tstctl = 1;
 8007c58:	7a3b      	ldrb	r3, [r7, #8]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f362 1306 	bfi	r3, r2, #4, #3
 8007c60:	723b      	strb	r3, [r7, #8]
      break;
 8007c62:	e017      	b.n	8007c94 <USBD_SetFeature+0xb8>
      dctl.b.tstctl = 2;
 8007c64:	7a3b      	ldrb	r3, [r7, #8]
 8007c66:	2202      	movs	r2, #2
 8007c68:	f362 1306 	bfi	r3, r2, #4, #3
 8007c6c:	723b      	strb	r3, [r7, #8]
      break;
 8007c6e:	e011      	b.n	8007c94 <USBD_SetFeature+0xb8>
      dctl.b.tstctl = 3;
 8007c70:	7a3b      	ldrb	r3, [r7, #8]
 8007c72:	2203      	movs	r2, #3
 8007c74:	f362 1306 	bfi	r3, r2, #4, #3
 8007c78:	723b      	strb	r3, [r7, #8]
      break;
 8007c7a:	e00b      	b.n	8007c94 <USBD_SetFeature+0xb8>
      dctl.b.tstctl = 4;
 8007c7c:	7a3b      	ldrb	r3, [r7, #8]
 8007c7e:	2204      	movs	r2, #4
 8007c80:	f362 1306 	bfi	r3, r2, #4, #3
 8007c84:	723b      	strb	r3, [r7, #8]
      break;
 8007c86:	e005      	b.n	8007c94 <USBD_SetFeature+0xb8>
      dctl.b.tstctl = 5;
 8007c88:	7a3b      	ldrb	r3, [r7, #8]
 8007c8a:	2205      	movs	r2, #5
 8007c8c:	f362 1306 	bfi	r3, r2, #4, #3
 8007c90:	723b      	strb	r3, [r7, #8]
      break;
 8007c92:	bf00      	nop
    SET_TEST_MODE = dctl;
 8007c94:	4a06      	ldr	r2, [pc, #24]	; (8007cb0 <USBD_SetFeature+0xd4>)
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	6013      	str	r3, [r2, #0]
    pdev->dev.test_mode = 1;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
    USBD_CtlSendStatus(pdev);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f7ff fbdd 	bl	8007462 <USBD_CtlSendStatus>
}
 8007ca8:	bf00      	nop
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	200001e8 	.word	0x200001e8

08007cb4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev.device_status)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8007cc4:	3b02      	subs	r3, #2
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d812      	bhi.n	8007cf0 <USBD_ClrFeature+0x3c>
  {
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	885b      	ldrh	r3, [r3, #2]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d113      	bne.n	8007cfa <USBD_ClrFeature+0x46>
    {
      pdev->dev.DevRemoteWakeup = 0; 
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
      pdev->dev.class_cb->Setup (pdev, req);   
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	6839      	ldr	r1, [r7, #0]
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f7ff fbba 	bl	8007462 <USBD_CtlSendStatus>
    }
    break;
 8007cee:	e004      	b.n	8007cfa <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 8007cf0:	6839      	ldr	r1, [r7, #0]
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f84f 	bl	8007d96 <USBD_CtlError>
    break;
 8007cf8:	e000      	b.n	8007cfc <USBD_ClrFeature+0x48>
    break;
 8007cfa:	bf00      	nop
  }
}
 8007cfc:	bf00      	nop
 8007cfe:	3708      	adds	r7, #8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdev->dev.setup_packet);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 25cc 	ldrb.w	r2, [r3, #1484]	; 0x5cc
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdev->dev.setup_packet +  1);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 25cd 	ldrb.w	r2, [r3, #1485]	; 0x5cd
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdev->dev.setup_packet +  2);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 35ce 	ldrb.w	r3, [r3, #1486]	; 0x5ce
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 35cf 	ldrb.w	r3, [r3, #1487]	; 0x5cf
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	021b      	lsls	r3, r3, #8
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	4413      	add	r3, r2
 8007d38:	b29a      	uxth	r2, r3
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdev->dev.setup_packet +  4);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 35d0 	ldrb.w	r3, [r3, #1488]	; 0x5d0
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 35d1 	ldrb.w	r3, [r3, #1489]	; 0x5d1
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	021b      	lsls	r3, r3, #8
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	4413      	add	r3, r2
 8007d54:	b29a      	uxth	r2, r3
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdev->dev.setup_packet +  6);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 35d2 	ldrb.w	r3, [r3, #1490]	; 0x5d2
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 35d3 	ldrb.w	r3, [r3, #1491]	; 0x5d3
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	021b      	lsls	r3, r3, #8
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	4413      	add	r3, r2
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	80da      	strh	r2, [r3, #6]
  
  pdev->dev.in_ep[0].ctl_data_len = req->wLength  ;
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	88db      	ldrh	r3, [r3, #6]
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  pdev->dev.device_state = USB_OTG_EP0_SETUP;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
}
 8007d8a:	bf00      	nop
 8007d8c:	370c      	adds	r7, #12
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr

08007d96 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b082      	sub	sp, #8
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
 8007d9e:	6039      	str	r1, [r7, #0]
  
  DCD_EP_Stall(pdev , 0x80);
 8007da0:	2180      	movs	r1, #128	; 0x80
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f7fe f82f 	bl	8005e06 <DCD_EP_Stall>
  DCD_EP_Stall(pdev , 0);
 8007da8:	2100      	movs	r1, #0
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f7fe f82b 	bl	8005e06 <DCD_EP_Stall>
  USB_OTG_EP0_OutStart(pdev);  
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f7fd fe30 	bl	8005a16 <USB_OTG_EP0_OutStart>
}
 8007db6:	bf00      	nop
 8007db8:	3708      	adds	r7, #8
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b086      	sub	sp, #24
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	60f8      	str	r0, [r7, #12]
 8007dc6:	60b9      	str	r1, [r7, #8]
 8007dc8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d033      	beq.n	8007e3c <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f000 f835 	bl	8007e44 <USBD_GetLen>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	3301      	adds	r3, #1
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	005b      	lsls	r3, r3, #1
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8007de8:	7dfb      	ldrb	r3, [r7, #23]
 8007dea:	1c5a      	adds	r2, r3, #1
 8007dec:	75fa      	strb	r2, [r7, #23]
 8007dee:	461a      	mov	r2, r3
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	4413      	add	r3, r2
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	8812      	ldrh	r2, [r2, #0]
 8007df8:	b2d2      	uxtb	r2, r2
 8007dfa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8007dfc:	7dfb      	ldrb	r3, [r7, #23]
 8007dfe:	1c5a      	adds	r2, r3, #1
 8007e00:	75fa      	strb	r2, [r7, #23]
 8007e02:	461a      	mov	r2, r3
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	4413      	add	r3, r2
 8007e08:	2203      	movs	r2, #3
 8007e0a:	701a      	strb	r2, [r3, #0]
    
    while (*desc != NULL) 
 8007e0c:	e012      	b.n	8007e34 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 8007e0e:	7dfb      	ldrb	r3, [r7, #23]
 8007e10:	1c5a      	adds	r2, r3, #1
 8007e12:	75fa      	strb	r2, [r7, #23]
 8007e14:	461a      	mov	r2, r3
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	441a      	add	r2, r3
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	1c59      	adds	r1, r3, #1
 8007e1e:	60f9      	str	r1, [r7, #12]
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8007e24:	7dfb      	ldrb	r3, [r7, #23]
 8007e26:	1c5a      	adds	r2, r3, #1
 8007e28:	75fa      	strb	r2, [r7, #23]
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	4413      	add	r3, r2
 8007e30:	2200      	movs	r2, #0
 8007e32:	701a      	strb	r2, [r3, #0]
    while (*desc != NULL) 
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1e8      	bne.n	8007e0e <USBD_GetString+0x50>
    }
  } 
}
 8007e3c:	bf00      	nop
 8007e3e:	3718      	adds	r7, #24
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	73fb      	strb	r3, [r7, #15]

    while (*buf != NULL) 
 8007e50:	e005      	b.n	8007e5e <USBD_GetLen+0x1a>
    {
        len++;
 8007e52:	7bfb      	ldrb	r3, [r7, #15]
 8007e54:	3301      	adds	r3, #1
 8007e56:	73fb      	strb	r3, [r7, #15]
        buf++;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	607b      	str	r3, [r7, #4]
    while (*buf != NULL) 
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1f5      	bne.n	8007e52 <USBD_GetLen+0xe>
    }

    return len;
 8007e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3714      	adds	r7, #20
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <USBD_USR_Init>:
* @brief  USBD_USR_Init 
*         Displays the message on LCD for host lib initialization
* @param  None
* @retval None
*/
void USBD_USR_Init(void) {
 8007e74:	b480      	push	{r7}
 8007e76:	af00      	add	r7, sp, #0
	TM_USB_HIDDEVICE_INT_Status = TM_USB_HIDDEVICE_Status_Connected;
 8007e78:	4b03      	ldr	r3, [pc, #12]	; (8007e88 <USBD_USR_Init+0x14>)
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	701a      	strb	r2, [r3, #0]
}
 8007e7e:	bf00      	nop
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr
 8007e88:	200001d9 	.word	0x200001d9

08007e8c <USBD_USR_DeviceReset>:
* @brief  USBD_USR_DeviceReset 
*         Displays the message on LCD on device Reset Event
* @param  speed : device speed
* @retval None
*/
void USBD_USR_DeviceReset(uint8_t speed) {
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	4603      	mov	r3, r0
 8007e94:	71fb      	strb	r3, [r7, #7]
	TM_USB_HIDDEVICE_INT_Status = TM_USB_HIDDEVICE_Status_Disconnected;
 8007e96:	4b04      	ldr	r3, [pc, #16]	; (8007ea8 <USBD_USR_DeviceReset+0x1c>)
 8007e98:	2202      	movs	r2, #2
 8007e9a:	701a      	strb	r2, [r3, #0]
}
 8007e9c:	bf00      	nop
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr
 8007ea8:	200001d9 	.word	0x200001d9

08007eac <USBD_USR_DeviceConfigured>:
* @brief  USBD_USR_DeviceConfigured
*         Displays the message on LCD on device configuration Event
* @param  None
* @retval Staus
*/
void USBD_USR_DeviceConfigured(void) {
 8007eac:	b480      	push	{r7}
 8007eae:	af00      	add	r7, sp, #0
	TM_USB_HIDDEVICE_INT_Status = TM_USB_HIDDEVICE_Status_Connected;
 8007eb0:	4b03      	ldr	r3, [pc, #12]	; (8007ec0 <USBD_USR_DeviceConfigured+0x14>)
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	701a      	strb	r2, [r3, #0]
}
 8007eb6:	bf00      	nop
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	200001d9 	.word	0x200001d9

08007ec4 <USBD_USR_DeviceConnected>:
* @brief  USBD_USR_DeviceConnected
*         Displays the message on LCD on device connection Event
* @param  None
* @retval Staus
*/
void USBD_USR_DeviceConnected(void) {
 8007ec4:	b480      	push	{r7}
 8007ec6:	af00      	add	r7, sp, #0
	TM_USB_HIDDEVICE_INT_Status = TM_USB_HIDDEVICE_Status_Connected;
 8007ec8:	4b03      	ldr	r3, [pc, #12]	; (8007ed8 <USBD_USR_DeviceConnected+0x14>)
 8007eca:	2201      	movs	r2, #1
 8007ecc:	701a      	strb	r2, [r3, #0]
}
 8007ece:	bf00      	nop
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	200001d9 	.word	0x200001d9

08007edc <USBD_USR_DeviceDisconnected>:
* @brief  USBD_USR_DeviceDisonnected
*         Displays the message on LCD on device disconnection Event
* @param  None
* @retval Staus
*/
void USBD_USR_DeviceDisconnected(void) {
 8007edc:	b480      	push	{r7}
 8007ede:	af00      	add	r7, sp, #0
	TM_USB_HIDDEVICE_INT_Status = TM_USB_HIDDEVICE_Status_Disconnected;
 8007ee0:	4b03      	ldr	r3, [pc, #12]	; (8007ef0 <USBD_USR_DeviceDisconnected+0x14>)
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	701a      	strb	r2, [r3, #0]
}
 8007ee6:	bf00      	nop
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	200001d9 	.word	0x200001d9

08007ef4 <USBD_USR_DeviceSuspended>:
* @brief  USBD_USR_DeviceSuspended 
*         Displays the message on LCD on device suspend Event
* @param  None
* @retval None
*/
void USBD_USR_DeviceSuspended(void) {
 8007ef4:	b480      	push	{r7}
 8007ef6:	af00      	add	r7, sp, #0
	TM_USB_HIDDEVICE_INT_Status = TM_USB_HIDDEVICE_Status_Disconnected;
 8007ef8:	4b03      	ldr	r3, [pc, #12]	; (8007f08 <USBD_USR_DeviceSuspended+0x14>)
 8007efa:	2202      	movs	r2, #2
 8007efc:	701a      	strb	r2, [r3, #0]
}
 8007efe:	bf00      	nop
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr
 8007f08:	200001d9 	.word	0x200001d9

08007f0c <USBD_USR_DeviceResumed>:
* @brief  USBD_USR_DeviceResumed 
*         Displays the message on LCD on device resume Event
* @param  None
* @retval None
*/
void USBD_USR_DeviceResumed(void) {
 8007f0c:	b480      	push	{r7}
 8007f0e:	af00      	add	r7, sp, #0
    TM_USB_HIDDEVICE_INT_Status = TM_USB_HIDDEVICE_Status_Connected;
 8007f10:	4b03      	ldr	r3, [pc, #12]	; (8007f20 <USBD_USR_DeviceResumed+0x14>)
 8007f12:	2201      	movs	r2, #1
 8007f14:	701a      	strb	r2, [r3, #0]
}
 8007f16:	bf00      	nop
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr
 8007f20:	200001d9 	.word	0x200001d9

08007f24 <__libc_init_array>:
 8007f24:	b570      	push	{r4, r5, r6, lr}
 8007f26:	4e0d      	ldr	r6, [pc, #52]	; (8007f5c <__libc_init_array+0x38>)
 8007f28:	4c0d      	ldr	r4, [pc, #52]	; (8007f60 <__libc_init_array+0x3c>)
 8007f2a:	1ba4      	subs	r4, r4, r6
 8007f2c:	10a4      	asrs	r4, r4, #2
 8007f2e:	2500      	movs	r5, #0
 8007f30:	42a5      	cmp	r5, r4
 8007f32:	d109      	bne.n	8007f48 <__libc_init_array+0x24>
 8007f34:	4e0b      	ldr	r6, [pc, #44]	; (8007f64 <__libc_init_array+0x40>)
 8007f36:	4c0c      	ldr	r4, [pc, #48]	; (8007f68 <__libc_init_array+0x44>)
 8007f38:	f000 f828 	bl	8007f8c <_init>
 8007f3c:	1ba4      	subs	r4, r4, r6
 8007f3e:	10a4      	asrs	r4, r4, #2
 8007f40:	2500      	movs	r5, #0
 8007f42:	42a5      	cmp	r5, r4
 8007f44:	d105      	bne.n	8007f52 <__libc_init_array+0x2e>
 8007f46:	bd70      	pop	{r4, r5, r6, pc}
 8007f48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f4c:	4798      	blx	r3
 8007f4e:	3501      	adds	r5, #1
 8007f50:	e7ee      	b.n	8007f30 <__libc_init_array+0xc>
 8007f52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f56:	4798      	blx	r3
 8007f58:	3501      	adds	r5, #1
 8007f5a:	e7f2      	b.n	8007f42 <__libc_init_array+0x1e>
 8007f5c:	080098d4 	.word	0x080098d4
 8007f60:	080098d4 	.word	0x080098d4
 8007f64:	080098d4 	.word	0x080098d4
 8007f68:	080098d8 	.word	0x080098d8

08007f6c <strcat>:
 8007f6c:	b510      	push	{r4, lr}
 8007f6e:	4602      	mov	r2, r0
 8007f70:	4613      	mov	r3, r2
 8007f72:	3201      	adds	r2, #1
 8007f74:	781c      	ldrb	r4, [r3, #0]
 8007f76:	2c00      	cmp	r4, #0
 8007f78:	d1fa      	bne.n	8007f70 <strcat+0x4>
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f80:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f84:	2a00      	cmp	r2, #0
 8007f86:	d1f9      	bne.n	8007f7c <strcat+0x10>
 8007f88:	bd10      	pop	{r4, pc}
	...

08007f8c <_init>:
 8007f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f8e:	bf00      	nop
 8007f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f92:	bc08      	pop	{r3}
 8007f94:	469e      	mov	lr, r3
 8007f96:	4770      	bx	lr

08007f98 <_fini>:
 8007f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9a:	bf00      	nop
 8007f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f9e:	bc08      	pop	{r3}
 8007fa0:	469e      	mov	lr, r3
 8007fa2:	4770      	bx	lr
